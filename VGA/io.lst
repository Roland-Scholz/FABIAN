
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	C:\github\FABIAN\VGA\io.a51
	Object File:	C:\github\FABIAN\VGA\io.hex
	List File:	C:\github\FABIAN\VGA\io.lst



 Line  I  Addr  Code            Source

    1:				;
    2:				;
    3:				;
    4:	  0000			init6845:
    5:	  0000	90 00 00			mov	dptr, #0		;enable ADR + DAT
    6:	  0003	E0				movx	a, @dptr
    7:
    8:	  0004	90 80 00			mov	DPTR, #08000h
    9:	  0007	05 00				inc	AUXR1
							^
			  @@@@@ symbol not defined @@@@@

   10:	  0009	90 00 37			mov	DPTR, #SYDATA
   11:	  000C	05 00				inc	AUXR1
							^
			  @@@@@ symbol not defined @@@@@

   12:	  000E	78 00				mov	R0, #0
   13:
   14:	  0010			setregs:
   15:				;		call	PHEX
   16:				;		call	SPACE
   17:
   18:	  0010	E8				mov	A, R0			; send address
   19:	  0011	12 00 D9			call	PHEX
   20:	  0014	F0				movx	@DPTR,A			; address register
   21:	  0015	D2 B5				setb	T1			; clock high
   22:	  0017	C2 B5				clr	T1			; clock low
   23:	  0019	A3				inc	DPTR			; data reg
   24:
   25:	  001A	05 00				inc	AUXR1			;data pointer
							^
			  @@@@@ symbol not defined @@@@@

   26:	  001C	93				movc	A, @A+DPTR
   27:	  001D	12 00 D9			call	PHEX
   28:	  0020	05 00				inc	AUXR1			; address pointer
							^
			  @@@@@ symbol not defined @@@@@

   29:	  0022	F0				movx	@DPTR, A		; send data
   30:	  0023	D2 B5				setb	T1			; clock high
   31:	  0025	C2 B5				clr	T1			; clock low

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   32:
   33:	  0027	12 00 8A			call	SPACE
   34:	  002A	A3				inc	DPTR
   35:	  002B	08				inc	R0
   36:	  002C	B8 0F E1			cjne	R0, #15, setregs
   37:
   38:	  002F	90 00 00			mov	dptr, #0		;enable ADR + DAT
   39:	  0032	E0				movx	a, @dptr
   40:
   41:	  0033	12 00 94			call	newline
   42:				;		call	CIN
   43:				;
   44:				;		setb	INT0
   45:				;		call	CIN
   46:	  0036	22				ret
   47:
   48:				;
   49:				; 25,333 Mhz / 8 = 3,166 Mhz
   50:				;
   51:				; 31468 HZ = 31,77 uS
   52:				;
   53:				; 25,333 Mhz / 8 / 31468 ~ 	100 chars Horizontal Total
   54:				;				  2 chars Fornt Porch
   55:				;				  6 chars Back Porch
   56:				;				 80 chars Horizontal Visible
   57:				;				 12 chars Sync Pulse
   58:				;Scanline part	Pixels	Time [µs]
   59:				;Visible area	640	25.422045680238
   60:				;Front porch	16	0.63555114200596
   61:				;Sync pulse	96	3.8133068520357
   62:				;Back porch	48	1.9066534260179
   63:				;Whole line	800	31.777557100298
   64:
   65:				;Frame part	Lines	Time [ms]
   66:				;Visible area	400	12.711022840119
   67:				;Front porch	12	0.38133068520357
   68:				;Sync pulse	2	0.063555114200596
   69:				;Back porch	35	1.1122144985104
   70:				;Whole frame	449	14.268123138034
   71:				;
   72:	  0037	64		SYDATA:		DB	100		;R0 Horizontal Total - 1
   73:	  0038	50				DB	80		;R1 Horizontal Displayed
   74:	  0039	54				DB	84		;R2 Horizontal Sync Position
   75:	  003A	0C				DB	0ch		;R3 VSYNC & HSYNC width
   76:	  003B	1C				DB	28		;R4 Vertical total - 1			;27	32
   77:	  003C	05				DB	5		;R5 Vertical Adjust
   78:	  003D	19				DB	25		;R6 Vertical Displayed			;25	30
   79:	  003E	1B				DB	27		;R7 Vertical Sync Position		;25	32
   80:	  003F	00				DB	00h		;R8 Mode Control
   81:	  0040	0F				DB	15		;R9 Scan Lines - 1 (character lines)
   82:	  0041	00				DB	0		;R10 Cursor Start
   83:	  0042	00				DB	0		;R11 Cursor End
   84:	  0043	00				DB	000h		;R12 Display Start High
   85:	  0044	00				DB	000h		;R13 Display Start Low
   86:	  0045	00				DB	0		;R14 Cursor Pos High
   87:	  0046	00				DB	0		;R15 Cursor Pos Low

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

   88:	  0047	00				DB	0		;R16 Light Pen High
   89:	  0048	00				DB	0		;R17 Light Pen Low
   90:	  0049	00				DB	0		;R18 Update Address Reg High
   91:	  004A	00				DB	0		;R19 Update Address Reg Low
   92:									;R31 Dummy Register
   93:				;
   94:				;
   95:				;
   96:	  004B			copyFont:
   97:	  004B	90 70 00			mov	DPTR, #7000h
   98:	  004E	05 00				inc	AUXR1
							^
			  @@@@@ symbol not defined @@@@@

   99:	  0050	90 A0 00			mov	DPTR, #(8000h+2000h) ;+4000h+1000h
  100:	  0053	05 00				inc	AUXR1
							^
			  @@@@@ symbol not defined @@@@@

  101:
  102:	  0055	E4		copyFont1:	clr	A
  103:	  0056	93				movc	A, @A+DPTR
  104:	  0057	A3				inc	DPTR
  105:	  0058	05 00				inc	AUXR1
							^
			  @@@@@ symbol not defined @@@@@

  106:	  005A	F0				movx	@DPTR, A
  107:	  005B	A3				inc	DPTR
  108:	  005C	05 00				inc	AUXR1
							^
			  @@@@@ symbol not defined @@@@@

  109:
  110:	  005E	E5 00				mov	A, DP0H
							   ^
			  @@@@@ symbol not defined @@@@@

  111:						;call	PHEX
  112:	  0060	B4 80 F2			cjne	A, #80h, copyFont1
  113:
  114:				;		mov	A, AUXR1
  115:				;		call	PHEX
  116:				;		call	newline
  117:	  0063	22				ret
  118:
  119:				;
  120:				;
  121:				;
  122:	  0064	90 80 00	testScreen:	mov	DPTR, #8000h
  123:	  0067	78 15				mov	R0, #21
  124:
  125:	  0069	79 50		testScreen3:	mov	R1, #80
  126:	  006B	7A 01				mov	R2, #1
  127:	  006D	EA		testScreen1:	mov	A, R2
  128:	  006E	F0				movx	@DPTR, A

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  129:	  006F	A3				inc	DPTR
  130:	  0070	74 70				mov	A, #70h
  131:						;anl	A, #3
  132:						;orl	A, #0f0h
  133:						;inc	A
  134:	  0072	F0				movx	@DPTR, A
  135:	  0073	A3				inc	DPTR
  136:	  0074	0A				inc	R2
  137:	  0075	BA 3A 02			cjne	R2, #'9'+1, testScreen2
  138:	  0078	7A 30				mov	R2, #'0'
  139:	  007A	D9 F1		testScreen2:	djnz	R1, testScreen1
  140:	  007C	D8 EB				djnz	R0, testScreen3
  141:
  142:	  007E	E8		testScreen4:	mov	a, r0
  143:	  007F	F0				movx	@dptr, a
  144:	  0080	A3				inc	dptr
  145:	  0081	74 60				mov	a, #60h
  146:	  0083	F0				movx	@dptr, a
  147:	  0084	A3				inc	dptr
  148:	  0085	08				inc	r0
  149:	  0086	B8 00 F5			cjne	r0, #0, testScreen4
  150:	  0089	22				ret
  151:				;
  152:				;
  153:				;
  154:	  008A	C0 E0		space:		push	acc
  155:	  008C	74 20				mov	a, #' '
  156:	  008E	12 00 9E			call	cout
  157:	  0091	D0 E0				pop	acc
  158:	  0093	22				ret
  159:
  160:	  0094	C0 E0		newline:	push	acc
  161:	  0096	74 0A				mov	a, #0ah
  162:	  0098	12 00 9E			call	cout
  163:	  009B	D0 E0				pop	acc
  164:	  009D	22				ret
  165:
  166:
  167:	  009E	22 00 9E	cout:		jb	serbusy, cout
							^
			  @@@@@ symbol not defined @@@@@

  168:	  00A1	D2 00				setb	serbusy
							^
			  @@@@@ symbol not defined @@@@@

  169:	  00A3	F5 99				mov	sbuf, a
  170:	  00A5	22				ret
  171:
  172:
  173:	  00A6	30 99 FD	cout_x:		jnb	ti, cout_x
  174:	  00A9	C2 99				clr	ti			;clr ti before the mov to sbuf!
  175:	  00AB	F5 99				mov	sbuf, a
  176:	  00AD	22				ret
  177:
  178:	  00AE	C0 00		cin:		push	ar0

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  179:	  00B0	E5 00				mov	a, serstart
							   ^
			  @@@@@ symbol not defined @@@@@

  180:	  00B2	E5 00 FD	cin_2:		cjne	a, serend, cin_1
							   ^
			  @@@@@ symbol not defined @@@@@

  181:	  00B5	80 FB				sjmp	cin_2
  182:	  00B7	C2 AC		cin_1:		clr	ES			;no serial interrupt
  183:	  00B9	04				inc	a
  184:	  00BA	F8				mov	r0, a
  185:	  00BB	F8 00 FD			cjne	r0, #serbuf+16, $+3
							     ^
			  @@@@@ symbol not defined @@@@@

  186:	  00BE	40 02				jc	cin_3
  187:	  00C0	78 00				mov	r0, #serbuf
							     ^
			  @@@@@ symbol not defined @@@@@

  188:	  00C2	E6		cin_3:		mov	a, @r0
  189:	  00C3	88 00				mov	serstart, r0
							^
			  @@@@@ symbol not defined @@@@@

  190:	  00C5	15 00				dec	sercount
							^
			  @@@@@ symbol not defined @@@@@

  191:				;		push	acc
  192:				;		mov	a, sercount
  193:				;		call	phex
  194:				;		pop	acc
  195:
  196:	  00C7	A8 00		cin_5:		mov	r0, sercount
							    ^
			  @@@@@ symbol not defined @@@@@

  197:	  00C9	B8 00 08			cjne	r0, #0, cin_4
  198:
  199:	  00CC	B8 00 08			jnb	xonoff, cin_4
							^
			  @@@@@ symbol not defined @@@@@

  200:
  201:	  00CF	75 99 00	cin_7:		mov	SBUF, #C_XON
							       ^
			  @@@@@ symbol not defined @@@@@

  202:	  00D2	C2 00				clr	xonoff
							^
			  @@@@@ symbol not defined @@@@@

  203:				;		mov	r0, #80
  204:				;		djnz	r0, $

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  205:
  206:	  00D4	D0 00		cin_4:		pop	ar0
  207:	  00D6	D2 AC				setb	ES
  208:	  00D8	22				ret
  209:
  210:
  211:				;cin_x:		jnb	ri, cin
  212:				;		clr	ri
  213:				;		mov	a, sbuf
  214:				;		ret
  215:
  216:				; Highly code efficient resursive call phex contributed
  217:				; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
  218:
  219:	  00D9			phex:
  220:	  00D9			phex8:
  221:	  00D9	11 DB				acall	phex_b
  222:	  00DB	C4		phex_b:		swap	a		;SWAP A will be twice => A unchanged
  223:	  00DC	C0 E0		phex1:		push	acc
  224:	  00DE	54 0F				anl	a, #15
  225:	  00E0	24 90				add	a, #90h	; acc is 0x9X, where X is hex digit
  226:	  00E2	D4				da	a		; if A to F, C=1 and lower four bits are 0..5
  227:	  00E3	34 40				addc	a, #40h
  228:	  00E5	D4				da	a
  229:	  00E6	11 9E				call	cout
  230:	  00E8	D0 E0				pop	acc
  231:	  00EA	22				ret
  232:
  233:	  00EB			phex16:
  234:	  00EB	C0 E0				push	acc
  235:	  00ED	E5 83				mov	a, dph
  236:	  00EF	11 D9				call	phex
  237:	  00F1	E5 82				mov	a, dpl
  238:	  00F3	11 D9				call	phex
  239:	  00F5	D0 E0				pop	acc
  240:	  00F7	22				ret
  241:
  242:				;a not so well documented feature of pstr is that you can print
  243:				;multiple consecutive strings without needing to reload dptr
  244:				;(which takes 3 bytes of code!)... this is useful for inserting
  245:				;numbers or spaces between strings.
  246:
  247:	  00F8	C0 E0		pstr:		push	acc
  248:	  00FA	E4		pstr1:		clr	a
  249:	  00FB	93				movc	a, @a+dptr
  250:	  00FC	A3				inc	dptr
  251:	  00FD	60 0A				jz	pstr2
  252:	  00FF	A2 E7				mov	c, acc.7
  253:	  0101	55 7F				anl	a, 7Fh
  254:	  0103	11 9E				call	cout
  255:	  0105	40 02				jc	pstr2
  256:	  0107	80 F1				sjmp	pstr1
  257:	  0109	D0 E0		pstr2:		pop	acc
  258:	  010B	22				ret
  259:
  260:				;converts the ascii code in Acc to uppercase, if it is lowercase

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  261:
  262:				; Code efficient (saves 6 byes) upper contributed
  263:				; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
  264:
  265:				;upper:
  266:				;		cjne	a, #97, upper2
  267:				;upper2:		jc	upper4		;end if acc < 97
  268:				;		cjne	a, #123, upper3
  269:				;upper3:		jnc	upper4		;end if acc >= 123
  270:				;		add	a, #224		;convert to uppercase
  271:				;upper4:		ret
				^
			  @@@@@ no END statement found @@@@@






                     register banks used:  0

                     22 errors detected




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
CIN				  CODE	    00AE	 178
CIN_1				  CODE	    00B7	 182
CIN_2				  CODE	    00B2	 180
CIN_3				  CODE	    00C2	 188
CIN_4				  CODE	    00D4	 206
CIN_5				  CODE	    00C7	 196
CIN_7				  CODE	    00CF	 201
COPYFONT			  CODE	    004B	  96
COPYFONT1			  CODE	    0055	 102
COUT				  CODE	    009E	 167
COUT_X				  CODE	    00A6	 173
CY				  BIT	      D7
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INIT6845			  CODE	    0000	   4
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
NEWLINE				  CODE	    0094	 160
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PHEX				  CODE	    00D9	 219
PHEX1				  CODE	    00DC	 223
PHEX16				  CODE	    00EB	 233
PHEX8				  CODE	    00D9	 220
PHEX_B				  CODE	    00DB	 222

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
PS				  BIT	      BC
PSTR				  CODE	    00F8	 247
PSTR1				  CODE	    00FA	 248
PSTR2				  CODE	    0109	 257
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RI				  BIT	      98
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SETREGS				  CODE	    0010	  14
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
SPACE				  CODE	    008A	 154
SYDATA				  CODE	    0037	  72
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TESTSCREEN			  CODE	    0064	 122
TESTSCREEN1			  CODE	    006D	 127
TESTSCREEN2			  CODE	    007A	 139
TESTSCREEN3			  CODE	    0069	 125
TESTSCREEN4			  CODE	    007E	 142
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TXD				  BIT	      B1
WR				  BIT	      B6
