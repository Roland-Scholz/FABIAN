
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	C:\github\FABIAN\VGA\io.a51
	Object File:	C:\github\FABIAN\VGA\io.hex
	List File:	C:\github\FABIAN\VGA\io.lst



 Line  I  Addr  Code            Source

    1:				;
    2:				;
    3:				;
    4:	  0000			init6845:
    5:	  0000	90 00 00			mov	dptr, #0		;enable ADR + DAT
    6:	  0003	E0				movx	a, @dptr
    7:
    8:	  0004	90 80 00			mov	DPTR, #08000h
    9:	  0007	05 00				inc	AUXR1
							^
			  @@@@@ symbol not defined @@@@@

   10:	  0009	90 00 2B			mov	DPTR, #SYDATA
   11:	  000C	05 00				inc	AUXR1
							^
			  @@@@@ symbol not defined @@@@@

   12:	  000E	78 00				mov	R0, #0
   13:
   14:	  0010			setregs:
   15:				;		call	PHEX
   16:				;		call	SPACE
   17:
   18:	  0010	E8				mov	A, R0			;send address
   19:				;		call	PHEX
   20:	  0011	F0				movx	@DPTR,A			;address register
   21:	  0012	D2 B5				setb	T1			;clock high
   22:	  0014	C2 B5				clr	T1			;clock low
   23:	  0016	A3				inc	DPTR			;data reg
   24:
   25:	  0017	05 00				inc	AUXR1			;data pointer
							^
			  @@@@@ symbol not defined @@@@@

   26:	  0019	93				movc	A, @A+DPTR
   27:				;		call	PHEX
   28:	  001A	05 00				inc	AUXR1			;address pointer
							^
			  @@@@@ symbol not defined @@@@@

   29:	  001C	F0				movx	@DPTR, A		;send data
   30:	  001D	D2 B5				setb	T1			;clock high
   31:	  001F	C2 B5				clr	T1			;clock low

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   32:
   33:				;		call	SPACE
   34:	  0021	A3				inc	DPTR
   35:	  0022	08				inc	R0
   36:	  0023	B8 0F EA			cjne	R0, #15, setregs
   37:
   38:	  0026	90 00 00			mov	dptr, #0		;enable ADR + DAT
   39:	  0029	E0				movx	a, @dptr
   40:
   41:				;		call	newline
   42:				;		call	CIN
   43:				;
   44:				;		setb	INT0
   45:				;		call	CIN
   46:	  002A	22				ret
   47:
   48:				;
   49:				; 25,333 Mhz / 8 = 3,166 Mhz
   50:				;
   51:				; 31468 HZ = 31,77 uS
   52:				;
   53:				; 25,333 Mhz / 8 / 31468 ~ 	100 chars Horizontal Total
   54:				;				  2 chars Fornt Porch
   55:				;				  6 chars Back Porch
   56:				;				 80 chars Horizontal Visible
   57:				;				 12 chars Sync Pulse
   58:				;Scanline part	Pixels	Time [µs]
   59:				;Visible area	640	25.422045680238
   60:				;Front porch	16	0.63555114200596
   61:				;Sync pulse	96	3.8133068520357
   62:				;Back porch	48	1.9066534260179
   63:				;Whole line	800	31.777557100298
   64:
   65:				;Frame part	Lines	Time [ms]
   66:				;Visible area	400	12.711022840119
   67:				;Front porch	12	0.38133068520357
   68:				;Sync pulse	2	0.063555114200596
   69:				;Back porch	35	1.1122144985104
   70:				;Whole frame	449	14.268123138034
   71:				;
   72:	  002B	64		SYDATA:		DB	100		;R0 Horizontal Total - 1
   73:	  002C	50				DB	80		;R1 Horizontal Displayed
   74:	  002D	54				DB	84		;R2 Horizontal Sync Position
   75:	  002E	0C				DB	0ch		;R3 VSYNC & HSYNC width
   76:	  002F	1C				DB	28		;R4 Vertical total - 1			;27	32
   77:	  0030	05				DB	5		;R5 Vertical Adjust
   78:	  0031	19				DB	25		;R6 Vertical Displayed			;25	30
   79:	  0032	1B				DB	27		;R7 Vertical Sync Position		;25	32
   80:	  0033	00				DB	00h		;R8 Mode Control
   81:	  0034	0F				DB	15		;R9 Scan Lines - 1 (character lines)
   82:	  0035	00				DB	0		;R10 Cursor Start
   83:	  0036	00				DB	0		;R11 Cursor End
   84:	  0037	00				DB	000h		;R12 Display Start High
   85:	  0038	00				DB	000h		;R13 Display Start Low
   86:	  0039	00				DB	0		;R14 Cursor Pos High
   87:	  003A	00				DB	0		;R15 Cursor Pos Low

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

   88:	  003B	00				DB	0		;R16 Light Pen High
   89:	  003C	00				DB	0		;R17 Light Pen Low
   90:	  003D	00				DB	0		;R18 Update Address Reg High
   91:	  003E	00				DB	0		;R19 Update Address Reg Low
   92:									;R31 Dummy Register
   93:				;
   94:				;
   95:				;
   96:	  003F			copyFont:
   97:	  003F	90 00 00			mov	DPTR, #vt100_font
							       ^
			  @@@@@ symbol not defined @@@@@

   98:	  0042	05 00				inc	AUXR1
							^
			  @@@@@ symbol not defined @@@@@

   99:	  0044	90 A0 00			mov	DPTR, #(8000h+2000h) ;+4000h+1000h
  100:	  0047	05 00				inc	AUXR1
							^
			  @@@@@ symbol not defined @@@@@

  101:
  102:	  0049	E4		copyFont1:	clr	A
  103:	  004A	93				movc	A, @A+DPTR
  104:	  004B	A3				inc	DPTR
  105:	  004C	05 00				inc	AUXR1
							^
			  @@@@@ symbol not defined @@@@@

  106:	  004E	F0				movx	@DPTR, A
  107:	  004F	A3				inc	DPTR
  108:	  0050	05 00				inc	AUXR1
							^
			  @@@@@ symbol not defined @@@@@

  109:
  110:	  0052	E5 00				mov	A, DP0H
							   ^
			  @@@@@ symbol not defined @@@@@

  111:						;call	PHEX
  112:	  0054	B4 80 F2			cjne	A, #80h, copyFont1
  113:
  114:				;		mov	A, AUXR1
  115:				;		call	PHEX
  116:				;		call	newline
  117:	  0057	22				ret
  118:
  119:				;
  120:				;
  121:				;
  122:	  0058	90 80 00	testScreen:	mov	DPTR, #8000h
  123:	  005B	78 15				mov	R0, #21
  124:
  125:	  005D	79 50		testScreen3:	mov	R1, #80

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  126:	  005F	7A 01				mov	R2, #1
  127:	  0061	EA		testScreen1:	mov	A, R2
  128:	  0062	F0				movx	@DPTR, A
  129:	  0063	A3				inc	DPTR
  130:	  0064	74 70				mov	A, #70h
  131:						;anl	A, #3
  132:						;orl	A, #0f0h
  133:						;inc	A
  134:	  0066	F0				movx	@DPTR, A
  135:	  0067	A3				inc	DPTR
  136:	  0068	0A				inc	R2
  137:	  0069	BA 3A 02			cjne	R2, #'9'+1, testScreen2
  138:	  006C	7A 30				mov	R2, #'0'
  139:	  006E	D9 F1		testScreen2:	djnz	R1, testScreen1
  140:	  0070	D8 EB				djnz	R0, testScreen3
  141:
  142:	  0072	E8		testScreen4:	mov	a, r0
  143:	  0073	F0				movx	@dptr, a
  144:	  0074	A3				inc	dptr
  145:	  0075	74 60				mov	a, #60h
  146:	  0077	F0				movx	@dptr, a
  147:	  0078	A3				inc	dptr
  148:	  0079	08				inc	r0
  149:	  007A	B8 00 F5			cjne	r0, #0, testScreen4
  150:	  007D	22				ret
  151:				;
  152:				;
  153:				;
  154:	  007E	C0 E0		space:		push	acc
  155:	  0080	74 20				mov	a, #' '
  156:	  0082	12 00 92			call	cout
  157:	  0085	D0 E0				pop	acc
  158:	  0087	22				ret
  159:
  160:	  0088	C0 E0		newline:	push	acc
  161:	  008A	74 0A				mov	a, #0ah
  162:	  008C	12 00 92			call	cout
  163:	  008F	D0 E0				pop	acc
  164:	  0091	22				ret
  165:
  166:
  167:	  0092	22 00 92	cout:		jb	serbusy, cout
							^
			  @@@@@ symbol not defined @@@@@

  168:	  0095	D2 00				setb	serbusy
							^
			  @@@@@ symbol not defined @@@@@

  169:	  0097	F5 99				mov	sbuf, a
  170:	  0099	22				ret
  171:
  172:
  173:	  009A	C0 00		cin:		push	ar0
  174:	  009C	C0 01				push	ar1
  175:	  009E	E5 00		cin_2:		mov	a, serstart

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

							   ^
			  @@@@@ symbol not defined @@@@@

  176:	  00A0	A9 00				mov	r1, serend
							    ^
			  @@@@@ symbol not defined @@@@@

  177:	  00A2	B5 01 02			cjne	a, ar1, cin_1
  178:	  00A5	80 F7				sjmp	cin_2
  179:
  180:	  00A7			cin_1:		;clr	ES			;no serial interrupt
  181:	  00A7	04				inc	a
  182:	  00A8	D2 E7				setb	acc.7
  183:	  00AA	F8				mov	r0, a
  184:	  00AB	F5 00				mov	serstart, a
							^
			  @@@@@ symbol not defined @@@@@

  185:
  186:	  00AD	F5 00 02			jnb	xonoff, cin_3		;XON/XOFF active?
							^
			  @@@@@ symbol not defined @@@@@

  187:	  00B0	B5 01 06			cjne	a, ar1, cin_3
  188:
  189:	  00B3			cin_4:		;setb	ES
  190:	  00B3	74 00				mov	a, #C_XON		;yes, send XON
							    ^
			  @@@@@ symbol not defined @@@@@

  191:	  00B5	11 92				acall	cout
  192:	  00B7	C2 00				clr	xonoff
							^
			  @@@@@ symbol not defined @@@@@

  193:
  194:	  00B9			cin_3:		;setb	ES
  195:	  00B9	E6				mov	a, @r0
  196:	  00BA	D0 01				pop	ar1
  197:	  00BC	D0 00				pop	ar0
  198:	  00BE	22				ret
  199:
  200:
  201:				;cin_x:		jnb	ri, cin
  202:				;		clr	ri
  203:				;		mov	a, sbuf
  204:				;		ret
  205:
  206:				; Highly code efficient resursive call phex contributed
  207:				; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
  208:
  209:	  00BF			phex:
  210:	  00BF			phex8:
  211:	  00BF	11 C1				acall	phex_b
  212:	  00C1	C4		phex_b:		swap	a		;SWAP A will be twice => A unchanged
  213:	  00C2	C0 E0		phex1:		push	acc

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  214:	  00C4	54 0F				anl	a, #15
  215:	  00C6	24 90				add	a, #90h	; acc is 0x9X, where X is hex digit
  216:	  00C8	D4				da	a		; if A to F, C=1 and lower four bits are 0..5
  217:	  00C9	34 40				addc	a, #40h
  218:	  00CB	D4				da	a
  219:	  00CC	11 92				call	cout
  220:	  00CE	D0 E0				pop	acc
  221:	  00D0	22				ret
  222:
  223:	  00D1			phex16:
  224:	  00D1	C0 E0				push	acc
  225:	  00D3	E5 83				mov	a, dph
  226:	  00D5	11 BF				call	phex
  227:	  00D7	E5 82				mov	a, dpl
  228:	  00D9	11 BF				call	phex
  229:	  00DB	D0 E0				pop	acc
  230:	  00DD	22				ret
  231:
  232:				;a not so well documented feature of pstr is that you can print
  233:				;multiple consecutive strings without needing to reload dptr
  234:				;(which takes 3 bytes of code!)... this is useful for inserting
  235:				;numbers or spaces between strings.
  236:
  237:				;pstr:		push	acc
  238:				;pstr1:		clr	a
  239:				;		movc	a, @a+dptr
  240:				;		inc	dptr
  241:				;		jz	pstr2
  242:				;		mov	c, acc.7
  243:				;		anl	a, 7Fh
  244:				;		call	cout
  245:				;		jc	pstr2
  246:				;		sjmp	pstr1
  247:				;pstr2:		pop	acc
  248:				;		ret
  249:
  250:				;converts the ascii code in Acc to uppercase, if it is lowercase
  251:
  252:				; Code efficient (saves 6 byes) upper contributed
  253:				; by Alexander B. Alexandrov <abalex@cbr.spb.ru>
  254:
  255:				;upper:
  256:				;		cjne	a, #97, upper2
  257:				;upper2:		jc	upper4		;end if acc < 97
  258:				;		cjne	a, #123, upper3
  259:				;upper3:		jnc	upper4		;end if acc >= 123
  260:				;		add	a, #224		;convert to uppercase
  261:				;upper4:		ret
				^
			  @@@@@ no END statement found @@@@@







ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



                     register banks used:  0

                     19 errors detected




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
CIN				  CODE	    009A	 173
CIN_1				  CODE	    00A7	 180
CIN_2				  CODE	    009E	 175
CIN_3				  CODE	    00B9	 194
CIN_4				  CODE	    00B3	 189
COPYFONT			  CODE	    003F	  96
COPYFONT1			  CODE	    0049	 102
COUT				  CODE	    0092	 167
CY				  BIT	      D7
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INIT6845			  CODE	    0000	   4
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
NEWLINE				  CODE	    0088	 160
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PHEX				  CODE	    00BF	 209
PHEX1				  CODE	    00C2	 213
PHEX16				  CODE	    00D1	 223
PHEX8				  CODE	    00BF	 210
PHEX_B				  CODE	    00C1	 212
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RI				  BIT	      98
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SETREGS				  CODE	    0010	  14
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
SPACE				  CODE	    007E	 154
SYDATA				  CODE	    002B	  72
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TESTSCREEN			  CODE	    0058	 122
TESTSCREEN1			  CODE	    0061	 127
TESTSCREEN2			  CODE	    006E	 139
TESTSCREEN3			  CODE	    005D	 125
TESTSCREEN4			  CODE	    0072	 142
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TXD				  BIT	      B1
WR				  BIT	      B6
