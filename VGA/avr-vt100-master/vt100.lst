                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module vt100
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _spf
                                     13 	.globl __st_escape
                                     14 	.globl __st_esc_right_br
                                     15 	.globl __st_esc_left_br
                                     16 	.globl __st_command_arg
                                     17 	.globl __vt100_putc
                                     18 	.globl __vt100_drawCursor
                                     19 	.globl __vt100_move
                                     20 	.globl _abs
                                     21 	.globl __vt100_scroll
                                     22 	.globl __vt100_clearLines
                                     23 	.globl _VT100_CURSOR_Y
                                     24 	.globl __vt100_resetScroll
                                     25 	.globl __vt100_reset
                                     26 	.globl _CY
                                     27 	.globl _AC
                                     28 	.globl _F0
                                     29 	.globl _RS1
                                     30 	.globl _RS0
                                     31 	.globl _OV
                                     32 	.globl _FL
                                     33 	.globl _P
                                     34 	.globl _TF2
                                     35 	.globl _EXF2
                                     36 	.globl _RCLK
                                     37 	.globl _TCLK
                                     38 	.globl _EXEN2
                                     39 	.globl _TR2
                                     40 	.globl _C_T2
                                     41 	.globl _CP_RL2
                                     42 	.globl _T2CON_7
                                     43 	.globl _T2CON_6
                                     44 	.globl _T2CON_5
                                     45 	.globl _T2CON_4
                                     46 	.globl _T2CON_3
                                     47 	.globl _T2CON_2
                                     48 	.globl _T2CON_1
                                     49 	.globl _T2CON_0
                                     50 	.globl _PT2
                                     51 	.globl _PS
                                     52 	.globl _PT1
                                     53 	.globl _PX1
                                     54 	.globl _PT0
                                     55 	.globl _PX0
                                     56 	.globl _RD
                                     57 	.globl _WR
                                     58 	.globl _T1
                                     59 	.globl _T0
                                     60 	.globl _INT1
                                     61 	.globl _INT0
                                     62 	.globl _TXD
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _EA
                                     73 	.globl _ET2
                                     74 	.globl _ES
                                     75 	.globl _ET1
                                     76 	.globl _EX1
                                     77 	.globl _ET0
                                     78 	.globl _EX0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _SM0
                                     88 	.globl _SM1
                                     89 	.globl _SM2
                                     90 	.globl _REN
                                     91 	.globl _TB8
                                     92 	.globl _RB8
                                     93 	.globl _TI
                                     94 	.globl _RI
                                     95 	.globl _T2EX
                                     96 	.globl _T2
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _TF1
                                    106 	.globl _TR1
                                    107 	.globl _TF0
                                    108 	.globl _TR0
                                    109 	.globl _IE1
                                    110 	.globl _IT1
                                    111 	.globl _IE0
                                    112 	.globl _IT0
                                    113 	.globl _P0_7
                                    114 	.globl _P0_6
                                    115 	.globl _P0_5
                                    116 	.globl _P0_4
                                    117 	.globl _P0_3
                                    118 	.globl _P0_2
                                    119 	.globl _P0_1
                                    120 	.globl _P0_0
                                    121 	.globl _B
                                    122 	.globl _A
                                    123 	.globl _ACC
                                    124 	.globl _PSW
                                    125 	.globl _TH2
                                    126 	.globl _TL2
                                    127 	.globl _RCAP2H
                                    128 	.globl _RCAP2L
                                    129 	.globl _T2MOD
                                    130 	.globl _T2CON
                                    131 	.globl _IP
                                    132 	.globl _P3
                                    133 	.globl _IE
                                    134 	.globl _P2
                                    135 	.globl _SBUF
                                    136 	.globl _SCON
                                    137 	.globl _P1
                                    138 	.globl _TH1
                                    139 	.globl _TH0
                                    140 	.globl _TL1
                                    141 	.globl _TL0
                                    142 	.globl _TMOD
                                    143 	.globl _TCON
                                    144 	.globl _PCON
                                    145 	.globl _DPH
                                    146 	.globl _DPL
                                    147 	.globl _SP
                                    148 	.globl _P0
                                    149 	.globl _vga_init
                                    150 	.globl _vga_drawChar
                                    151 	.globl _vga_setBackColor
                                    152 	.globl _vga_setFrontColor
                                    153 	.globl _vga_fillRect
                                    154 	.globl _vga_setScrollStart
                                    155 	.globl _vga_setScrollMargins
                                    156 	.globl _putchar
                                    157 	.globl _getchar
                                    158 	.globl __st_esc_question
                                    159 	.globl __st_esc_sq_bracket
                                    160 	.globl __st_esc_hash
                                    161 	.globl __st_idle
                                    162 	.globl _vt100_init
                                    163 	.globl _vt100_putc
                                    164 	.globl _vt100_puts
                                    165 ;--------------------------------------------------------
                                    166 ; special function registers
                                    167 ;--------------------------------------------------------
                                    168 	.area RSEG    (ABS,DATA)
      000000                        169 	.org 0x0000
                           000080   170 _P0	=	0x0080
                           000081   171 _SP	=	0x0081
                           000082   172 _DPL	=	0x0082
                           000083   173 _DPH	=	0x0083
                           000087   174 _PCON	=	0x0087
                           000088   175 _TCON	=	0x0088
                           000089   176 _TMOD	=	0x0089
                           00008A   177 _TL0	=	0x008a
                           00008B   178 _TL1	=	0x008b
                           00008C   179 _TH0	=	0x008c
                           00008D   180 _TH1	=	0x008d
                           000090   181 _P1	=	0x0090
                           000098   182 _SCON	=	0x0098
                           000099   183 _SBUF	=	0x0099
                           0000A0   184 _P2	=	0x00a0
                           0000A8   185 _IE	=	0x00a8
                           0000B0   186 _P3	=	0x00b0
                           0000B8   187 _IP	=	0x00b8
                           0000C8   188 _T2CON	=	0x00c8
                           0000C9   189 _T2MOD	=	0x00c9
                           0000CA   190 _RCAP2L	=	0x00ca
                           0000CB   191 _RCAP2H	=	0x00cb
                           0000CC   192 _TL2	=	0x00cc
                           0000CD   193 _TH2	=	0x00cd
                           0000D0   194 _PSW	=	0x00d0
                           0000E0   195 _ACC	=	0x00e0
                           0000E0   196 _A	=	0x00e0
                           0000F0   197 _B	=	0x00f0
                                    198 ;--------------------------------------------------------
                                    199 ; special function bits
                                    200 ;--------------------------------------------------------
                                    201 	.area RSEG    (ABS,DATA)
      000000                        202 	.org 0x0000
                           000080   203 _P0_0	=	0x0080
                           000081   204 _P0_1	=	0x0081
                           000082   205 _P0_2	=	0x0082
                           000083   206 _P0_3	=	0x0083
                           000084   207 _P0_4	=	0x0084
                           000085   208 _P0_5	=	0x0085
                           000086   209 _P0_6	=	0x0086
                           000087   210 _P0_7	=	0x0087
                           000088   211 _IT0	=	0x0088
                           000089   212 _IE0	=	0x0089
                           00008A   213 _IT1	=	0x008a
                           00008B   214 _IE1	=	0x008b
                           00008C   215 _TR0	=	0x008c
                           00008D   216 _TF0	=	0x008d
                           00008E   217 _TR1	=	0x008e
                           00008F   218 _TF1	=	0x008f
                           000090   219 _P1_0	=	0x0090
                           000091   220 _P1_1	=	0x0091
                           000092   221 _P1_2	=	0x0092
                           000093   222 _P1_3	=	0x0093
                           000094   223 _P1_4	=	0x0094
                           000095   224 _P1_5	=	0x0095
                           000096   225 _P1_6	=	0x0096
                           000097   226 _P1_7	=	0x0097
                           000090   227 _T2	=	0x0090
                           000091   228 _T2EX	=	0x0091
                           000098   229 _RI	=	0x0098
                           000099   230 _TI	=	0x0099
                           00009A   231 _RB8	=	0x009a
                           00009B   232 _TB8	=	0x009b
                           00009C   233 _REN	=	0x009c
                           00009D   234 _SM2	=	0x009d
                           00009E   235 _SM1	=	0x009e
                           00009F   236 _SM0	=	0x009f
                           0000A0   237 _P2_0	=	0x00a0
                           0000A1   238 _P2_1	=	0x00a1
                           0000A2   239 _P2_2	=	0x00a2
                           0000A3   240 _P2_3	=	0x00a3
                           0000A4   241 _P2_4	=	0x00a4
                           0000A5   242 _P2_5	=	0x00a5
                           0000A6   243 _P2_6	=	0x00a6
                           0000A7   244 _P2_7	=	0x00a7
                           0000A8   245 _EX0	=	0x00a8
                           0000A9   246 _ET0	=	0x00a9
                           0000AA   247 _EX1	=	0x00aa
                           0000AB   248 _ET1	=	0x00ab
                           0000AC   249 _ES	=	0x00ac
                           0000AD   250 _ET2	=	0x00ad
                           0000AF   251 _EA	=	0x00af
                           0000B0   252 _P3_0	=	0x00b0
                           0000B1   253 _P3_1	=	0x00b1
                           0000B2   254 _P3_2	=	0x00b2
                           0000B3   255 _P3_3	=	0x00b3
                           0000B4   256 _P3_4	=	0x00b4
                           0000B5   257 _P3_5	=	0x00b5
                           0000B6   258 _P3_6	=	0x00b6
                           0000B7   259 _P3_7	=	0x00b7
                           0000B0   260 _RXD	=	0x00b0
                           0000B1   261 _TXD	=	0x00b1
                           0000B2   262 _INT0	=	0x00b2
                           0000B3   263 _INT1	=	0x00b3
                           0000B4   264 _T0	=	0x00b4
                           0000B5   265 _T1	=	0x00b5
                           0000B6   266 _WR	=	0x00b6
                           0000B7   267 _RD	=	0x00b7
                           0000B8   268 _PX0	=	0x00b8
                           0000B9   269 _PT0	=	0x00b9
                           0000BA   270 _PX1	=	0x00ba
                           0000BB   271 _PT1	=	0x00bb
                           0000BC   272 _PS	=	0x00bc
                           0000BD   273 _PT2	=	0x00bd
                           0000C8   274 _T2CON_0	=	0x00c8
                           0000C9   275 _T2CON_1	=	0x00c9
                           0000CA   276 _T2CON_2	=	0x00ca
                           0000CB   277 _T2CON_3	=	0x00cb
                           0000CC   278 _T2CON_4	=	0x00cc
                           0000CD   279 _T2CON_5	=	0x00cd
                           0000CE   280 _T2CON_6	=	0x00ce
                           0000CF   281 _T2CON_7	=	0x00cf
                           0000C8   282 _CP_RL2	=	0x00c8
                           0000C9   283 _C_T2	=	0x00c9
                           0000CA   284 _TR2	=	0x00ca
                           0000CB   285 _EXEN2	=	0x00cb
                           0000CC   286 _TCLK	=	0x00cc
                           0000CD   287 _RCLK	=	0x00cd
                           0000CE   288 _EXF2	=	0x00ce
                           0000CF   289 _TF2	=	0x00cf
                           0000D0   290 _P	=	0x00d0
                           0000D1   291 _FL	=	0x00d1
                           0000D2   292 _OV	=	0x00d2
                           0000D3   293 _RS0	=	0x00d3
                           0000D4   294 _RS1	=	0x00d4
                           0000D5   295 _F0	=	0x00d5
                           0000D6   296 _AC	=	0x00d6
                           0000D7   297 _CY	=	0x00d7
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable register banks
                                    300 ;--------------------------------------------------------
                                    301 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        302 	.ds 8
                                    303 ;--------------------------------------------------------
                                    304 ; overlayable bit register bank
                                    305 ;--------------------------------------------------------
                                    306 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        307 bits:
      000000                        308 	.ds 1
                           008000   309 	b0 = bits[0]
                           008100   310 	b1 = bits[1]
                           008200   311 	b2 = bits[2]
                           008300   312 	b3 = bits[3]
                           008400   313 	b4 = bits[4]
                           008500   314 	b5 = bits[5]
                           008600   315 	b6 = bits[6]
                           008700   316 	b7 = bits[7]
                                    317 ;--------------------------------------------------------
                                    318 ; internal ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area DSEG    (DATA)
      000000                        321 _vga_color:
      000000                        322 	.ds 1
      000001                        323 _scroll_start:
      000001                        324 	.ds 1
      000002                        325 _scroll_top:
      000002                        326 	.ds 1
      000003                        327 _scroll_bottom:
      000003                        328 	.ds 1
      000004                        329 _term:
      000004                        330 	.ds 28
      000020                        331 _buf:
      000020                        332 	.ds 32
                                    333 ;--------------------------------------------------------
                                    334 ; overlayable items in internal ram
                                    335 ;--------------------------------------------------------
                                    336 ;--------------------------------------------------------
                                    337 ; Stack segment in internal ram
                                    338 ;--------------------------------------------------------
                                    339 	.area SSEG
      000000                        340 __start__stack:
      000000                        341 	.ds	1
                                    342 
                                    343 ;--------------------------------------------------------
                                    344 ; indirectly addressable internal ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area ISEG    (DATA)
                                    347 ;--------------------------------------------------------
                                    348 ; absolute internal ram data
                                    349 ;--------------------------------------------------------
                                    350 	.area IABS    (ABS,DATA)
                                    351 	.area IABS    (ABS,DATA)
                                    352 ;--------------------------------------------------------
                                    353 ; bit data
                                    354 ;--------------------------------------------------------
                                    355 	.area BSEG    (BIT)
                                    356 ;--------------------------------------------------------
                                    357 ; paged external ram data
                                    358 ;--------------------------------------------------------
                                    359 	.area PSEG    (PAG,XDATA)
                                    360 ;--------------------------------------------------------
                                    361 ; uninitialized external ram data
                                    362 ;--------------------------------------------------------
                                    363 	.area XSEG    (XDATA)
                                    364 ;--------------------------------------------------------
                                    365 ; absolute external ram data
                                    366 ;--------------------------------------------------------
                                    367 	.area XABS    (ABS,XDATA)
                                    368 ;--------------------------------------------------------
                                    369 ; initialized external ram data
                                    370 ;--------------------------------------------------------
                                    371 	.area XISEG   (XDATA)
                                    372 	.area HOME    (CODE)
                                    373 	.area GSINIT0 (CODE)
                                    374 	.area GSINIT1 (CODE)
                                    375 	.area GSINIT2 (CODE)
                                    376 	.area GSINIT3 (CODE)
                                    377 	.area GSINIT4 (CODE)
                                    378 	.area GSINIT5 (CODE)
                                    379 	.area GSINIT  (CODE)
                                    380 	.area GSFINAL (CODE)
                                    381 	.area CSEG    (CODE)
                                    382 ;--------------------------------------------------------
                                    383 ; interrupt vector
                                    384 ;--------------------------------------------------------
                                    385 	.area HOME    (CODE)
      000000                        386 __interrupt_vect:
      000000 02r00r00         [24]  387 	ljmp	__sdcc_gsinit_startup
                                    388 ;--------------------------------------------------------
                                    389 ; global & static initialisations
                                    390 ;--------------------------------------------------------
                                    391 	.area HOME    (CODE)
                                    392 	.area GSINIT  (CODE)
                                    393 	.area GSFINAL (CODE)
                                    394 	.area GSINIT  (CODE)
                                    395 	.globl __sdcc_gsinit_startup
                                    396 	.globl __sdcc_program_startup
                                    397 	.globl __start__stack
                                    398 	.globl __mcs51_genXINIT
                                    399 	.globl __mcs51_genXRAMCLEAR
                                    400 	.globl __mcs51_genRAMCLEAR
                                    401 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  402 	ljmp	__sdcc_program_startup
                                    403 ;--------------------------------------------------------
                                    404 ; Home
                                    405 ;--------------------------------------------------------
                                    406 	.area HOME    (CODE)
                                    407 	.area HOME    (CODE)
      000003                        408 __sdcc_program_startup:
      000003 02r27r82         [24]  409 	ljmp	_main
                                    410 ;	return from main will return to caller
                                    411 ;--------------------------------------------------------
                                    412 ; code
                                    413 ;--------------------------------------------------------
                                    414 	.area CSEG    (CODE)
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'vga_init'
                                    417 ;------------------------------------------------------------
                                    418 ;	vga.h:37: void vga_init(void) {
                                    419 ;	-----------------------------------------
                                    420 ;	 function vga_init
                                    421 ;	-----------------------------------------
      000000                        422 _vga_init:
                           000007   423 	ar7 = 0x07
                           000006   424 	ar6 = 0x06
                           000005   425 	ar5 = 0x05
                           000004   426 	ar4 = 0x04
                           000003   427 	ar3 = 0x03
                           000002   428 	ar2 = 0x02
                           000001   429 	ar1 = 0x01
                           000000   430 	ar0 = 0x00
                                    431 ;	vga.h:39: }
      000000 22               [24]  432 	ret
                                    433 ;------------------------------------------------------------
                                    434 ;Allocation info for local variables in function 'vga_drawChar'
                                    435 ;------------------------------------------------------------
                                    436 ;y                         Allocated to stack - _bp -3
                                    437 ;c                         Allocated to stack - _bp -4
                                    438 ;x                         Allocated to registers r7 
                                    439 ;mem                       Allocated to registers r7 r6 r5 
                                    440 ;------------------------------------------------------------
                                    441 ;	vga.h:42: void vga_drawChar(uint8_t x, uint8_t y, uint8_t c) {
                                    442 ;	-----------------------------------------
                                    443 ;	 function vga_drawChar
                                    444 ;	-----------------------------------------
      000001                        445 _vga_drawChar:
      000001 C0*00            [24]  446 	push	_bp
      000003 85 81*00         [24]  447 	mov	_bp,sp
      000006 AF 82            [24]  448 	mov	r7,dpl
                                    449 ;	vga.h:46: mem += (x + y * VGA_WIDTH) << 1;
      000008 7E 00            [12]  450 	mov	r6,#0x00
      00000A E5*00            [12]  451 	mov	a,_bp
      00000C 24 FD            [12]  452 	add	a,#0xfd
      00000E F8               [12]  453 	mov	r0,a
      00000F 86 04            [24]  454 	mov	ar4,@r0
      000011 7D 00            [12]  455 	mov	r5,#0x00
      000013 C0 07            [24]  456 	push	ar7
      000015 C0 06            [24]  457 	push	ar6
      000017 C0 04            [24]  458 	push	ar4
      000019 C0 05            [24]  459 	push	ar5
      00001B 90 00 50         [24]  460 	mov	dptr,#0x0050
      00001E 12r00r00         [24]  461 	lcall	__mulint
      000021 AC 82            [24]  462 	mov	r4,dpl
      000023 AD 83            [24]  463 	mov	r5,dph
      000025 15 81            [12]  464 	dec	sp
      000027 15 81            [12]  465 	dec	sp
      000029 D0 06            [24]  466 	pop	ar6
      00002B D0 07            [24]  467 	pop	ar7
      00002D EC               [12]  468 	mov	a,r4
      00002E 2F               [12]  469 	add	a,r7
      00002F FF               [12]  470 	mov	r7,a
      000030 ED               [12]  471 	mov	a,r5
      000031 3E               [12]  472 	addc	a,r6
      000032 FE               [12]  473 	mov	r6,a
      000033 EF               [12]  474 	mov	a,r7
      000034 2F               [12]  475 	add	a,r7
      000035 FF               [12]  476 	mov	r7,a
      000036 EE               [12]  477 	mov	a,r6
      000037 33               [12]  478 	rlc	a
      000038 24 80            [12]  479 	add	a,#0x80
      00003A FE               [12]  480 	mov	r6,a
      00003B 7D 00            [12]  481 	mov	r5,#0x00
                                    482 ;	vga.h:48: *(mem) = c;
      00003D 8F 82            [24]  483 	mov	dpl,r7
      00003F 8E 83            [24]  484 	mov	dph,r6
      000041 8D F0            [24]  485 	mov	b,r5
      000043 E5*00            [12]  486 	mov	a,_bp
      000045 24 FC            [12]  487 	add	a,#0xfc
      000047 F8               [12]  488 	mov	r0,a
      000048 E6               [12]  489 	mov	a,@r0
      000049 12r00r00         [24]  490 	lcall	__gptrput
                                    491 ;	vga.h:49: mem++;
      00004C 0F               [12]  492 	inc	r7
      00004D BF 00 01         [24]  493 	cjne	r7,#0x00,00103$
      000050 0E               [12]  494 	inc	r6
      000051                        495 00103$:
                                    496 ;	vga.h:50: *(mem) = vga_color;
      000051 8F 82            [24]  497 	mov	dpl,r7
      000053 8E 83            [24]  498 	mov	dph,r6
      000055 8D F0            [24]  499 	mov	b,r5
      000057 E5*00            [12]  500 	mov	a,_vga_color
      000059 12r00r00         [24]  501 	lcall	__gptrput
                                    502 ;	vga.h:51: }
      00005C D0*00            [24]  503 	pop	_bp
      00005E 22               [24]  504 	ret
                                    505 ;------------------------------------------------------------
                                    506 ;Allocation info for local variables in function 'vga_setBackColor'
                                    507 ;------------------------------------------------------------
                                    508 ;col                       Allocated to registers r7 
                                    509 ;------------------------------------------------------------
                                    510 ;	vga.h:53: void vga_setBackColor(uint8_t col) {
                                    511 ;	-----------------------------------------
                                    512 ;	 function vga_setBackColor
                                    513 ;	-----------------------------------------
      00005F                        514 _vga_setBackColor:
      00005F AF 82            [24]  515 	mov	r7,dpl
                                    516 ;	vga.h:56: vga_color &= 0xf0;
      000061 53*00 F0         [24]  517 	anl	_vga_color,#0xf0
                                    518 ;	vga.h:57: vga_color |= (col & 0x0f);
      000064 53 07 0F         [24]  519 	anl	ar7,#0x0f
      000067 EF               [12]  520 	mov	a,r7
      000068 42*00            [12]  521 	orl	_vga_color,a
                                    522 ;	vga.h:59: }
      00006A 22               [24]  523 	ret
                                    524 ;------------------------------------------------------------
                                    525 ;Allocation info for local variables in function 'vga_setFrontColor'
                                    526 ;------------------------------------------------------------
                                    527 ;col                       Allocated to registers r7 
                                    528 ;------------------------------------------------------------
                                    529 ;	vga.h:61: void vga_setFrontColor(uint8_t col) {
                                    530 ;	-----------------------------------------
                                    531 ;	 function vga_setFrontColor
                                    532 ;	-----------------------------------------
      00006B                        533 _vga_setFrontColor:
      00006B AF 82            [24]  534 	mov	r7,dpl
                                    535 ;	vga.h:63: vga_color &= 0x0f;
      00006D 53*00 0F         [24]  536 	anl	_vga_color,#0x0f
                                    537 ;	vga.h:64: vga_color |= (col & 0xf0);
      000070 53 07 F0         [24]  538 	anl	ar7,#0xf0
      000073 EF               [12]  539 	mov	a,r7
      000074 42*00            [12]  540 	orl	_vga_color,a
                                    541 ;	vga.h:65: }
      000076 22               [24]  542 	ret
                                    543 ;------------------------------------------------------------
                                    544 ;Allocation info for local variables in function 'vga_fillRect'
                                    545 ;------------------------------------------------------------
                                    546 ;y                         Allocated to stack - _bp -3
                                    547 ;w                         Allocated to stack - _bp -4
                                    548 ;h                         Allocated to stack - _bp -5
                                    549 ;color                     Allocated to stack - _bp -6
                                    550 ;x                         Allocated to stack - _bp +1
                                    551 ;i                         Allocated to registers r6 
                                    552 ;j                         Allocated to registers r3 
                                    553 ;c                         Allocated to registers 
                                    554 ;i0                        Allocated to registers r5 
                                    555 ;j0                        Allocated to registers r4 
                                    556 ;mem                       Allocated to registers r2 r5 r7 
                                    557 ;sloc0                     Allocated to stack - _bp +2
                                    558 ;------------------------------------------------------------
                                    559 ;	vga.h:67: void vga_fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,
                                    560 ;	-----------------------------------------
                                    561 ;	 function vga_fillRect
                                    562 ;	-----------------------------------------
      000077                        563 _vga_fillRect:
      000077 C0*00            [24]  564 	push	_bp
      000079 85 81*00         [24]  565 	mov	_bp,sp
      00007C C0 82            [24]  566 	push	dpl
      00007E 05 81            [12]  567 	inc	sp
      000080 05 81            [12]  568 	inc	sp
      000082 05 81            [12]  569 	inc	sp
                                    570 ;	vga.h:77: for (i = y, i0 = y + h; i < i0; i++) {
      000084 E5*00            [12]  571 	mov	a,_bp
      000086 24 FD            [12]  572 	add	a,#0xfd
      000088 F8               [12]  573 	mov	r0,a
      000089 86 06            [24]  574 	mov	ar6,@r0
      00008B E5*00            [12]  575 	mov	a,_bp
      00008D 24 FB            [12]  576 	add	a,#0xfb
      00008F F8               [12]  577 	mov	r0,a
      000090 E6               [12]  578 	mov	a,@r0
      000091 2E               [12]  579 	add	a,r6
      000092 FD               [12]  580 	mov	r5,a
      000093 A8*00            [24]  581 	mov	r0,_bp
      000095 08               [12]  582 	inc	r0
      000096 E5*00            [12]  583 	mov	a,_bp
      000098 24 FC            [12]  584 	add	a,#0xfc
      00009A F9               [12]  585 	mov	r1,a
      00009B E7               [12]  586 	mov	a,@r1
      00009C 26               [12]  587 	add	a,@r0
      00009D FC               [12]  588 	mov	r4,a
      00009E                        589 00107$:
      00009E C3               [12]  590 	clr	c
      00009F EE               [12]  591 	mov	a,r6
      0000A0 9D               [12]  592 	subb	a,r5
      0000A1 40 03            [24]  593 	jc	00133$
      0000A3 02r01r27         [24]  594 	ljmp	00109$
      0000A6                        595 00133$:
                                    596 ;	vga.h:78: mem = 0x8000 + ((i * VGA_WIDTH) << 1);
      0000A6 8E 02            [24]  597 	mov	ar2,r6
      0000A8 7B 00            [12]  598 	mov	r3,#0x00
      0000AA C0 06            [24]  599 	push	ar6
      0000AC C0 05            [24]  600 	push	ar5
      0000AE C0 04            [24]  601 	push	ar4
      0000B0 C0 02            [24]  602 	push	ar2
      0000B2 C0 03            [24]  603 	push	ar3
      0000B4 90 00 50         [24]  604 	mov	dptr,#0x0050
      0000B7 12r00r00         [24]  605 	lcall	__mulint
      0000BA AA 82            [24]  606 	mov	r2,dpl
      0000BC AB 83            [24]  607 	mov	r3,dph
      0000BE 15 81            [12]  608 	dec	sp
      0000C0 15 81            [12]  609 	dec	sp
      0000C2 D0 04            [24]  610 	pop	ar4
      0000C4 D0 05            [24]  611 	pop	ar5
      0000C6 D0 06            [24]  612 	pop	ar6
      0000C8 EA               [12]  613 	mov	a,r2
      0000C9 2A               [12]  614 	add	a,r2
      0000CA FA               [12]  615 	mov	r2,a
      0000CB EB               [12]  616 	mov	a,r3
      0000CC 33               [12]  617 	rlc	a
      0000CD 24 80            [12]  618 	add	a,#0x80
      0000CF FB               [12]  619 	mov	r3,a
      0000D0 A8*00            [24]  620 	mov	r0,_bp
      0000D2 08               [12]  621 	inc	r0
      0000D3 08               [12]  622 	inc	r0
      0000D4 A6 02            [24]  623 	mov	@r0,ar2
      0000D6 08               [12]  624 	inc	r0
      0000D7 A6 03            [24]  625 	mov	@r0,ar3
      0000D9 08               [12]  626 	inc	r0
      0000DA 76 00            [12]  627 	mov	@r0,#0x00
                                    628 ;	vga.h:79: for (j = x, j0 = x + w; j < j0; j++) {
      0000DC A8*00            [24]  629 	mov	r0,_bp
      0000DE 08               [12]  630 	inc	r0
      0000DF 86 03            [24]  631 	mov	ar3,@r0
      0000E1                        632 00104$:
      0000E1 C3               [12]  633 	clr	c
      0000E2 EB               [12]  634 	mov	a,r3
      0000E3 9C               [12]  635 	subb	a,r4
      0000E4 50 3D            [24]  636 	jnc	00108$
                                    637 ;	vga.h:80: *mem = 1;
      0000E6 C0 05            [24]  638 	push	ar5
      0000E8 A8*00            [24]  639 	mov	r0,_bp
      0000EA 08               [12]  640 	inc	r0
      0000EB 08               [12]  641 	inc	r0
      0000EC 86 82            [24]  642 	mov	dpl,@r0
      0000EE 08               [12]  643 	inc	r0
      0000EF 86 83            [24]  644 	mov	dph,@r0
      0000F1 08               [12]  645 	inc	r0
      0000F2 86 F0            [24]  646 	mov	b,@r0
      0000F4 74 01            [12]  647 	mov	a,#0x01
      0000F6 12r00r00         [24]  648 	lcall	__gptrput
                                    649 ;	vga.h:81: mem++;
      0000F9 A8*00            [24]  650 	mov	r0,_bp
      0000FB 08               [12]  651 	inc	r0
      0000FC 08               [12]  652 	inc	r0
      0000FD 26               [12]  653 	add	a,@r0
      0000FE FA               [12]  654 	mov	r2,a
      0000FF E4               [12]  655 	clr	a
      000100 08               [12]  656 	inc	r0
      000101 36               [12]  657 	addc	a,@r0
      000102 FD               [12]  658 	mov	r5,a
      000103 08               [12]  659 	inc	r0
      000104 86 07            [24]  660 	mov	ar7,@r0
                                    661 ;	vga.h:82: *mem = 1;
      000106 8A 82            [24]  662 	mov	dpl,r2
      000108 8D 83            [24]  663 	mov	dph,r5
      00010A 8F F0            [24]  664 	mov	b,r7
      00010C 74 01            [12]  665 	mov	a,#0x01
      00010E 12r00r00         [24]  666 	lcall	__gptrput
                                    667 ;	vga.h:83: mem++;
      000111 A8*00            [24]  668 	mov	r0,_bp
      000113 08               [12]  669 	inc	r0
      000114 08               [12]  670 	inc	r0
      000115 2A               [12]  671 	add	a,r2
      000116 F6               [12]  672 	mov	@r0,a
      000117 E4               [12]  673 	clr	a
      000118 3D               [12]  674 	addc	a,r5
      000119 08               [12]  675 	inc	r0
      00011A F6               [12]  676 	mov	@r0,a
      00011B 08               [12]  677 	inc	r0
      00011C A6 07            [24]  678 	mov	@r0,ar7
                                    679 ;	vga.h:79: for (j = x, j0 = x + w; j < j0; j++) {
      00011E 0B               [12]  680 	inc	r3
      00011F D0 05            [24]  681 	pop	ar5
      000121 80 BE            [24]  682 	sjmp	00104$
      000123                        683 00108$:
                                    684 ;	vga.h:77: for (i = y, i0 = y + h; i < i0; i++) {
      000123 0E               [12]  685 	inc	r6
      000124 02r00r9E         [24]  686 	ljmp	00107$
      000127                        687 00109$:
                                    688 ;	vga.h:87: }
      000127 85*00 81         [24]  689 	mov	sp,_bp
      00012A D0*00            [24]  690 	pop	_bp
      00012C 22               [24]  691 	ret
                                    692 ;------------------------------------------------------------
                                    693 ;Allocation info for local variables in function 'vga_setScrollStart'
                                    694 ;------------------------------------------------------------
                                    695 ;start                     Allocated to registers 
                                    696 ;------------------------------------------------------------
                                    697 ;	vga.h:89: void vga_setScrollStart(uint8_t start) {
                                    698 ;	-----------------------------------------
                                    699 ;	 function vga_setScrollStart
                                    700 ;	-----------------------------------------
      00012D                        701 _vga_setScrollStart:
      00012D 85 82*01         [24]  702 	mov	_scroll_start,dpl
                                    703 ;	vga.h:91: scroll_start = start;
                                    704 ;	vga.h:92: }
      000130 22               [24]  705 	ret
                                    706 ;------------------------------------------------------------
                                    707 ;Allocation info for local variables in function 'vga_setScrollMargins'
                                    708 ;------------------------------------------------------------
                                    709 ;bottom                    Allocated to stack - _bp -3
                                    710 ;top                       Allocated to registers 
                                    711 ;------------------------------------------------------------
                                    712 ;	vga.h:94: void vga_setScrollMargins(uint8_t top, uint8_t bottom) {
                                    713 ;	-----------------------------------------
                                    714 ;	 function vga_setScrollMargins
                                    715 ;	-----------------------------------------
      000131                        716 _vga_setScrollMargins:
      000131 C0*00            [24]  717 	push	_bp
      000133 85 81*00         [24]  718 	mov	_bp,sp
      000136 85 82*02         [24]  719 	mov	_scroll_top,dpl
                                    720 ;	vga.h:97: scroll_bottom = bottom;
      000139 E5*00            [12]  721 	mov	a,_bp
      00013B 24 FD            [12]  722 	add	a,#0xfd
      00013D F8               [12]  723 	mov	r0,a
      00013E 86*03            [24]  724 	mov	_scroll_bottom,@r0
                                    725 ;	vga.h:98: }
      000140 D0*00            [24]  726 	pop	_bp
      000142 22               [24]  727 	ret
                                    728 ;------------------------------------------------------------
                                    729 ;Allocation info for local variables in function 'putchar'
                                    730 ;------------------------------------------------------------
                                    731 ;c                         Allocated to registers r6 r7 
                                    732 ;------------------------------------------------------------
                                    733 ;	vt100.c:10: int putchar (int c) {
                                    734 ;	-----------------------------------------
                                    735 ;	 function putchar
                                    736 ;	-----------------------------------------
      000143                        737 _putchar:
      000143 AE 82            [24]  738 	mov	r6,dpl
      000145 AF 83            [24]  739 	mov	r7,dph
                                    740 ;	vt100.c:12: while (!TI) /* assumes UART is initialized */
      000147                        741 00101$:
                                    742 ;	vt100.c:14: TI = 0;
                                    743 ;	assignBit
      000147 10 99 02         [24]  744 	jbc	_TI,00120$
      00014A 80 FB            [24]  745 	sjmp	00101$
      00014C                        746 00120$:
                                    747 ;	vt100.c:15: SBUF = c;
      00014C 8E 05            [24]  748 	mov	ar5,r6
      00014E 8D 99            [24]  749 	mov	_SBUF,r5
                                    750 ;	vt100.c:17: if ((char)c == '\n') putchar('\r');
      000150 BD 0A 0E         [24]  751 	cjne	r5,#0x0a,00105$
      000153 90 00 0D         [24]  752 	mov	dptr,#0x000d
      000156 C0 07            [24]  753 	push	ar7
      000158 C0 06            [24]  754 	push	ar6
      00015A 12r01r43         [24]  755 	lcall	_putchar
      00015D D0 06            [24]  756 	pop	ar6
      00015F D0 07            [24]  757 	pop	ar7
      000161                        758 00105$:
                                    759 ;	vt100.c:18: return c;
      000161 8E 82            [24]  760 	mov	dpl,r6
      000163 8F 83            [24]  761 	mov	dph,r7
                                    762 ;	vt100.c:19: }
      000165 22               [24]  763 	ret
                                    764 ;------------------------------------------------------------
                                    765 ;Allocation info for local variables in function 'getchar'
                                    766 ;------------------------------------------------------------
                                    767 ;	vt100.c:21: int getchar(void) {
                                    768 ;	-----------------------------------------
                                    769 ;	 function getchar
                                    770 ;	-----------------------------------------
      000166                        771 _getchar:
                                    772 ;	vt100.c:22: while (!RI)
      000166                        773 00101$:
                                    774 ;	vt100.c:24: RI=0;
                                    775 ;	assignBit
      000166 10 98 02         [24]  776 	jbc	_RI,00114$
      000169 80 FB            [24]  777 	sjmp	00101$
      00016B                        778 00114$:
                                    779 ;	vt100.c:26: return SBUF;
      00016B AE 99            [24]  780 	mov	r6,_SBUF
      00016D 7F 00            [12]  781 	mov	r7,#0x00
      00016F 8E 82            [24]  782 	mov	dpl,r6
      000171 8F 83            [24]  783 	mov	dph,r7
                                    784 ;	vt100.c:28: }
      000173 22               [24]  785 	ret
                                    786 ;------------------------------------------------------------
                                    787 ;Allocation info for local variables in function '_vt100_reset'
                                    788 ;------------------------------------------------------------
                                    789 ;	vt100.c:86: void _vt100_reset(void){
                                    790 ;	-----------------------------------------
                                    791 ;	 function _vt100_reset
                                    792 ;	-----------------------------------------
      000174                        793 __vt100_reset:
                                    794 ;	vt100.c:89: term.char_height = 1;
      000174 75*0C 01         [24]  795 	mov	(_term + 0x0008),#0x01
                                    796 ;	vt100.c:90: term.char_width = 1;
      000177 75*0B 01         [24]  797 	mov	(_term + 0x0007),#0x01
                                    798 ;	vt100.c:91: term.back_color = 0x00;
      00017A 75*0D 00         [24]  799 	mov	(_term + 0x0009),#0x00
                                    800 ;	vt100.c:92: term.front_color = 0xff;
      00017D 75*0E FF         [24]  801 	mov	(_term + 0x000a),#0xff
                                    802 ;	vt100.c:93: term.cursor_x = term.cursor_y = term.saved_cursor_x = term.saved_cursor_y = 0;
      000180 75*08 00         [24]  803 	mov	(_term + 0x0004),#0x00
      000183 75*07 00         [24]  804 	mov	(_term + 0x0003),#0x00
      000186 75*06 00         [24]  805 	mov	(_term + 0x0002),#0x00
      000189 75*05 00         [24]  806 	mov	(_term + 0x0001),#0x00
                                    807 ;	vt100.c:94: term.narg = 0;
      00018C 75*10 00         [24]  808 	mov	(_term + 0x000c),#0x00
                                    809 ;	vt100.c:95: term.state = _st_idle;
      00018F 75*1Ar23         [24]  810 	mov	((_term + 0x0016) + 0),#__st_idle
      000192 75*1Bs24         [24]  811 	mov	((_term + 0x0016) + 1),#(__st_idle >> 8)
                                    812 ;	vt100.c:96: term.ret_state = 0;
      000195 E4               [12]  813 	clr	a
      000196 F5*1E            [12]  814 	mov	((_term + 0x001a) + 0),a
      000198 F5*1F            [12]  815 	mov	((_term + 0x001a) + 1),a
                                    816 ;	vt100.c:97: term.scroll_value = 0; 
      00019A F5*0F            [12]  817 	mov	(_term + 0x000b),a
                                    818 ;	vt100.c:98: term.scroll_start_row = 0;
      00019C F5*09            [12]  819 	mov	(_term + 0x0005),a
                                    820 ;	vt100.c:99: term.scroll_end_row = VT100_HEIGHT; // outside of screen = whole screen scrollable
      00019E 75*0A 18         [24]  821 	mov	(_term + 0x0006),#0x18
                                    822 ;	vt100.c:100: term.flags.cursor_wrap = 0;
                                    823 ;	vt100.c:101: term.flags.origin_mode = 0; 
      0001A1 78r04            [12]  824 	mov	r0,#_term
      0001A3 E6               [12]  825 	mov	a,@r0
      0001A4 54 FA            [12]  826 	anl	a,#0xfe&0xfb
      0001A6 F6               [12]  827 	mov	@r0,a
                                    828 ;	vt100.c:102: vga_setFrontColor(term.front_color);
      0001A7 85*0E 82         [24]  829 	mov	dpl,(_term + 0x000a)
      0001AA 12r00r6B         [24]  830 	lcall	_vga_setFrontColor
                                    831 ;	vt100.c:103: vga_setBackColor(term.back_color);
      0001AD 85*0D 82         [24]  832 	mov	dpl,(_term + 0x0009)
      0001B0 12r00r5F         [24]  833 	lcall	_vga_setBackColor
                                    834 ;	vt100.c:104: vga_setScrollMargins(0, 0); 
      0001B3 E4               [12]  835 	clr	a
      0001B4 C0 E0            [24]  836 	push	acc
      0001B6 75 82 00         [24]  837 	mov	dpl,#0x00
      0001B9 12r01r31         [24]  838 	lcall	_vga_setScrollMargins
      0001BC 15 81            [12]  839 	dec	sp
                                    840 ;	vt100.c:105: vga_setScrollStart(0); 
      0001BE 75 82 00         [24]  841 	mov	dpl,#0x00
                                    842 ;	vt100.c:106: }
      0001C1 02r01r2D         [24]  843 	ljmp	_vga_setScrollStart
                                    844 ;------------------------------------------------------------
                                    845 ;Allocation info for local variables in function '_vt100_resetScroll'
                                    846 ;------------------------------------------------------------
                                    847 ;	vt100.c:108: void _vt100_resetScroll(void){
                                    848 ;	-----------------------------------------
                                    849 ;	 function _vt100_resetScroll
                                    850 ;	-----------------------------------------
      0001C4                        851 __vt100_resetScroll:
                                    852 ;	vt100.c:109: term.scroll_start_row = 0;
      0001C4 75*09 00         [24]  853 	mov	(_term + 0x0005),#0x00
                                    854 ;	vt100.c:110: term.scroll_end_row = VT100_HEIGHT;
      0001C7 75*0A 18         [24]  855 	mov	(_term + 0x0006),#0x18
                                    856 ;	vt100.c:111: term.scroll_value = 0; 
                                    857 ;	vt100.c:112: vga_setScrollMargins(0, 0);
      0001CA E4               [12]  858 	clr	a
      0001CB F5*0F            [12]  859 	mov	(_term + 0x000b),a
      0001CD C0 E0            [24]  860 	push	acc
      0001CF 75 82 00         [24]  861 	mov	dpl,#0x00
      0001D2 12r01r31         [24]  862 	lcall	_vga_setScrollMargins
      0001D5 15 81            [12]  863 	dec	sp
                                    864 ;	vt100.c:113: vga_setScrollStart(0); 
      0001D7 75 82 00         [24]  865 	mov	dpl,#0x00
                                    866 ;	vt100.c:114: }
      0001DA 02r01r2D         [24]  867 	ljmp	_vga_setScrollStart
                                    868 ;------------------------------------------------------------
                                    869 ;Allocation info for local variables in function 'VT100_CURSOR_Y'
                                    870 ;------------------------------------------------------------
                                    871 ;t                         Allocated to stack - _bp +1
                                    872 ;scroll_height             Allocated to stack - _bp +6
                                    873 ;row                       Allocated to registers r2 r4 
                                    874 ;sloc0                     Allocated to stack - _bp +4
                                    875 ;------------------------------------------------------------
                                    876 ;	vt100.c:118: uint16_t VT100_CURSOR_Y(struct vt100 *t){
                                    877 ;	-----------------------------------------
                                    878 ;	 function VT100_CURSOR_Y
                                    879 ;	-----------------------------------------
      0001DD                        880 _VT100_CURSOR_Y:
      0001DD C0*00            [24]  881 	push	_bp
      0001DF 85 81*00         [24]  882 	mov	_bp,sp
      0001E2 C0 82            [24]  883 	push	dpl
      0001E4 C0 83            [24]  884 	push	dph
      0001E6 C0 F0            [24]  885 	push	b
      0001E8 E5 81            [12]  886 	mov	a,sp
      0001EA 24 04            [12]  887 	add	a,#0x04
      0001EC F5 81            [12]  888 	mov	sp,a
                                    889 ;	vt100.c:120: if(t->cursor_y < t->scroll_start_row || t->cursor_y >= t->scroll_end_row){
      0001EE A8*00            [24]  890 	mov	r0,_bp
      0001F0 08               [12]  891 	inc	r0
      0001F1 74 02            [12]  892 	mov	a,#0x02
      0001F3 26               [12]  893 	add	a,@r0
      0001F4 FA               [12]  894 	mov	r2,a
      0001F5 E4               [12]  895 	clr	a
      0001F6 08               [12]  896 	inc	r0
      0001F7 36               [12]  897 	addc	a,@r0
      0001F8 FB               [12]  898 	mov	r3,a
      0001F9 08               [12]  899 	inc	r0
      0001FA 86 04            [24]  900 	mov	ar4,@r0
      0001FC 8A 82            [24]  901 	mov	dpl,r2
      0001FE 8B 83            [24]  902 	mov	dph,r3
      000200 8C F0            [24]  903 	mov	b,r4
      000202 12r00r00         [24]  904 	lcall	__gptrget
      000205 FC               [12]  905 	mov	r4,a
      000206 A8*00            [24]  906 	mov	r0,_bp
      000208 08               [12]  907 	inc	r0
      000209 74 05            [12]  908 	mov	a,#0x05
      00020B 26               [12]  909 	add	a,@r0
      00020C FA               [12]  910 	mov	r2,a
      00020D E4               [12]  911 	clr	a
      00020E 08               [12]  912 	inc	r0
      00020F 36               [12]  913 	addc	a,@r0
      000210 FB               [12]  914 	mov	r3,a
      000211 08               [12]  915 	inc	r0
      000212 86 07            [24]  916 	mov	ar7,@r0
      000214 8A 82            [24]  917 	mov	dpl,r2
      000216 8B 83            [24]  918 	mov	dph,r3
      000218 8F F0            [24]  919 	mov	b,r7
      00021A 12r00r00         [24]  920 	lcall	__gptrget
      00021D FF               [12]  921 	mov	r7,a
      00021E C3               [12]  922 	clr	c
      00021F EC               [12]  923 	mov	a,r4
      000220 64 80            [12]  924 	xrl	a,#0x80
      000222 8F F0            [24]  925 	mov	b,r7
      000224 63 F0 80         [24]  926 	xrl	b,#0x80
      000227 95 F0            [12]  927 	subb	a,b
      000229 40 25            [24]  928 	jc	00103$
      00022B A8*00            [24]  929 	mov	r0,_bp
      00022D 08               [12]  930 	inc	r0
      00022E 74 06            [12]  931 	mov	a,#0x06
      000230 26               [12]  932 	add	a,@r0
      000231 FB               [12]  933 	mov	r3,a
      000232 E4               [12]  934 	clr	a
      000233 08               [12]  935 	inc	r0
      000234 36               [12]  936 	addc	a,@r0
      000235 FD               [12]  937 	mov	r5,a
      000236 08               [12]  938 	inc	r0
      000237 86 06            [24]  939 	mov	ar6,@r0
      000239 8B 82            [24]  940 	mov	dpl,r3
      00023B 8D 83            [24]  941 	mov	dph,r5
      00023D 8E F0            [24]  942 	mov	b,r6
      00023F 12r00r00         [24]  943 	lcall	__gptrget
      000242 FE               [12]  944 	mov	r6,a
      000243 C3               [12]  945 	clr	c
      000244 EC               [12]  946 	mov	a,r4
      000245 64 80            [12]  947 	xrl	a,#0x80
      000247 8E F0            [24]  948 	mov	b,r6
      000249 63 F0 80         [24]  949 	xrl	b,#0x80
      00024C 95 F0            [12]  950 	subb	a,b
      00024E 40 0C            [24]  951 	jc	00104$
      000250                        952 00103$:
                                    953 ;	vt100.c:121: return t->cursor_y * VT100_CHAR_HEIGHT; 
      000250 EC               [12]  954 	mov	a,r4
      000251 FB               [12]  955 	mov	r3,a
      000252 33               [12]  956 	rlc	a
      000253 95 E0            [12]  957 	subb	a,acc
      000255 FD               [12]  958 	mov	r5,a
      000256 8B 82            [24]  959 	mov	dpl,r3
      000258 8D 83            [24]  960 	mov	dph,r5
      00025A 80 74            [24]  961 	sjmp	00107$
      00025C                        962 00104$:
                                    963 ;	vt100.c:124: uint16_t scroll_height = t->scroll_end_row - t->scroll_start_row;
      00025C EE               [12]  964 	mov	a,r6
      00025D 33               [12]  965 	rlc	a
      00025E 95 E0            [12]  966 	subb	a,acc
      000260 FD               [12]  967 	mov	r5,a
      000261 EF               [12]  968 	mov	a,r7
      000262 33               [12]  969 	rlc	a
      000263 95 E0            [12]  970 	subb	a,acc
      000265 FB               [12]  971 	mov	r3,a
      000266 EE               [12]  972 	mov	a,r6
      000267 C3               [12]  973 	clr	c
      000268 9F               [12]  974 	subb	a,r7
      000269 FF               [12]  975 	mov	r7,a
      00026A ED               [12]  976 	mov	a,r5
      00026B 9B               [12]  977 	subb	a,r3
      00026C FB               [12]  978 	mov	r3,a
      00026D E5*00            [12]  979 	mov	a,_bp
      00026F 24 06            [12]  980 	add	a,#0x06
      000271 F8               [12]  981 	mov	r0,a
      000272 A6 07            [24]  982 	mov	@r0,ar7
      000274 08               [12]  983 	inc	r0
      000275 A6 03            [24]  984 	mov	@r0,ar3
                                    985 ;	vt100.c:125: uint16_t row = t->cursor_y + t->scroll_value; 
      000277 E5*00            [12]  986 	mov	a,_bp
      000279 24 04            [12]  987 	add	a,#0x04
      00027B F8               [12]  988 	mov	r0,a
      00027C A6 04            [24]  989 	mov	@r0,ar4
      00027E EC               [12]  990 	mov	a,r4
      00027F 33               [12]  991 	rlc	a
      000280 95 E0            [12]  992 	subb	a,acc
      000282 08               [12]  993 	inc	r0
      000283 F6               [12]  994 	mov	@r0,a
      000284 A8*00            [24]  995 	mov	r0,_bp
      000286 08               [12]  996 	inc	r0
      000287 74 0B            [12]  997 	mov	a,#0x0b
      000289 26               [12]  998 	add	a,@r0
      00028A FB               [12]  999 	mov	r3,a
      00028B E4               [12] 1000 	clr	a
      00028C 08               [12] 1001 	inc	r0
      00028D 36               [12] 1002 	addc	a,@r0
      00028E FC               [12] 1003 	mov	r4,a
      00028F 08               [12] 1004 	inc	r0
      000290 86 07            [24] 1005 	mov	ar7,@r0
      000292 8B 82            [24] 1006 	mov	dpl,r3
      000294 8C 83            [24] 1007 	mov	dph,r4
      000296 8F F0            [24] 1008 	mov	b,r7
      000298 12r00r00         [24] 1009 	lcall	__gptrget
      00029B FB               [12] 1010 	mov	r3,a
      00029C 33               [12] 1011 	rlc	a
      00029D 95 E0            [12] 1012 	subb	a,acc
      00029F FF               [12] 1013 	mov	r7,a
      0002A0 E5*00            [12] 1014 	mov	a,_bp
      0002A2 24 04            [12] 1015 	add	a,#0x04
      0002A4 F8               [12] 1016 	mov	r0,a
      0002A5 EB               [12] 1017 	mov	a,r3
      0002A6 26               [12] 1018 	add	a,@r0
      0002A7 FB               [12] 1019 	mov	r3,a
      0002A8 EF               [12] 1020 	mov	a,r7
      0002A9 08               [12] 1021 	inc	r0
      0002AA 36               [12] 1022 	addc	a,@r0
      0002AB FF               [12] 1023 	mov	r7,a
      0002AC 8B 02            [24] 1024 	mov	ar2,r3
      0002AE 8F 04            [24] 1025 	mov	ar4,r7
                                   1026 ;	vt100.c:126: if(t->cursor_y + t->scroll_value >= t->scroll_end_row)
      0002B0 C3               [12] 1027 	clr	c
      0002B1 EB               [12] 1028 	mov	a,r3
      0002B2 9E               [12] 1029 	subb	a,r6
      0002B3 EF               [12] 1030 	mov	a,r7
      0002B4 64 80            [12] 1031 	xrl	a,#0x80
      0002B6 8D F0            [24] 1032 	mov	b,r5
      0002B8 63 F0 80         [24] 1033 	xrl	b,#0x80
      0002BB 95 F0            [12] 1034 	subb	a,b
      0002BD 40 0D            [24] 1035 	jc	00102$
                                   1036 ;	vt100.c:127: row -= scroll_height; 
      0002BF E5*00            [12] 1037 	mov	a,_bp
      0002C1 24 06            [12] 1038 	add	a,#0x06
      0002C3 F8               [12] 1039 	mov	r0,a
      0002C4 EA               [12] 1040 	mov	a,r2
      0002C5 C3               [12] 1041 	clr	c
      0002C6 96               [12] 1042 	subb	a,@r0
      0002C7 FA               [12] 1043 	mov	r2,a
      0002C8 EC               [12] 1044 	mov	a,r4
      0002C9 08               [12] 1045 	inc	r0
      0002CA 96               [12] 1046 	subb	a,@r0
      0002CB FC               [12] 1047 	mov	r4,a
      0002CC                       1048 00102$:
                                   1049 ;	vt100.c:136: return row * VT100_CHAR_HEIGHT; 
      0002CC 8A 82            [24] 1050 	mov	dpl,r2
      0002CE 8C 83            [24] 1051 	mov	dph,r4
      0002D0                       1052 00107$:
                                   1053 ;	vt100.c:155: }
      0002D0 85*00 81         [24] 1054 	mov	sp,_bp
      0002D3 D0*00            [24] 1055 	pop	_bp
      0002D5 22               [24] 1056 	ret
                                   1057 ;------------------------------------------------------------
                                   1058 ;Allocation info for local variables in function '_vt100_clearLines'
                                   1059 ;------------------------------------------------------------
                                   1060 ;start_line                Allocated to stack - _bp -4
                                   1061 ;end_line                  Allocated to stack - _bp -6
                                   1062 ;t                         Allocated to stack - _bp +1
                                   1063 ;c                         Allocated to registers 
                                   1064 ;cy                        Allocated to registers 
                                   1065 ;sloc0                     Allocated to stack - _bp +4
                                   1066 ;------------------------------------------------------------
                                   1067 ;	vt100.c:157: void _vt100_clearLines(struct vt100 *t, uint16_t start_line, uint16_t end_line){
                                   1068 ;	-----------------------------------------
                                   1069 ;	 function _vt100_clearLines
                                   1070 ;	-----------------------------------------
      0002D6                       1071 __vt100_clearLines:
      0002D6 C0*00            [24] 1072 	push	_bp
      0002D8 85 81*00         [24] 1073 	mov	_bp,sp
      0002DB C0 82            [24] 1074 	push	dpl
      0002DD C0 83            [24] 1075 	push	dph
      0002DF C0 F0            [24] 1076 	push	b
      0002E1 05 81            [12] 1077 	inc	sp
                                   1078 ;	vt100.c:158: for(int c = start_line; c <= end_line; c++){
      0002E3 E5*00            [12] 1079 	mov	a,_bp
      0002E5 24 FC            [12] 1080 	add	a,#0xfc
      0002E7 F8               [12] 1081 	mov	r0,a
      0002E8 86 03            [24] 1082 	mov	ar3,@r0
      0002EA 08               [12] 1083 	inc	r0
      0002EB 86 04            [24] 1084 	mov	ar4,@r0
      0002ED                       1085 00103$:
      0002ED 8B 02            [24] 1086 	mov	ar2,r3
      0002EF 8C 07            [24] 1087 	mov	ar7,r4
      0002F1 E5*00            [12] 1088 	mov	a,_bp
      0002F3 24 FA            [12] 1089 	add	a,#0xfa
      0002F5 F8               [12] 1090 	mov	r0,a
      0002F6 C3               [12] 1091 	clr	c
      0002F7 E6               [12] 1092 	mov	a,@r0
      0002F8 9A               [12] 1093 	subb	a,r2
      0002F9 08               [12] 1094 	inc	r0
      0002FA E6               [12] 1095 	mov	a,@r0
      0002FB 9F               [12] 1096 	subb	a,r7
      0002FC 50 03            [24] 1097 	jnc	00116$
      0002FE 02r03r7F         [24] 1098 	ljmp	00105$
      000301                       1099 00116$:
                                   1100 ;	vt100.c:159: uint16_t cy = t->cursor_y;
      000301 A8*00            [24] 1101 	mov	r0,_bp
      000303 08               [12] 1102 	inc	r0
      000304 74 02            [12] 1103 	mov	a,#0x02
      000306 26               [12] 1104 	add	a,@r0
      000307 FA               [12] 1105 	mov	r2,a
      000308 E4               [12] 1106 	clr	a
      000309 08               [12] 1107 	inc	r0
      00030A 36               [12] 1108 	addc	a,@r0
      00030B FE               [12] 1109 	mov	r6,a
      00030C 08               [12] 1110 	inc	r0
      00030D 86 07            [24] 1111 	mov	ar7,@r0
      00030F 8A 82            [24] 1112 	mov	dpl,r2
      000311 8E 83            [24] 1113 	mov	dph,r6
      000313 8F F0            [24] 1114 	mov	b,r7
      000315 E5*00            [12] 1115 	mov	a,_bp
      000317 24 04            [12] 1116 	add	a,#0x04
      000319 F8               [12] 1117 	mov	r0,a
      00031A 12r00r00         [24] 1118 	lcall	__gptrget
      00031D F6               [12] 1119 	mov	@r0,a
                                   1120 ;	vt100.c:160: t->cursor_y = c; 
      00031E 8B 05            [24] 1121 	mov	ar5,r3
      000320 8A 82            [24] 1122 	mov	dpl,r2
      000322 8E 83            [24] 1123 	mov	dph,r6
      000324 8F F0            [24] 1124 	mov	b,r7
      000326 ED               [12] 1125 	mov	a,r5
      000327 12r00r00         [24] 1126 	lcall	__gptrput
                                   1127 ;	vt100.c:161: vga_fillRect(0, VT100_CURSOR_Y(t), VT100_SCREEN_WIDTH, VT100_CHAR_HEIGHT, 0x0000);
      00032A A8*00            [24] 1128 	mov	r0,_bp
      00032C 08               [12] 1129 	inc	r0
      00032D 86 82            [24] 1130 	mov	dpl,@r0
      00032F 08               [12] 1131 	inc	r0
      000330 86 83            [24] 1132 	mov	dph,@r0
      000332 08               [12] 1133 	inc	r0
      000333 86 F0            [24] 1134 	mov	b,@r0
      000335 C0 04            [24] 1135 	push	ar4
      000337 C0 03            [24] 1136 	push	ar3
      000339 12r01rDD         [24] 1137 	lcall	_VT100_CURSOR_Y
      00033C AE 82            [24] 1138 	mov	r6,dpl
      00033E E4               [12] 1139 	clr	a
      00033F C0 E0            [24] 1140 	push	acc
      000341 04               [12] 1141 	inc	a
      000342 C0 E0            [24] 1142 	push	acc
      000344 74 50            [12] 1143 	mov	a,#0x50
      000346 C0 E0            [24] 1144 	push	acc
      000348 C0 06            [24] 1145 	push	ar6
      00034A 75 82 00         [24] 1146 	mov	dpl,#0x00
      00034D 12r00r77         [24] 1147 	lcall	_vga_fillRect
      000350 E5 81            [12] 1148 	mov	a,sp
      000352 24 FC            [12] 1149 	add	a,#0xfc
      000354 F5 81            [12] 1150 	mov	sp,a
      000356 D0 03            [24] 1151 	pop	ar3
      000358 D0 04            [24] 1152 	pop	ar4
                                   1153 ;	vt100.c:162: t->cursor_y = cy;
      00035A A8*00            [24] 1154 	mov	r0,_bp
      00035C 08               [12] 1155 	inc	r0
      00035D 74 02            [12] 1156 	mov	a,#0x02
      00035F 26               [12] 1157 	add	a,@r0
      000360 FD               [12] 1158 	mov	r5,a
      000361 E4               [12] 1159 	clr	a
      000362 08               [12] 1160 	inc	r0
      000363 36               [12] 1161 	addc	a,@r0
      000364 FE               [12] 1162 	mov	r6,a
      000365 08               [12] 1163 	inc	r0
      000366 86 07            [24] 1164 	mov	ar7,@r0
      000368 8D 82            [24] 1165 	mov	dpl,r5
      00036A 8E 83            [24] 1166 	mov	dph,r6
      00036C 8F F0            [24] 1167 	mov	b,r7
      00036E E5*00            [12] 1168 	mov	a,_bp
      000370 24 04            [12] 1169 	add	a,#0x04
      000372 F8               [12] 1170 	mov	r0,a
      000373 E6               [12] 1171 	mov	a,@r0
      000374 12r00r00         [24] 1172 	lcall	__gptrput
                                   1173 ;	vt100.c:158: for(int c = start_line; c <= end_line; c++){
      000377 0B               [12] 1174 	inc	r3
      000378 BB 00 01         [24] 1175 	cjne	r3,#0x00,00117$
      00037B 0C               [12] 1176 	inc	r4
      00037C                       1177 00117$:
      00037C 02r02rED         [24] 1178 	ljmp	00103$
      00037F                       1179 00105$:
                                   1180 ;	vt100.c:167: }
      00037F 85*00 81         [24] 1181 	mov	sp,_bp
      000382 D0*00            [24] 1182 	pop	_bp
      000384 22               [24] 1183 	ret
                                   1184 ;------------------------------------------------------------
                                   1185 ;Allocation info for local variables in function '_vt100_scroll'
                                   1186 ;------------------------------------------------------------
                                   1187 ;lines                     Allocated to stack - _bp -4
                                   1188 ;t                         Allocated to stack - _bp +1
                                   1189 ;scroll_height             Allocated to stack - _bp +7
                                   1190 ;scroll_start              Allocated to registers r5 r7 
                                   1191 ;sloc0                     Allocated to stack - _bp +8
                                   1192 ;sloc1                     Allocated to stack - _bp +4
                                   1193 ;------------------------------------------------------------
                                   1194 ;	vt100.c:170: void _vt100_scroll(struct vt100 *t, int16_t lines){
                                   1195 ;	-----------------------------------------
                                   1196 ;	 function _vt100_scroll
                                   1197 ;	-----------------------------------------
      000385                       1198 __vt100_scroll:
      000385 C0*00            [24] 1199 	push	_bp
      000387 85 81*00         [24] 1200 	mov	_bp,sp
      00038A C0 82            [24] 1201 	push	dpl
      00038C C0 83            [24] 1202 	push	dph
      00038E C0 F0            [24] 1203 	push	b
      000390 E5 81            [12] 1204 	mov	a,sp
      000392 24 05            [12] 1205 	add	a,#0x05
      000394 F5 81            [12] 1206 	mov	sp,a
                                   1207 ;	vt100.c:172: if(!lines) return;
      000396 E5*00            [12] 1208 	mov	a,_bp
      000398 24 FC            [12] 1209 	add	a,#0xfc
      00039A F8               [12] 1210 	mov	r0,a
      00039B E6               [12] 1211 	mov	a,@r0
      00039C 08               [12] 1212 	inc	r0
      00039D 46               [12] 1213 	orl	a,@r0
      00039E 70 03            [24] 1214 	jnz	00102$
      0003A0 02r05r88         [24] 1215 	ljmp	00108$
      0003A3                       1216 00102$:
                                   1217 ;	vt100.c:175: uint16_t scroll_height = t->scroll_end_row - t->scroll_start_row;
      0003A3 A8*00            [24] 1218 	mov	r0,_bp
      0003A5 08               [12] 1219 	inc	r0
      0003A6 74 06            [12] 1220 	mov	a,#0x06
      0003A8 26               [12] 1221 	add	a,@r0
      0003A9 FA               [12] 1222 	mov	r2,a
      0003AA E4               [12] 1223 	clr	a
      0003AB 08               [12] 1224 	inc	r0
      0003AC 36               [12] 1225 	addc	a,@r0
      0003AD FB               [12] 1226 	mov	r3,a
      0003AE 08               [12] 1227 	inc	r0
      0003AF 86 04            [24] 1228 	mov	ar4,@r0
      0003B1 8A 82            [24] 1229 	mov	dpl,r2
      0003B3 8B 83            [24] 1230 	mov	dph,r3
      0003B5 8C F0            [24] 1231 	mov	b,r4
      0003B7 12r00r00         [24] 1232 	lcall	__gptrget
      0003BA FA               [12] 1233 	mov	r2,a
      0003BB 33               [12] 1234 	rlc	a
      0003BC 95 E0            [12] 1235 	subb	a,acc
      0003BE FC               [12] 1236 	mov	r4,a
      0003BF A8*00            [24] 1237 	mov	r0,_bp
      0003C1 08               [12] 1238 	inc	r0
      0003C2 74 05            [12] 1239 	mov	a,#0x05
      0003C4 26               [12] 1240 	add	a,@r0
      0003C5 FB               [12] 1241 	mov	r3,a
      0003C6 E4               [12] 1242 	clr	a
      0003C7 08               [12] 1243 	inc	r0
      0003C8 36               [12] 1244 	addc	a,@r0
      0003C9 FE               [12] 1245 	mov	r6,a
      0003CA 08               [12] 1246 	inc	r0
      0003CB 86 07            [24] 1247 	mov	ar7,@r0
      0003CD 8B 82            [24] 1248 	mov	dpl,r3
      0003CF 8E 83            [24] 1249 	mov	dph,r6
      0003D1 8F F0            [24] 1250 	mov	b,r7
      0003D3 12r00r00         [24] 1251 	lcall	__gptrget
      0003D6 FF               [12] 1252 	mov	r7,a
      0003D7 FD               [12] 1253 	mov	r5,a
      0003D8 33               [12] 1254 	rlc	a
      0003D9 95 E0            [12] 1255 	subb	a,acc
      0003DB FE               [12] 1256 	mov	r6,a
      0003DC E5*00            [12] 1257 	mov	a,_bp
      0003DE 24 07            [12] 1258 	add	a,#0x07
      0003E0 F8               [12] 1259 	mov	r0,a
      0003E1 EA               [12] 1260 	mov	a,r2
      0003E2 C3               [12] 1261 	clr	c
      0003E3 9D               [12] 1262 	subb	a,r5
      0003E4 F6               [12] 1263 	mov	@r0,a
      0003E5 EC               [12] 1264 	mov	a,r4
      0003E6 9E               [12] 1265 	subb	a,r6
      0003E7 08               [12] 1266 	inc	r0
      0003E8 F6               [12] 1267 	mov	@r0,a
      0003E9 E5*00            [12] 1268 	mov	a,_bp
      0003EB 24 07            [12] 1269 	add	a,#0x07
                                   1270 ;	vt100.c:181: if(lines > 0){
      0003ED E5*00            [12] 1271 	mov	a,_bp
      0003EF 24 FC            [12] 1272 	add	a,#0xfc
      0003F1 F8               [12] 1273 	mov	r0,a
      0003F2 C3               [12] 1274 	clr	c
      0003F3 E4               [12] 1275 	clr	a
      0003F4 96               [12] 1276 	subb	a,@r0
      0003F5 74 80            [12] 1277 	mov	a,#(0x00 ^ 0x80)
      0003F7 08               [12] 1278 	inc	r0
      0003F8 86 F0            [24] 1279 	mov	b,@r0
      0003FA 63 F0 80         [24] 1280 	xrl	b,#0x80
      0003FD 95 F0            [12] 1281 	subb	a,b
      0003FF 40 03            [24] 1282 	jc	00123$
      000401 02r04r93         [24] 1283 	ljmp	00106$
      000404                       1284 00123$:
                                   1285 ;	vt100.c:182: _vt100_clearLines(t, t->scroll_start_row, t->scroll_start_row+lines-1); 
      000404 E5*00            [12] 1286 	mov	a,_bp
      000406 24 FC            [12] 1287 	add	a,#0xfc
      000408 F8               [12] 1288 	mov	r0,a
      000409 E6               [12] 1289 	mov	a,@r0
      00040A 2D               [12] 1290 	add	a,r5
      00040B FD               [12] 1291 	mov	r5,a
      00040C 08               [12] 1292 	inc	r0
      00040D E6               [12] 1293 	mov	a,@r0
      00040E 3E               [12] 1294 	addc	a,r6
      00040F FE               [12] 1295 	mov	r6,a
      000410 1D               [12] 1296 	dec	r5
      000411 BD FF 01         [24] 1297 	cjne	r5,#0xff,00124$
      000414 1E               [12] 1298 	dec	r6
      000415                       1299 00124$:
      000415 EF               [12] 1300 	mov	a,r7
      000416 FB               [12] 1301 	mov	r3,a
      000417 33               [12] 1302 	rlc	a
      000418 95 E0            [12] 1303 	subb	a,acc
      00041A FF               [12] 1304 	mov	r7,a
      00041B C0 05            [24] 1305 	push	ar5
      00041D C0 06            [24] 1306 	push	ar6
      00041F C0 03            [24] 1307 	push	ar3
      000421 C0 07            [24] 1308 	push	ar7
      000423 A8*00            [24] 1309 	mov	r0,_bp
      000425 08               [12] 1310 	inc	r0
      000426 86 82            [24] 1311 	mov	dpl,@r0
      000428 08               [12] 1312 	inc	r0
      000429 86 83            [24] 1313 	mov	dph,@r0
      00042B 08               [12] 1314 	inc	r0
      00042C 86 F0            [24] 1315 	mov	b,@r0
      00042E 12r02rD6         [24] 1316 	lcall	__vt100_clearLines
      000431 E5 81            [12] 1317 	mov	a,sp
      000433 24 FC            [12] 1318 	add	a,#0xfc
      000435 F5 81            [12] 1319 	mov	sp,a
                                   1320 ;	vt100.c:184: t->scroll_value = (t->scroll_value + lines) % scroll_height;
      000437 A8*00            [24] 1321 	mov	r0,_bp
      000439 08               [12] 1322 	inc	r0
      00043A 74 0B            [12] 1323 	mov	a,#0x0b
      00043C 26               [12] 1324 	add	a,@r0
      00043D FD               [12] 1325 	mov	r5,a
      00043E E4               [12] 1326 	clr	a
      00043F 08               [12] 1327 	inc	r0
      000440 36               [12] 1328 	addc	a,@r0
      000441 FC               [12] 1329 	mov	r4,a
      000442 08               [12] 1330 	inc	r0
      000443 86 02            [24] 1331 	mov	ar2,@r0
      000445 8D 82            [24] 1332 	mov	dpl,r5
      000447 8C 83            [24] 1333 	mov	dph,r4
      000449 8A F0            [24] 1334 	mov	b,r2
      00044B 12r00r00         [24] 1335 	lcall	__gptrget
      00044E FB               [12] 1336 	mov	r3,a
      00044F 33               [12] 1337 	rlc	a
      000450 95 E0            [12] 1338 	subb	a,acc
      000452 FF               [12] 1339 	mov	r7,a
      000453 E5*00            [12] 1340 	mov	a,_bp
      000455 24 FC            [12] 1341 	add	a,#0xfc
      000457 F8               [12] 1342 	mov	r0,a
      000458 E6               [12] 1343 	mov	a,@r0
      000459 2B               [12] 1344 	add	a,r3
      00045A FB               [12] 1345 	mov	r3,a
      00045B 08               [12] 1346 	inc	r0
      00045C E6               [12] 1347 	mov	a,@r0
      00045D 3F               [12] 1348 	addc	a,r7
      00045E FF               [12] 1349 	mov	r7,a
      00045F C0 05            [24] 1350 	push	ar5
      000461 C0 04            [24] 1351 	push	ar4
      000463 C0 02            [24] 1352 	push	ar2
      000465 E5*00            [12] 1353 	mov	a,_bp
      000467 24 07            [12] 1354 	add	a,#0x07
      000469 F8               [12] 1355 	mov	r0,a
      00046A E6               [12] 1356 	mov	a,@r0
      00046B C0 E0            [24] 1357 	push	acc
      00046D 08               [12] 1358 	inc	r0
      00046E E6               [12] 1359 	mov	a,@r0
      00046F C0 E0            [24] 1360 	push	acc
      000471 8B 82            [24] 1361 	mov	dpl,r3
      000473 8F 83            [24] 1362 	mov	dph,r7
      000475 12r00r00         [24] 1363 	lcall	__moduint
      000478 AE 82            [24] 1364 	mov	r6,dpl
      00047A AF 83            [24] 1365 	mov	r7,dph
      00047C 15 81            [12] 1366 	dec	sp
      00047E 15 81            [12] 1367 	dec	sp
      000480 D0 02            [24] 1368 	pop	ar2
      000482 D0 04            [24] 1369 	pop	ar4
      000484 D0 05            [24] 1370 	pop	ar5
      000486 8D 82            [24] 1371 	mov	dpl,r5
      000488 8C 83            [24] 1372 	mov	dph,r4
      00048A 8A F0            [24] 1373 	mov	b,r2
      00048C EE               [12] 1374 	mov	a,r6
      00048D 12r00r00         [24] 1375 	lcall	__gptrput
      000490 02r05r46         [24] 1376 	ljmp	00107$
      000493                       1377 00106$:
                                   1378 ;	vt100.c:188: } else if(lines < 0){
      000493 E5*00            [12] 1379 	mov	a,_bp
      000495 24 FC            [12] 1380 	add	a,#0xfc
      000497 F8               [12] 1381 	mov	r0,a
      000498 08               [12] 1382 	inc	r0
      000499 E6               [12] 1383 	mov	a,@r0
      00049A 20 E7 03         [24] 1384 	jb	acc.7,00125$
      00049D 02r05r46         [24] 1385 	ljmp	00107$
      0004A0                       1386 00125$:
                                   1387 ;	vt100.c:189: _vt100_clearLines(t, t->scroll_end_row - lines, t->scroll_end_row - 1); 
      0004A0 EA               [12] 1388 	mov	a,r2
      0004A1 24 FF            [12] 1389 	add	a,#0xff
      0004A3 FE               [12] 1390 	mov	r6,a
      0004A4 EC               [12] 1391 	mov	a,r4
      0004A5 34 FF            [12] 1392 	addc	a,#0xff
      0004A7 FF               [12] 1393 	mov	r7,a
      0004A8 E5*00            [12] 1394 	mov	a,_bp
      0004AA 24 FC            [12] 1395 	add	a,#0xfc
      0004AC F8               [12] 1396 	mov	r0,a
      0004AD EA               [12] 1397 	mov	a,r2
      0004AE C3               [12] 1398 	clr	c
      0004AF 96               [12] 1399 	subb	a,@r0
      0004B0 FA               [12] 1400 	mov	r2,a
      0004B1 EC               [12] 1401 	mov	a,r4
      0004B2 08               [12] 1402 	inc	r0
      0004B3 96               [12] 1403 	subb	a,@r0
      0004B4 FC               [12] 1404 	mov	r4,a
      0004B5 C0 06            [24] 1405 	push	ar6
      0004B7 C0 07            [24] 1406 	push	ar7
      0004B9 C0 02            [24] 1407 	push	ar2
      0004BB C0 04            [24] 1408 	push	ar4
      0004BD A8*00            [24] 1409 	mov	r0,_bp
      0004BF 08               [12] 1410 	inc	r0
      0004C0 86 82            [24] 1411 	mov	dpl,@r0
      0004C2 08               [12] 1412 	inc	r0
      0004C3 86 83            [24] 1413 	mov	dph,@r0
      0004C5 08               [12] 1414 	inc	r0
      0004C6 86 F0            [24] 1415 	mov	b,@r0
      0004C8 12r02rD6         [24] 1416 	lcall	__vt100_clearLines
      0004CB E5 81            [12] 1417 	mov	a,sp
      0004CD 24 FC            [12] 1418 	add	a,#0xfc
      0004CF F5 81            [12] 1419 	mov	sp,a
                                   1420 ;	vt100.c:191: t->scroll_value = (scroll_height + t->scroll_value + lines) % scroll_height; 
      0004D1 A8*00            [24] 1421 	mov	r0,_bp
      0004D3 08               [12] 1422 	inc	r0
      0004D4 74 0B            [12] 1423 	mov	a,#0x0b
      0004D6 26               [12] 1424 	add	a,@r0
      0004D7 FD               [12] 1425 	mov	r5,a
      0004D8 E4               [12] 1426 	clr	a
      0004D9 08               [12] 1427 	inc	r0
      0004DA 36               [12] 1428 	addc	a,@r0
      0004DB FE               [12] 1429 	mov	r6,a
      0004DC 08               [12] 1430 	inc	r0
      0004DD 86 07            [24] 1431 	mov	ar7,@r0
      0004DF 8D 82            [24] 1432 	mov	dpl,r5
      0004E1 8E 83            [24] 1433 	mov	dph,r6
      0004E3 8F F0            [24] 1434 	mov	b,r7
      0004E5 12r00r00         [24] 1435 	lcall	__gptrget
      0004E8 FC               [12] 1436 	mov	r4,a
      0004E9 33               [12] 1437 	rlc	a
      0004EA 95 E0            [12] 1438 	subb	a,acc
      0004EC FB               [12] 1439 	mov	r3,a
      0004ED E5*00            [12] 1440 	mov	a,_bp
      0004EF 24 07            [12] 1441 	add	a,#0x07
      0004F1 F8               [12] 1442 	mov	r0,a
      0004F2 E5*00            [12] 1443 	mov	a,_bp
      0004F4 24 04            [12] 1444 	add	a,#0x04
      0004F6 F9               [12] 1445 	mov	r1,a
      0004F7 EC               [12] 1446 	mov	a,r4
      0004F8 26               [12] 1447 	add	a,@r0
      0004F9 F7               [12] 1448 	mov	@r1,a
      0004FA EB               [12] 1449 	mov	a,r3
      0004FB 08               [12] 1450 	inc	r0
      0004FC 36               [12] 1451 	addc	a,@r0
      0004FD 09               [12] 1452 	inc	r1
      0004FE F7               [12] 1453 	mov	@r1,a
      0004FF E5*00            [12] 1454 	mov	a,_bp
      000501 24 FC            [12] 1455 	add	a,#0xfc
      000503 F8               [12] 1456 	mov	r0,a
      000504 86 02            [24] 1457 	mov	ar2,@r0
      000506 08               [12] 1458 	inc	r0
      000507 86 04            [24] 1459 	mov	ar4,@r0
      000509 E5*00            [12] 1460 	mov	a,_bp
      00050B 24 04            [12] 1461 	add	a,#0x04
      00050D F8               [12] 1462 	mov	r0,a
      00050E EA               [12] 1463 	mov	a,r2
      00050F 26               [12] 1464 	add	a,@r0
      000510 FA               [12] 1465 	mov	r2,a
      000511 EC               [12] 1466 	mov	a,r4
      000512 08               [12] 1467 	inc	r0
      000513 36               [12] 1468 	addc	a,@r0
      000514 FC               [12] 1469 	mov	r4,a
      000515 C0 07            [24] 1470 	push	ar7
      000517 C0 06            [24] 1471 	push	ar6
      000519 C0 05            [24] 1472 	push	ar5
      00051B E5*00            [12] 1473 	mov	a,_bp
      00051D 24 07            [12] 1474 	add	a,#0x07
      00051F F8               [12] 1475 	mov	r0,a
      000520 E6               [12] 1476 	mov	a,@r0
      000521 C0 E0            [24] 1477 	push	acc
      000523 08               [12] 1478 	inc	r0
      000524 E6               [12] 1479 	mov	a,@r0
      000525 C0 E0            [24] 1480 	push	acc
      000527 8A 82            [24] 1481 	mov	dpl,r2
      000529 8C 83            [24] 1482 	mov	dph,r4
      00052B 12r00r00         [24] 1483 	lcall	__moduint
      00052E AB 82            [24] 1484 	mov	r3,dpl
      000530 AC 83            [24] 1485 	mov	r4,dph
      000532 15 81            [12] 1486 	dec	sp
      000534 15 81            [12] 1487 	dec	sp
      000536 D0 05            [24] 1488 	pop	ar5
      000538 D0 06            [24] 1489 	pop	ar6
      00053A D0 07            [24] 1490 	pop	ar7
      00053C 8D 82            [24] 1491 	mov	dpl,r5
      00053E 8E 83            [24] 1492 	mov	dph,r6
      000540 8F F0            [24] 1493 	mov	b,r7
      000542 EB               [12] 1494 	mov	a,r3
      000543 12r00r00         [24] 1495 	lcall	__gptrput
      000546                       1496 00107$:
                                   1497 ;	vt100.c:196: uint16_t scroll_start = (t->scroll_start_row + t->scroll_value) * VT100_CHAR_HEIGHT; 
      000546 A8*00            [24] 1498 	mov	r0,_bp
      000548 08               [12] 1499 	inc	r0
      000549 74 05            [12] 1500 	mov	a,#0x05
      00054B 26               [12] 1501 	add	a,@r0
      00054C FD               [12] 1502 	mov	r5,a
      00054D E4               [12] 1503 	clr	a
      00054E 08               [12] 1504 	inc	r0
      00054F 36               [12] 1505 	addc	a,@r0
      000550 FE               [12] 1506 	mov	r6,a
      000551 08               [12] 1507 	inc	r0
      000552 86 07            [24] 1508 	mov	ar7,@r0
      000554 8D 82            [24] 1509 	mov	dpl,r5
      000556 8E 83            [24] 1510 	mov	dph,r6
      000558 8F F0            [24] 1511 	mov	b,r7
      00055A 12r00r00         [24] 1512 	lcall	__gptrget
      00055D FD               [12] 1513 	mov	r5,a
      00055E 33               [12] 1514 	rlc	a
      00055F 95 E0            [12] 1515 	subb	a,acc
      000561 FF               [12] 1516 	mov	r7,a
      000562 A8*00            [24] 1517 	mov	r0,_bp
      000564 08               [12] 1518 	inc	r0
      000565 74 0B            [12] 1519 	mov	a,#0x0b
      000567 26               [12] 1520 	add	a,@r0
      000568 FB               [12] 1521 	mov	r3,a
      000569 E4               [12] 1522 	clr	a
      00056A 08               [12] 1523 	inc	r0
      00056B 36               [12] 1524 	addc	a,@r0
      00056C FC               [12] 1525 	mov	r4,a
      00056D 08               [12] 1526 	inc	r0
      00056E 86 06            [24] 1527 	mov	ar6,@r0
      000570 8B 82            [24] 1528 	mov	dpl,r3
      000572 8C 83            [24] 1529 	mov	dph,r4
      000574 8E F0            [24] 1530 	mov	b,r6
      000576 12r00r00         [24] 1531 	lcall	__gptrget
      000579 FB               [12] 1532 	mov	r3,a
      00057A 33               [12] 1533 	rlc	a
      00057B 95 E0            [12] 1534 	subb	a,acc
      00057D FE               [12] 1535 	mov	r6,a
      00057E EB               [12] 1536 	mov	a,r3
      00057F 2D               [12] 1537 	add	a,r5
      000580 FD               [12] 1538 	mov	r5,a
      000581 EE               [12] 1539 	mov	a,r6
      000582 3F               [12] 1540 	addc	a,r7
                                   1541 ;	vt100.c:197: vga_setScrollStart(scroll_start); 
      000583 8D 82            [24] 1542 	mov	dpl,r5
      000585 12r01r2D         [24] 1543 	lcall	_vga_setScrollStart
      000588                       1544 00108$:
                                   1545 ;	vt100.c:216: }
      000588 85*00 81         [24] 1546 	mov	sp,_bp
      00058B D0*00            [24] 1547 	pop	_bp
      00058D 22               [24] 1548 	ret
                                   1549 ;------------------------------------------------------------
                                   1550 ;Allocation info for local variables in function 'abs'
                                   1551 ;------------------------------------------------------------
                                   1552 ;x                         Allocated to registers r6 r7 
                                   1553 ;------------------------------------------------------------
                                   1554 ;	vt100.c:218: int16_t abs(int16_t x) {
                                   1555 ;	-----------------------------------------
                                   1556 ;	 function abs
                                   1557 ;	-----------------------------------------
      00058E                       1558 _abs:
      00058E AE 82            [24] 1559 	mov	r6,dpl
                                   1560 ;	vt100.c:219: if (x < 0) return -x;
      000590 E5 83            [12] 1561 	mov	a,dph
      000592 FF               [12] 1562 	mov	r7,a
      000593 30 E7 0A         [24] 1563 	jnb	acc.7,00102$
      000596 C3               [12] 1564 	clr	c
      000597 E4               [12] 1565 	clr	a
      000598 9E               [12] 1566 	subb	a,r6
      000599 F5 82            [12] 1567 	mov	dpl,a
      00059B E4               [12] 1568 	clr	a
      00059C 9F               [12] 1569 	subb	a,r7
      00059D F5 83            [12] 1570 	mov	dph,a
      00059F 22               [24] 1571 	ret
      0005A0                       1572 00102$:
                                   1573 ;	vt100.c:220: return x;
      0005A0 8E 82            [24] 1574 	mov	dpl,r6
      0005A2 8F 83            [24] 1575 	mov	dph,r7
                                   1576 ;	vt100.c:221: }
      0005A4 22               [24] 1577 	ret
                                   1578 ;------------------------------------------------------------
                                   1579 ;Allocation info for local variables in function '_vt100_move'
                                   1580 ;------------------------------------------------------------
                                   1581 ;right_left                Allocated to stack - _bp -4
                                   1582 ;bottom_top                Allocated to stack - _bp -6
                                   1583 ;term                      Allocated to stack - _bp +1
                                   1584 ;new_x                     Allocated to stack - _bp +6
                                   1585 ;new_y                     Allocated to stack - _bp +8
                                   1586 ;to_scroll                 Allocated to stack - _bp +4
                                   1587 ;sloc0                     Allocated to stack - _bp +4
                                   1588 ;------------------------------------------------------------
                                   1589 ;	vt100.c:224: void _vt100_move(struct vt100 *term, int16_t right_left, int16_t bottom_top){
                                   1590 ;	-----------------------------------------
                                   1591 ;	 function _vt100_move
                                   1592 ;	-----------------------------------------
      0005A5                       1593 __vt100_move:
      0005A5 C0*00            [24] 1594 	push	_bp
      0005A7 85 81*00         [24] 1595 	mov	_bp,sp
      0005AA C0 82            [24] 1596 	push	dpl
      0005AC C0 83            [24] 1597 	push	dph
      0005AE C0 F0            [24] 1598 	push	b
      0005B0 E5 81            [12] 1599 	mov	a,sp
      0005B2 24 06            [12] 1600 	add	a,#0x06
      0005B4 F5 81            [12] 1601 	mov	sp,a
                                   1602 ;	vt100.c:226: int16_t new_x = right_left + term->cursor_x; 
      0005B6 A8*00            [24] 1603 	mov	r0,_bp
      0005B8 08               [12] 1604 	inc	r0
      0005B9 74 01            [12] 1605 	mov	a,#0x01
      0005BB 26               [12] 1606 	add	a,@r0
      0005BC FA               [12] 1607 	mov	r2,a
      0005BD E4               [12] 1608 	clr	a
      0005BE 08               [12] 1609 	inc	r0
      0005BF 36               [12] 1610 	addc	a,@r0
      0005C0 FB               [12] 1611 	mov	r3,a
      0005C1 08               [12] 1612 	inc	r0
      0005C2 86 04            [24] 1613 	mov	ar4,@r0
      0005C4 8A 82            [24] 1614 	mov	dpl,r2
      0005C6 8B 83            [24] 1615 	mov	dph,r3
      0005C8 8C F0            [24] 1616 	mov	b,r4
      0005CA 12r00r00         [24] 1617 	lcall	__gptrget
      0005CD FF               [12] 1618 	mov	r7,a
      0005CE 33               [12] 1619 	rlc	a
      0005CF 95 E0            [12] 1620 	subb	a,acc
      0005D1 FE               [12] 1621 	mov	r6,a
      0005D2 E5*00            [12] 1622 	mov	a,_bp
      0005D4 24 FC            [12] 1623 	add	a,#0xfc
      0005D6 F8               [12] 1624 	mov	r0,a
      0005D7 EF               [12] 1625 	mov	a,r7
      0005D8 26               [12] 1626 	add	a,@r0
      0005D9 FF               [12] 1627 	mov	r7,a
      0005DA EE               [12] 1628 	mov	a,r6
      0005DB 08               [12] 1629 	inc	r0
      0005DC 36               [12] 1630 	addc	a,@r0
      0005DD FE               [12] 1631 	mov	r6,a
      0005DE E5*00            [12] 1632 	mov	a,_bp
      0005E0 24 06            [12] 1633 	add	a,#0x06
      0005E2 F8               [12] 1634 	mov	r0,a
      0005E3 A6 07            [24] 1635 	mov	@r0,ar7
      0005E5 08               [12] 1636 	inc	r0
      0005E6 A6 06            [24] 1637 	mov	@r0,ar6
                                   1638 ;	vt100.c:227: if(new_x > VT100_WIDTH){
      0005E8 E5*00            [12] 1639 	mov	a,_bp
      0005EA 24 06            [12] 1640 	add	a,#0x06
      0005EC F8               [12] 1641 	mov	r0,a
      0005ED C3               [12] 1642 	clr	c
      0005EE 74 50            [12] 1643 	mov	a,#0x50
      0005F0 96               [12] 1644 	subb	a,@r0
      0005F1 74 80            [12] 1645 	mov	a,#(0x00 ^ 0x80)
      0005F3 08               [12] 1646 	inc	r0
      0005F4 86 F0            [24] 1647 	mov	b,@r0
      0005F6 63 F0 80         [24] 1648 	xrl	b,#0x80
      0005F9 95 F0            [12] 1649 	subb	a,b
      0005FB 40 03            [24] 1650 	jc	00144$
      0005FD 02r06r8F         [24] 1651 	ljmp	00108$
      000600                       1652 00144$:
                                   1653 ;	vt100.c:228: if(term->flags.cursor_wrap){
      000600 C0 02            [24] 1654 	push	ar2
      000602 C0 03            [24] 1655 	push	ar3
      000604 C0 04            [24] 1656 	push	ar4
      000606 A8*00            [24] 1657 	mov	r0,_bp
      000608 08               [12] 1658 	inc	r0
      000609 86 03            [24] 1659 	mov	ar3,@r0
      00060B 08               [12] 1660 	inc	r0
      00060C 86 04            [24] 1661 	mov	ar4,@r0
      00060E 08               [12] 1662 	inc	r0
      00060F 86 05            [24] 1663 	mov	ar5,@r0
      000611 8B 82            [24] 1664 	mov	dpl,r3
      000613 8C 83            [24] 1665 	mov	dph,r4
      000615 8D F0            [24] 1666 	mov	b,r5
      000617 12r00r00         [24] 1667 	lcall	__gptrget
      00061A D0 04            [24] 1668 	pop	ar4
      00061C D0 03            [24] 1669 	pop	ar3
      00061E D0 02            [24] 1670 	pop	ar2
      000620 30 E0 5E         [24] 1671 	jnb	acc.0,00102$
                                   1672 ;	vt100.c:229: bottom_top += new_x / VT100_WIDTH;
      000623 C0 04            [24] 1673 	push	ar4
      000625 C0 03            [24] 1674 	push	ar3
      000627 C0 02            [24] 1675 	push	ar2
      000629 74 50            [12] 1676 	mov	a,#0x50
      00062B C0 E0            [24] 1677 	push	acc
      00062D E4               [12] 1678 	clr	a
      00062E C0 E0            [24] 1679 	push	acc
      000630 E5*00            [12] 1680 	mov	a,_bp
      000632 24 06            [12] 1681 	add	a,#0x06
      000634 F8               [12] 1682 	mov	r0,a
      000635 86 82            [24] 1683 	mov	dpl,@r0
      000637 08               [12] 1684 	inc	r0
      000638 86 83            [24] 1685 	mov	dph,@r0
      00063A 12r00r00         [24] 1686 	lcall	__divsint
      00063D AD 82            [24] 1687 	mov	r5,dpl
      00063F AF 83            [24] 1688 	mov	r7,dph
      000641 15 81            [12] 1689 	dec	sp
      000643 15 81            [12] 1690 	dec	sp
      000645 E5*00            [12] 1691 	mov	a,_bp
      000647 24 FA            [12] 1692 	add	a,#0xfa
      000649 F8               [12] 1693 	mov	r0,a
      00064A ED               [12] 1694 	mov	a,r5
      00064B 26               [12] 1695 	add	a,@r0
      00064C F6               [12] 1696 	mov	@r0,a
      00064D EF               [12] 1697 	mov	a,r7
      00064E 08               [12] 1698 	inc	r0
      00064F 36               [12] 1699 	addc	a,@r0
      000650 F6               [12] 1700 	mov	@r0,a
                                   1701 ;	vt100.c:230: term->cursor_x = new_x % VT100_WIDTH - 1;
      000651 74 50            [12] 1702 	mov	a,#0x50
      000653 C0 E0            [24] 1703 	push	acc
      000655 E4               [12] 1704 	clr	a
      000656 C0 E0            [24] 1705 	push	acc
      000658 E5*00            [12] 1706 	mov	a,_bp
      00065A 24 06            [12] 1707 	add	a,#0x06
      00065C F8               [12] 1708 	mov	r0,a
      00065D 86 82            [24] 1709 	mov	dpl,@r0
      00065F 08               [12] 1710 	inc	r0
      000660 86 83            [24] 1711 	mov	dph,@r0
      000662 12r00r00         [24] 1712 	lcall	__modsint
      000665 AE 82            [24] 1713 	mov	r6,dpl
      000667 AF 83            [24] 1714 	mov	r7,dph
      000669 15 81            [12] 1715 	dec	sp
      00066B 15 81            [12] 1716 	dec	sp
      00066D D0 02            [24] 1717 	pop	ar2
      00066F D0 03            [24] 1718 	pop	ar3
      000671 D0 04            [24] 1719 	pop	ar4
      000673 1E               [12] 1720 	dec	r6
      000674 8A 82            [24] 1721 	mov	dpl,r2
      000676 8B 83            [24] 1722 	mov	dph,r3
      000678 8C F0            [24] 1723 	mov	b,r4
      00067A EE               [12] 1724 	mov	a,r6
      00067B 12r00r00         [24] 1725 	lcall	__gptrput
      00067E 02r07r1E         [24] 1726 	ljmp	00109$
      000681                       1727 00102$:
                                   1728 ;	vt100.c:232: term->cursor_x = VT100_WIDTH;
      000681 8A 82            [24] 1729 	mov	dpl,r2
      000683 8B 83            [24] 1730 	mov	dph,r3
      000685 8C F0            [24] 1731 	mov	b,r4
      000687 74 50            [12] 1732 	mov	a,#0x50
      000689 12r00r00         [24] 1733 	lcall	__gptrput
      00068C 02r07r1E         [24] 1734 	ljmp	00109$
      00068F                       1735 00108$:
                                   1736 ;	vt100.c:234: } else if(new_x < 0){
      00068F E5*00            [12] 1737 	mov	a,_bp
      000691 24 06            [12] 1738 	add	a,#0x06
      000693 F8               [12] 1739 	mov	r0,a
      000694 08               [12] 1740 	inc	r0
      000695 E6               [12] 1741 	mov	a,@r0
      000696 30 E7 74         [24] 1742 	jnb	acc.7,00105$
                                   1743 ;	vt100.c:235: bottom_top += new_x / VT100_WIDTH - 1;
      000699 C0 04            [24] 1744 	push	ar4
      00069B C0 03            [24] 1745 	push	ar3
      00069D C0 02            [24] 1746 	push	ar2
      00069F 74 50            [12] 1747 	mov	a,#0x50
      0006A1 C0 E0            [24] 1748 	push	acc
      0006A3 E4               [12] 1749 	clr	a
      0006A4 C0 E0            [24] 1750 	push	acc
      0006A6 E5*00            [12] 1751 	mov	a,_bp
      0006A8 24 06            [12] 1752 	add	a,#0x06
      0006AA F8               [12] 1753 	mov	r0,a
      0006AB 86 82            [24] 1754 	mov	dpl,@r0
      0006AD 08               [12] 1755 	inc	r0
      0006AE 86 83            [24] 1756 	mov	dph,@r0
      0006B0 12r00r00         [24] 1757 	lcall	__divsint
      0006B3 AE 82            [24] 1758 	mov	r6,dpl
      0006B5 AF 83            [24] 1759 	mov	r7,dph
      0006B7 15 81            [12] 1760 	dec	sp
      0006B9 15 81            [12] 1761 	dec	sp
      0006BB D0 02            [24] 1762 	pop	ar2
      0006BD D0 03            [24] 1763 	pop	ar3
      0006BF D0 04            [24] 1764 	pop	ar4
      0006C1 1E               [12] 1765 	dec	r6
      0006C2 BE FF 01         [24] 1766 	cjne	r6,#0xff,00147$
      0006C5 1F               [12] 1767 	dec	r7
      0006C6                       1768 00147$:
      0006C6 E5*00            [12] 1769 	mov	a,_bp
      0006C8 24 FA            [12] 1770 	add	a,#0xfa
      0006CA F8               [12] 1771 	mov	r0,a
      0006CB EE               [12] 1772 	mov	a,r6
      0006CC 26               [12] 1773 	add	a,@r0
      0006CD F6               [12] 1774 	mov	@r0,a
      0006CE EF               [12] 1775 	mov	a,r7
      0006CF 08               [12] 1776 	inc	r0
      0006D0 36               [12] 1777 	addc	a,@r0
      0006D1 F6               [12] 1778 	mov	@r0,a
                                   1779 ;	vt100.c:236: term->cursor_x = VT100_WIDTH - (abs(new_x) % VT100_WIDTH) + 1; 
      0006D2 E5*00            [12] 1780 	mov	a,_bp
      0006D4 24 06            [12] 1781 	add	a,#0x06
      0006D6 F8               [12] 1782 	mov	r0,a
      0006D7 86 82            [24] 1783 	mov	dpl,@r0
      0006D9 08               [12] 1784 	inc	r0
      0006DA 86 83            [24] 1785 	mov	dph,@r0
      0006DC C0 04            [24] 1786 	push	ar4
      0006DE C0 03            [24] 1787 	push	ar3
      0006E0 C0 02            [24] 1788 	push	ar2
      0006E2 12r05r8E         [24] 1789 	lcall	_abs
      0006E5 74 50            [12] 1790 	mov	a,#0x50
      0006E7 C0 E0            [24] 1791 	push	acc
      0006E9 E4               [12] 1792 	clr	a
      0006EA C0 E0            [24] 1793 	push	acc
      0006EC 12r00r00         [24] 1794 	lcall	__modsint
      0006EF AE 82            [24] 1795 	mov	r6,dpl
      0006F1 AF 83            [24] 1796 	mov	r7,dph
      0006F3 15 81            [12] 1797 	dec	sp
      0006F5 15 81            [12] 1798 	dec	sp
      0006F7 D0 02            [24] 1799 	pop	ar2
      0006F9 D0 03            [24] 1800 	pop	ar3
      0006FB D0 04            [24] 1801 	pop	ar4
      0006FD 74 51            [12] 1802 	mov	a,#0x51
      0006FF C3               [12] 1803 	clr	c
      000700 9E               [12] 1804 	subb	a,r6
      000701 FE               [12] 1805 	mov	r6,a
      000702 8A 82            [24] 1806 	mov	dpl,r2
      000704 8B 83            [24] 1807 	mov	dph,r3
      000706 8C F0            [24] 1808 	mov	b,r4
      000708 12r00r00         [24] 1809 	lcall	__gptrput
      00070B 80 11            [24] 1810 	sjmp	00109$
      00070D                       1811 00105$:
                                   1812 ;	vt100.c:238: term->cursor_x = new_x;
      00070D E5*00            [12] 1813 	mov	a,_bp
      00070F 24 06            [12] 1814 	add	a,#0x06
      000711 F8               [12] 1815 	mov	r0,a
      000712 86 07            [24] 1816 	mov	ar7,@r0
      000714 8A 82            [24] 1817 	mov	dpl,r2
      000716 8B 83            [24] 1818 	mov	dph,r3
      000718 8C F0            [24] 1819 	mov	b,r4
      00071A EF               [12] 1820 	mov	a,r7
      00071B 12r00r00         [24] 1821 	lcall	__gptrput
      00071E                       1822 00109$:
                                   1823 ;	vt100.c:241: if(bottom_top){
      00071E E5*00            [12] 1824 	mov	a,_bp
      000720 24 FA            [12] 1825 	add	a,#0xfa
      000722 F8               [12] 1826 	mov	r0,a
      000723 E6               [12] 1827 	mov	a,@r0
      000724 08               [12] 1828 	inc	r0
      000725 46               [12] 1829 	orl	a,@r0
      000726 70 03            [24] 1830 	jnz	00148$
      000728 02r08r43         [24] 1831 	ljmp	00118$
      00072B                       1832 00148$:
                                   1833 ;	vt100.c:242: int16_t new_y = term->cursor_y + bottom_top;
      00072B A8*00            [24] 1834 	mov	r0,_bp
      00072D 08               [12] 1835 	inc	r0
      00072E 74 02            [12] 1836 	mov	a,#0x02
      000730 26               [12] 1837 	add	a,@r0
      000731 FD               [12] 1838 	mov	r5,a
      000732 E4               [12] 1839 	clr	a
      000733 08               [12] 1840 	inc	r0
      000734 36               [12] 1841 	addc	a,@r0
      000735 FE               [12] 1842 	mov	r6,a
      000736 08               [12] 1843 	inc	r0
      000737 86 07            [24] 1844 	mov	ar7,@r0
      000739 8D 82            [24] 1845 	mov	dpl,r5
      00073B 8E 83            [24] 1846 	mov	dph,r6
      00073D 8F F0            [24] 1847 	mov	b,r7
      00073F 12r00r00         [24] 1848 	lcall	__gptrget
      000742 FC               [12] 1849 	mov	r4,a
      000743 33               [12] 1850 	rlc	a
      000744 95 E0            [12] 1851 	subb	a,acc
      000746 FB               [12] 1852 	mov	r3,a
      000747 E5*00            [12] 1853 	mov	a,_bp
      000749 24 FA            [12] 1854 	add	a,#0xfa
      00074B F8               [12] 1855 	mov	r0,a
      00074C E6               [12] 1856 	mov	a,@r0
      00074D 2C               [12] 1857 	add	a,r4
      00074E FC               [12] 1858 	mov	r4,a
      00074F 08               [12] 1859 	inc	r0
      000750 E6               [12] 1860 	mov	a,@r0
      000751 3B               [12] 1861 	addc	a,r3
      000752 FB               [12] 1862 	mov	r3,a
      000753 E5*00            [12] 1863 	mov	a,_bp
      000755 24 08            [12] 1864 	add	a,#0x08
      000757 F8               [12] 1865 	mov	r0,a
      000758 A6 04            [24] 1866 	mov	@r0,ar4
      00075A 08               [12] 1867 	inc	r0
      00075B A6 03            [24] 1868 	mov	@r0,ar3
                                   1869 ;	vt100.c:243: int16_t to_scroll = 0;
      00075D E5*00            [12] 1870 	mov	a,_bp
      00075F 24 04            [12] 1871 	add	a,#0x04
      000761 F8               [12] 1872 	mov	r0,a
      000762 E4               [12] 1873 	clr	a
      000763 F6               [12] 1874 	mov	@r0,a
      000764 08               [12] 1875 	inc	r0
      000765 F6               [12] 1876 	mov	@r0,a
                                   1877 ;	vt100.c:248: if(new_y >= term->scroll_end_row){
      000766 A8*00            [24] 1878 	mov	r0,_bp
      000768 08               [12] 1879 	inc	r0
      000769 74 06            [12] 1880 	mov	a,#0x06
      00076B 26               [12] 1881 	add	a,@r0
      00076C FA               [12] 1882 	mov	r2,a
      00076D E4               [12] 1883 	clr	a
      00076E 08               [12] 1884 	inc	r0
      00076F 36               [12] 1885 	addc	a,@r0
      000770 FB               [12] 1886 	mov	r3,a
      000771 08               [12] 1887 	inc	r0
      000772 86 04            [24] 1888 	mov	ar4,@r0
      000774 8A 82            [24] 1889 	mov	dpl,r2
      000776 8B 83            [24] 1890 	mov	dph,r3
      000778 8C F0            [24] 1891 	mov	b,r4
      00077A 12r00r00         [24] 1892 	lcall	__gptrget
      00077D FC               [12] 1893 	mov	r4,a
      00077E FA               [12] 1894 	mov	r2,a
      00077F 33               [12] 1895 	rlc	a
      000780 95 E0            [12] 1896 	subb	a,acc
      000782 FB               [12] 1897 	mov	r3,a
      000783 E5*00            [12] 1898 	mov	a,_bp
      000785 24 08            [12] 1899 	add	a,#0x08
      000787 F8               [12] 1900 	mov	r0,a
      000788 C3               [12] 1901 	clr	c
      000789 E6               [12] 1902 	mov	a,@r0
      00078A 9A               [12] 1903 	subb	a,r2
      00078B 08               [12] 1904 	inc	r0
      00078C E6               [12] 1905 	mov	a,@r0
      00078D 64 80            [12] 1906 	xrl	a,#0x80
      00078F 8B F0            [24] 1907 	mov	b,r3
      000791 63 F0 80         [24] 1908 	xrl	b,#0x80
      000794 95 F0            [12] 1909 	subb	a,b
      000796 40 27            [24] 1910 	jc	00114$
                                   1911 ;	vt100.c:251: to_scroll = (new_y - term->scroll_end_row) + 1; 
      000798 E5*00            [12] 1912 	mov	a,_bp
      00079A 24 08            [12] 1913 	add	a,#0x08
      00079C F8               [12] 1914 	mov	r0,a
      00079D E6               [12] 1915 	mov	a,@r0
      00079E C3               [12] 1916 	clr	c
      00079F 9A               [12] 1917 	subb	a,r2
      0007A0 FA               [12] 1918 	mov	r2,a
      0007A1 08               [12] 1919 	inc	r0
      0007A2 E6               [12] 1920 	mov	a,@r0
      0007A3 9B               [12] 1921 	subb	a,r3
      0007A4 FB               [12] 1922 	mov	r3,a
      0007A5 E5*00            [12] 1923 	mov	a,_bp
      0007A7 24 04            [12] 1924 	add	a,#0x04
      0007A9 F8               [12] 1925 	mov	r0,a
      0007AA 74 01            [12] 1926 	mov	a,#0x01
      0007AC 2A               [12] 1927 	add	a,r2
      0007AD F6               [12] 1928 	mov	@r0,a
      0007AE E4               [12] 1929 	clr	a
      0007AF 3B               [12] 1930 	addc	a,r3
      0007B0 08               [12] 1931 	inc	r0
      0007B1 F6               [12] 1932 	mov	@r0,a
                                   1933 ;	vt100.c:253: term->cursor_y = term->scroll_end_row - 1; //new_y - to_scroll; 
      0007B2 1C               [12] 1934 	dec	r4
      0007B3 8D 82            [24] 1935 	mov	dpl,r5
      0007B5 8E 83            [24] 1936 	mov	dph,r6
      0007B7 8F F0            [24] 1937 	mov	b,r7
      0007B9 EC               [12] 1938 	mov	a,r4
      0007BA 12r00r00         [24] 1939 	lcall	__gptrput
      0007BD 80 66            [24] 1940 	sjmp	00115$
      0007BF                       1941 00114$:
                                   1942 ;	vt100.c:256: } else if(new_y < term->scroll_start_row){
      0007BF A8*00            [24] 1943 	mov	r0,_bp
      0007C1 08               [12] 1944 	inc	r0
      0007C2 74 05            [12] 1945 	mov	a,#0x05
      0007C4 26               [12] 1946 	add	a,@r0
      0007C5 FA               [12] 1947 	mov	r2,a
      0007C6 E4               [12] 1948 	clr	a
      0007C7 08               [12] 1949 	inc	r0
      0007C8 36               [12] 1950 	addc	a,@r0
      0007C9 FB               [12] 1951 	mov	r3,a
      0007CA 08               [12] 1952 	inc	r0
      0007CB 86 04            [24] 1953 	mov	ar4,@r0
      0007CD 8A 82            [24] 1954 	mov	dpl,r2
      0007CF 8B 83            [24] 1955 	mov	dph,r3
      0007D1 8C F0            [24] 1956 	mov	b,r4
      0007D3 12r00r00         [24] 1957 	lcall	__gptrget
      0007D6 FC               [12] 1958 	mov	r4,a
      0007D7 FA               [12] 1959 	mov	r2,a
      0007D8 33               [12] 1960 	rlc	a
      0007D9 95 E0            [12] 1961 	subb	a,acc
      0007DB FB               [12] 1962 	mov	r3,a
      0007DC E5*00            [12] 1963 	mov	a,_bp
      0007DE 24 08            [12] 1964 	add	a,#0x08
      0007E0 F8               [12] 1965 	mov	r0,a
      0007E1 C3               [12] 1966 	clr	c
      0007E2 E6               [12] 1967 	mov	a,@r0
      0007E3 9A               [12] 1968 	subb	a,r2
      0007E4 08               [12] 1969 	inc	r0
      0007E5 E6               [12] 1970 	mov	a,@r0
      0007E6 64 80            [12] 1971 	xrl	a,#0x80
      0007E8 8B F0            [24] 1972 	mov	b,r3
      0007EA 63 F0 80         [24] 1973 	xrl	b,#0x80
      0007ED 95 F0            [12] 1974 	subb	a,b
      0007EF 50 23            [24] 1975 	jnc	00111$
                                   1976 ;	vt100.c:257: to_scroll = (new_y - term->scroll_start_row); 
      0007F1 E5*00            [12] 1977 	mov	a,_bp
      0007F3 24 08            [12] 1978 	add	a,#0x08
      0007F5 F8               [12] 1979 	mov	r0,a
      0007F6 E6               [12] 1980 	mov	a,@r0
      0007F7 C3               [12] 1981 	clr	c
      0007F8 9A               [12] 1982 	subb	a,r2
      0007F9 FA               [12] 1983 	mov	r2,a
      0007FA 08               [12] 1984 	inc	r0
      0007FB E6               [12] 1985 	mov	a,@r0
      0007FC 9B               [12] 1986 	subb	a,r3
      0007FD FB               [12] 1987 	mov	r3,a
      0007FE E5*00            [12] 1988 	mov	a,_bp
      000800 24 04            [12] 1989 	add	a,#0x04
      000802 F8               [12] 1990 	mov	r0,a
      000803 A6 02            [24] 1991 	mov	@r0,ar2
      000805 08               [12] 1992 	inc	r0
      000806 A6 03            [24] 1993 	mov	@r0,ar3
                                   1994 ;	vt100.c:258: term->cursor_y = term->scroll_start_row; //new_y - to_scroll; 
      000808 8D 82            [24] 1995 	mov	dpl,r5
      00080A 8E 83            [24] 1996 	mov	dph,r6
      00080C 8F F0            [24] 1997 	mov	b,r7
      00080E EC               [12] 1998 	mov	a,r4
      00080F 12r00r00         [24] 1999 	lcall	__gptrput
      000812 80 11            [24] 2000 	sjmp	00115$
      000814                       2001 00111$:
                                   2002 ;	vt100.c:263: term->cursor_y = new_y;
      000814 E5*00            [12] 2003 	mov	a,_bp
      000816 24 08            [12] 2004 	add	a,#0x08
      000818 F8               [12] 2005 	mov	r0,a
      000819 86 04            [24] 2006 	mov	ar4,@r0
      00081B 8D 82            [24] 2007 	mov	dpl,r5
      00081D 8E 83            [24] 2008 	mov	dph,r6
      00081F 8F F0            [24] 2009 	mov	b,r7
      000821 EC               [12] 2010 	mov	a,r4
      000822 12r00r00         [24] 2011 	lcall	__gptrput
      000825                       2012 00115$:
                                   2013 ;	vt100.c:265: _vt100_scroll(term, to_scroll);
      000825 E5*00            [12] 2014 	mov	a,_bp
      000827 24 04            [12] 2015 	add	a,#0x04
      000829 F8               [12] 2016 	mov	r0,a
      00082A E6               [12] 2017 	mov	a,@r0
      00082B C0 E0            [24] 2018 	push	acc
      00082D 08               [12] 2019 	inc	r0
      00082E E6               [12] 2020 	mov	a,@r0
      00082F C0 E0            [24] 2021 	push	acc
      000831 A8*00            [24] 2022 	mov	r0,_bp
      000833 08               [12] 2023 	inc	r0
      000834 86 82            [24] 2024 	mov	dpl,@r0
      000836 08               [12] 2025 	inc	r0
      000837 86 83            [24] 2026 	mov	dph,@r0
      000839 08               [12] 2027 	inc	r0
      00083A 86 F0            [24] 2028 	mov	b,@r0
      00083C 12r03r85         [24] 2029 	lcall	__vt100_scroll
      00083F 15 81            [12] 2030 	dec	sp
      000841 15 81            [12] 2031 	dec	sp
      000843                       2032 00118$:
                                   2033 ;	vt100.c:267: }
      000843 85*00 81         [24] 2034 	mov	sp,_bp
      000846 D0*00            [24] 2035 	pop	_bp
      000848 22               [24] 2036 	ret
                                   2037 ;------------------------------------------------------------
                                   2038 ;Allocation info for local variables in function '_vt100_drawCursor'
                                   2039 ;------------------------------------------------------------
                                   2040 ;t                         Allocated to registers 
                                   2041 ;------------------------------------------------------------
                                   2042 ;	vt100.c:269: void _vt100_drawCursor(struct vt100 *t){
                                   2043 ;	-----------------------------------------
                                   2044 ;	 function _vt100_drawCursor
                                   2045 ;	-----------------------------------------
      000849                       2046 __vt100_drawCursor:
                                   2047 ;	vt100.c:274: }
      000849 22               [24] 2048 	ret
                                   2049 ;------------------------------------------------------------
                                   2050 ;Allocation info for local variables in function '_vt100_putc'
                                   2051 ;------------------------------------------------------------
                                   2052 ;ch                        Allocated to stack - _bp -3
                                   2053 ;t                         Allocated to stack - _bp +1
                                   2054 ;x                         Allocated to registers r5 
                                   2055 ;y                         Allocated to registers r6 
                                   2056 ;------------------------------------------------------------
                                   2057 ;	vt100.c:277: void _vt100_putc(struct vt100 *t, uint8_t ch){
                                   2058 ;	-----------------------------------------
                                   2059 ;	 function _vt100_putc
                                   2060 ;	-----------------------------------------
      00084A                       2061 __vt100_putc:
      00084A C0*00            [24] 2062 	push	_bp
      00084C 85 81*00         [24] 2063 	mov	_bp,sp
      00084F C0 82            [24] 2064 	push	dpl
      000851 C0 83            [24] 2065 	push	dph
      000853 C0 F0            [24] 2066 	push	b
                                   2067 ;	vt100.c:280: if(ch < 0x20 || ch > 0x7e){
      000855 E5*00            [12] 2068 	mov	a,_bp
      000857 24 FD            [12] 2069 	add	a,#0xfd
      000859 F8               [12] 2070 	mov	r0,a
      00085A B6 20 00         [24] 2071 	cjne	@r0,#0x20,00110$
      00085D                       2072 00110$:
      00085D 40 0D            [24] 2073 	jc	00101$
      00085F E5*00            [12] 2074 	mov	a,_bp
      000861 24 FD            [12] 2075 	add	a,#0xfd
      000863 F8               [12] 2076 	mov	r0,a
      000864 E6               [12] 2077 	mov	a,@r0
      000865 24 81            [12] 2078 	add	a,#0xff - 0x7e
      000867 40 03            [24] 2079 	jc	00112$
      000869 02r09r01         [24] 2080 	ljmp	00102$
      00086C                       2081 00112$:
      00086C                       2082 00101$:
                                   2083 ;	vt100.c:282: _vt100_putc(t, '0'); 
      00086C 74 30            [12] 2084 	mov	a,#0x30
      00086E C0 E0            [24] 2085 	push	acc
      000870 A8*00            [24] 2086 	mov	r0,_bp
      000872 08               [12] 2087 	inc	r0
      000873 86 82            [24] 2088 	mov	dpl,@r0
      000875 08               [12] 2089 	inc	r0
      000876 86 83            [24] 2090 	mov	dph,@r0
      000878 08               [12] 2091 	inc	r0
      000879 86 F0            [24] 2092 	mov	b,@r0
      00087B 12r08r4A         [24] 2093 	lcall	__vt100_putc
      00087E 15 81            [12] 2094 	dec	sp
                                   2095 ;	vt100.c:283: _vt100_putc(t, 'x'); 
      000880 74 78            [12] 2096 	mov	a,#0x78
      000882 C0 E0            [24] 2097 	push	acc
      000884 A8*00            [24] 2098 	mov	r0,_bp
      000886 08               [12] 2099 	inc	r0
      000887 86 82            [24] 2100 	mov	dpl,@r0
      000889 08               [12] 2101 	inc	r0
      00088A 86 83            [24] 2102 	mov	dph,@r0
      00088C 08               [12] 2103 	inc	r0
      00088D 86 F0            [24] 2104 	mov	b,@r0
      00088F 12r08r4A         [24] 2105 	lcall	__vt100_putc
      000892 15 81            [12] 2106 	dec	sp
                                   2107 ;	vt100.c:284: _vt100_putc(t, hex[((ch & 0xf0) >> 4)]);
      000894 E5*00            [12] 2108 	mov	a,_bp
      000896 24 FD            [12] 2109 	add	a,#0xfd
      000898 F8               [12] 2110 	mov	r0,a
      000899 86 03            [24] 2111 	mov	ar3,@r0
      00089B 7C 00            [12] 2112 	mov	r4,#0x00
      00089D 74 F0            [12] 2113 	mov	a,#0xf0
      00089F 5B               [12] 2114 	anl	a,r3
      0008A0 FA               [12] 2115 	mov	r2,a
      0008A1 E4               [12] 2116 	clr	a
      0008A2 CA               [12] 2117 	xch	a,r2
      0008A3 C4               [12] 2118 	swap	a
      0008A4 54 0F            [12] 2119 	anl	a,#0x0f
      0008A6 6A               [12] 2120 	xrl	a,r2
      0008A7 CA               [12] 2121 	xch	a,r2
      0008A8 54 0F            [12] 2122 	anl	a,#0x0f
      0008AA CA               [12] 2123 	xch	a,r2
      0008AB 6A               [12] 2124 	xrl	a,r2
      0008AC CA               [12] 2125 	xch	a,r2
      0008AD 30 E3 02         [24] 2126 	jnb	acc.3,00113$
      0008B0 44 F0            [12] 2127 	orl	a,#0xfffffff0
      0008B2                       2128 00113$:
      0008B2 FF               [12] 2129 	mov	r7,a
      0008B3 EA               [12] 2130 	mov	a,r2
      0008B4 24r00            [12] 2131 	add	a,#__vt100_putc_hex_131072_135
      0008B6 F5 82            [12] 2132 	mov	dpl,a
      0008B8 EF               [12] 2133 	mov	a,r7
      0008B9 34s00            [12] 2134 	addc	a,#(__vt100_putc_hex_131072_135 >> 8)
      0008BB F5 83            [12] 2135 	mov	dph,a
      0008BD E4               [12] 2136 	clr	a
      0008BE 93               [24] 2137 	movc	a,@a+dptr
      0008BF FF               [12] 2138 	mov	r7,a
      0008C0 C0 04            [24] 2139 	push	ar4
      0008C2 C0 03            [24] 2140 	push	ar3
      0008C4 C0 07            [24] 2141 	push	ar7
      0008C6 A8*00            [24] 2142 	mov	r0,_bp
      0008C8 08               [12] 2143 	inc	r0
      0008C9 86 82            [24] 2144 	mov	dpl,@r0
      0008CB 08               [12] 2145 	inc	r0
      0008CC 86 83            [24] 2146 	mov	dph,@r0
      0008CE 08               [12] 2147 	inc	r0
      0008CF 86 F0            [24] 2148 	mov	b,@r0
      0008D1 12r08r4A         [24] 2149 	lcall	__vt100_putc
      0008D4 15 81            [12] 2150 	dec	sp
      0008D6 D0 03            [24] 2151 	pop	ar3
      0008D8 D0 04            [24] 2152 	pop	ar4
                                   2153 ;	vt100.c:285: _vt100_putc(t, hex[(ch & 0x0f)]);
      0008DA 53 03 0F         [24] 2154 	anl	ar3,#0x0f
      0008DD 7C 00            [12] 2155 	mov	r4,#0x00
      0008DF EB               [12] 2156 	mov	a,r3
      0008E0 24r00            [12] 2157 	add	a,#__vt100_putc_hex_131072_135
      0008E2 F5 82            [12] 2158 	mov	dpl,a
      0008E4 EC               [12] 2159 	mov	a,r4
      0008E5 34s00            [12] 2160 	addc	a,#(__vt100_putc_hex_131072_135 >> 8)
      0008E7 F5 83            [12] 2161 	mov	dph,a
      0008E9 E4               [12] 2162 	clr	a
      0008EA 93               [24] 2163 	movc	a,@a+dptr
      0008EB FF               [12] 2164 	mov	r7,a
      0008EC C0 07            [24] 2165 	push	ar7
      0008EE A8*00            [24] 2166 	mov	r0,_bp
      0008F0 08               [12] 2167 	inc	r0
      0008F1 86 82            [24] 2168 	mov	dpl,@r0
      0008F3 08               [12] 2169 	inc	r0
      0008F4 86 83            [24] 2170 	mov	dph,@r0
      0008F6 08               [12] 2171 	inc	r0
      0008F7 86 F0            [24] 2172 	mov	b,@r0
      0008F9 12r08r4A         [24] 2173 	lcall	__vt100_putc
      0008FC 15 81            [12] 2174 	dec	sp
                                   2175 ;	vt100.c:286: return;
      0008FE 02r09rCA         [24] 2176 	ljmp	00104$
      000901                       2177 00102$:
                                   2178 ;	vt100.c:290: uint8_t x = VT100_CURSOR_X(t);
      000901 A8*00            [24] 2179 	mov	r0,_bp
      000903 08               [12] 2180 	inc	r0
      000904 74 01            [12] 2181 	mov	a,#0x01
      000906 26               [12] 2182 	add	a,@r0
      000907 FD               [12] 2183 	mov	r5,a
      000908 E4               [12] 2184 	clr	a
      000909 08               [12] 2185 	inc	r0
      00090A 36               [12] 2186 	addc	a,@r0
      00090B FE               [12] 2187 	mov	r6,a
      00090C 08               [12] 2188 	inc	r0
      00090D 86 07            [24] 2189 	mov	ar7,@r0
      00090F 8D 82            [24] 2190 	mov	dpl,r5
      000911 8E 83            [24] 2191 	mov	dph,r6
      000913 8F F0            [24] 2192 	mov	b,r7
      000915 12r00r00         [24] 2193 	lcall	__gptrget
      000918 FD               [12] 2194 	mov	r5,a
      000919 A8*00            [24] 2195 	mov	r0,_bp
      00091B 08               [12] 2196 	inc	r0
      00091C 74 07            [12] 2197 	mov	a,#0x07
      00091E 26               [12] 2198 	add	a,@r0
      00091F FC               [12] 2199 	mov	r4,a
      000920 E4               [12] 2200 	clr	a
      000921 08               [12] 2201 	inc	r0
      000922 36               [12] 2202 	addc	a,@r0
      000923 FE               [12] 2203 	mov	r6,a
      000924 08               [12] 2204 	inc	r0
      000925 86 07            [24] 2205 	mov	ar7,@r0
      000927 8C 82            [24] 2206 	mov	dpl,r4
      000929 8E 83            [24] 2207 	mov	dph,r6
      00092B 8F F0            [24] 2208 	mov	b,r7
      00092D 12r00r00         [24] 2209 	lcall	__gptrget
      000930 FC               [12] 2210 	mov	r4,a
      000931 8C F0            [24] 2211 	mov	b,r4
      000933 ED               [12] 2212 	mov	a,r5
      000934 A4               [48] 2213 	mul	ab
      000935 FD               [12] 2214 	mov	r5,a
                                   2215 ;	vt100.c:291: uint8_t y = VT100_CURSOR_Y(t);
      000936 A8*00            [24] 2216 	mov	r0,_bp
      000938 08               [12] 2217 	inc	r0
      000939 86 82            [24] 2218 	mov	dpl,@r0
      00093B 08               [12] 2219 	inc	r0
      00093C 86 83            [24] 2220 	mov	dph,@r0
      00093E 08               [12] 2221 	inc	r0
      00093F 86 F0            [24] 2222 	mov	b,@r0
      000941 C0 05            [24] 2223 	push	ar5
      000943 12r01rDD         [24] 2224 	lcall	_VT100_CURSOR_Y
      000946 AE 82            [24] 2225 	mov	r6,dpl
      000948 D0 05            [24] 2226 	pop	ar5
                                   2227 ;	vt100.c:293: vga_setFrontColor(t->front_color);
      00094A A8*00            [24] 2228 	mov	r0,_bp
      00094C 08               [12] 2229 	inc	r0
      00094D 74 0A            [12] 2230 	mov	a,#0x0a
      00094F 26               [12] 2231 	add	a,@r0
      000950 FB               [12] 2232 	mov	r3,a
      000951 E4               [12] 2233 	clr	a
      000952 08               [12] 2234 	inc	r0
      000953 36               [12] 2235 	addc	a,@r0
      000954 FC               [12] 2236 	mov	r4,a
      000955 08               [12] 2237 	inc	r0
      000956 86 07            [24] 2238 	mov	ar7,@r0
      000958 8B 82            [24] 2239 	mov	dpl,r3
      00095A 8C 83            [24] 2240 	mov	dph,r4
      00095C 8F F0            [24] 2241 	mov	b,r7
      00095E 12r00r00         [24] 2242 	lcall	__gptrget
      000961 F5 82            [12] 2243 	mov	dpl,a
      000963 C0 06            [24] 2244 	push	ar6
      000965 C0 05            [24] 2245 	push	ar5
      000967 12r00r6B         [24] 2246 	lcall	_vga_setFrontColor
                                   2247 ;	vt100.c:294: vga_setBackColor(t->back_color); 
      00096A A8*00            [24] 2248 	mov	r0,_bp
      00096C 08               [12] 2249 	inc	r0
      00096D 74 09            [12] 2250 	mov	a,#0x09
      00096F 26               [12] 2251 	add	a,@r0
      000970 FB               [12] 2252 	mov	r3,a
      000971 E4               [12] 2253 	clr	a
      000972 08               [12] 2254 	inc	r0
      000973 36               [12] 2255 	addc	a,@r0
      000974 FC               [12] 2256 	mov	r4,a
      000975 08               [12] 2257 	inc	r0
      000976 86 07            [24] 2258 	mov	ar7,@r0
      000978 8B 82            [24] 2259 	mov	dpl,r3
      00097A 8C 83            [24] 2260 	mov	dph,r4
      00097C 8F F0            [24] 2261 	mov	b,r7
      00097E 12r00r00         [24] 2262 	lcall	__gptrget
      000981 F5 82            [12] 2263 	mov	dpl,a
      000983 12r00r5F         [24] 2264 	lcall	_vga_setBackColor
      000986 D0 05            [24] 2265 	pop	ar5
      000988 D0 06            [24] 2266 	pop	ar6
                                   2267 ;	vt100.c:295: vga_drawChar(x, y, ch);
      00098A E5*00            [12] 2268 	mov	a,_bp
      00098C 24 FD            [12] 2269 	add	a,#0xfd
      00098E F8               [12] 2270 	mov	r0,a
      00098F E6               [12] 2271 	mov	a,@r0
      000990 C0 E0            [24] 2272 	push	acc
      000992 C0 06            [24] 2273 	push	ar6
      000994 8D 82            [24] 2274 	mov	dpl,r5
      000996 12r00r01         [24] 2275 	lcall	_vga_drawChar
      000999 15 81            [12] 2276 	dec	sp
      00099B 15 81            [12] 2277 	dec	sp
                                   2278 ;	vt100.c:298: _vt100_move(t, 1, 0); 
      00099D E4               [12] 2279 	clr	a
      00099E C0 E0            [24] 2280 	push	acc
      0009A0 C0 E0            [24] 2281 	push	acc
      0009A2 04               [12] 2282 	inc	a
      0009A3 C0 E0            [24] 2283 	push	acc
      0009A5 E4               [12] 2284 	clr	a
      0009A6 C0 E0            [24] 2285 	push	acc
      0009A8 A8*00            [24] 2286 	mov	r0,_bp
      0009AA 08               [12] 2287 	inc	r0
      0009AB 86 82            [24] 2288 	mov	dpl,@r0
      0009AD 08               [12] 2289 	inc	r0
      0009AE 86 83            [24] 2290 	mov	dph,@r0
      0009B0 08               [12] 2291 	inc	r0
      0009B1 86 F0            [24] 2292 	mov	b,@r0
      0009B3 12r05rA5         [24] 2293 	lcall	__vt100_move
      0009B6 E5 81            [12] 2294 	mov	a,sp
      0009B8 24 FC            [12] 2295 	add	a,#0xfc
      0009BA F5 81            [12] 2296 	mov	sp,a
                                   2297 ;	vt100.c:299: _vt100_drawCursor(t); 
      0009BC A8*00            [24] 2298 	mov	r0,_bp
      0009BE 08               [12] 2299 	inc	r0
      0009BF 86 82            [24] 2300 	mov	dpl,@r0
      0009C1 08               [12] 2301 	inc	r0
      0009C2 86 83            [24] 2302 	mov	dph,@r0
      0009C4 08               [12] 2303 	inc	r0
      0009C5 86 F0            [24] 2304 	mov	b,@r0
      0009C7 12r08r49         [24] 2305 	lcall	__vt100_drawCursor
      0009CA                       2306 00104$:
                                   2307 ;	vt100.c:300: }
      0009CA 85*00 81         [24] 2308 	mov	sp,_bp
      0009CD D0*00            [24] 2309 	pop	_bp
      0009CF 22               [24] 2310 	ret
                                   2311 ;------------------------------------------------------------
                                   2312 ;Allocation info for local variables in function '_st_command_arg'
                                   2313 ;------------------------------------------------------------
                                   2314 ;ev                        Allocated to stack - _bp -3
                                   2315 ;arg                       Allocated to stack - _bp -4
                                   2316 ;term                      Allocated to stack - _bp +1
                                   2317 ;__2621440002              Allocated to registers 
                                   2318 ;__2621440003              Allocated to stack - _bp +6
                                   2319 ;c                         Allocated to registers 
                                   2320 ;sloc0                     Allocated to stack - _bp +10
                                   2321 ;sloc1                     Allocated to stack - _bp +4
                                   2322 ;------------------------------------------------------------
                                   2323 ;	vt100.c:302: STATE(_st_command_arg, term, ev, arg) {
                                   2324 ;	-----------------------------------------
                                   2325 ;	 function _st_command_arg
                                   2326 ;	-----------------------------------------
      0009D0                       2327 __st_command_arg:
      0009D0 C0*00            [24] 2328 	push	_bp
      0009D2 85 81*00         [24] 2329 	mov	_bp,sp
      0009D5 C0 82            [24] 2330 	push	dpl
      0009D7 C0 83            [24] 2331 	push	dph
      0009D9 C0 F0            [24] 2332 	push	b
      0009DB E5 81            [12] 2333 	mov	a,sp
      0009DD 24 04            [12] 2334 	add	a,#0x04
      0009DF F5 81            [12] 2335 	mov	sp,a
                                   2336 ;	vt100.c:303: switch(ev){
      0009E1 E5*00            [12] 2337 	mov	a,_bp
      0009E3 24 FD            [12] 2338 	add	a,#0xfd
      0009E5 F8               [12] 2339 	mov	r0,a
      0009E6 B6 01 02         [24] 2340 	cjne	@r0,#0x01,00137$
      0009E9 80 03            [24] 2341 	sjmp	00138$
      0009EB                       2342 00137$:
      0009EB 02r0BrA4         [24] 2343 	ljmp	00113$
      0009EE                       2344 00138$:
                                   2345 ;	vt100.c:305: if(isdigit(arg)){ // a digit argument
      0009EE E5*00            [12] 2346 	mov	a,_bp
      0009F0 24 FC            [12] 2347 	add	a,#0xfc
      0009F2 F8               [12] 2348 	mov	r0,a
      0009F3 E5*00            [12] 2349 	mov	a,_bp
      0009F5 24 06            [12] 2350 	add	a,#0x06
      0009F7 F9               [12] 2351 	mov	r1,a
      0009F8 E6               [12] 2352 	mov	a,@r0
      0009F9 F7               [12] 2353 	mov	@r1,a
      0009FA 09               [12] 2354 	inc	r1
      0009FB 77 00            [12] 2355 	mov	@r1,#0x00
      0009FD E5*00            [12] 2356 	mov	a,_bp
      0009FF 24 06            [12] 2357 	add	a,#0x06
      000A01 F8               [12] 2358 	mov	r0,a
      000A02 86 02            [24] 2359 	mov	ar2,@r0
      000A04 08               [12] 2360 	inc	r0
      000A05 86 07            [24] 2361 	mov	ar7,@r0
                                   2362 ;	c:\program files\sdcc\include\ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      000A07 BA 30 00         [24] 2363 	cjne	r2,#0x30,00139$
      000A0A                       2364 00139$:
      000A0A 92*00            [24] 2365 	mov	b0,c
      000A0C 50 03            [24] 2366 	jnc	00140$
      000A0E 02r0ArA7         [24] 2367 	ljmp	00109$
      000A11                       2368 00140$:
      000A11 EA               [12] 2369 	mov	a,r2
      000A12 24 C6            [12] 2370 	add	a,#0xff - 0x39
      000A14 92*00            [24] 2371 	mov	b0,c
      000A16 50 03            [24] 2372 	jnc	00141$
      000A18 02r0ArA7         [24] 2373 	ljmp	00109$
      000A1B                       2374 00141$:
                                   2375 ;	vt100.c:306: term->args[term->narg] = term->args[term->narg] * 10 + (arg - '0');
      000A1B A8*00            [24] 2376 	mov	r0,_bp
      000A1D 08               [12] 2377 	inc	r0
      000A1E 74 0D            [12] 2378 	mov	a,#0x0d
      000A20 26               [12] 2379 	add	a,@r0
      000A21 FA               [12] 2380 	mov	r2,a
      000A22 E4               [12] 2381 	clr	a
      000A23 08               [12] 2382 	inc	r0
      000A24 36               [12] 2383 	addc	a,@r0
      000A25 FB               [12] 2384 	mov	r3,a
      000A26 08               [12] 2385 	inc	r0
      000A27 86 04            [24] 2386 	mov	ar4,@r0
      000A29 A8*00            [24] 2387 	mov	r0,_bp
      000A2B 08               [12] 2388 	inc	r0
      000A2C 74 0C            [12] 2389 	mov	a,#0x0c
      000A2E 26               [12] 2390 	add	a,@r0
      000A2F FD               [12] 2391 	mov	r5,a
      000A30 E4               [12] 2392 	clr	a
      000A31 08               [12] 2393 	inc	r0
      000A32 36               [12] 2394 	addc	a,@r0
      000A33 FE               [12] 2395 	mov	r6,a
      000A34 08               [12] 2396 	inc	r0
      000A35 86 07            [24] 2397 	mov	ar7,@r0
      000A37 8D 82            [24] 2398 	mov	dpl,r5
      000A39 8E 83            [24] 2399 	mov	dph,r6
      000A3B 8F F0            [24] 2400 	mov	b,r7
      000A3D 12r00r00         [24] 2401 	lcall	__gptrget
      000A40 25 E0            [12] 2402 	add	a,acc
      000A42 2A               [12] 2403 	add	a,r2
      000A43 FA               [12] 2404 	mov	r2,a
      000A44 E4               [12] 2405 	clr	a
      000A45 3B               [12] 2406 	addc	a,r3
      000A46 FB               [12] 2407 	mov	r3,a
      000A47 8A 82            [24] 2408 	mov	dpl,r2
      000A49 8B 83            [24] 2409 	mov	dph,r3
      000A4B 8C F0            [24] 2410 	mov	b,r4
      000A4D 12r00r00         [24] 2411 	lcall	__gptrget
      000A50 FE               [12] 2412 	mov	r6,a
      000A51 A3               [24] 2413 	inc	dptr
      000A52 12r00r00         [24] 2414 	lcall	__gptrget
      000A55 FF               [12] 2415 	mov	r7,a
      000A56 C0 04            [24] 2416 	push	ar4
      000A58 C0 03            [24] 2417 	push	ar3
      000A5A C0 02            [24] 2418 	push	ar2
      000A5C C0 06            [24] 2419 	push	ar6
      000A5E C0 07            [24] 2420 	push	ar7
      000A60 90 00 0A         [24] 2421 	mov	dptr,#0x000a
      000A63 12r00r00         [24] 2422 	lcall	__mulint
      000A66 C8               [12] 2423 	xch	a,r0
      000A67 E5*00            [12] 2424 	mov	a,_bp
      000A69 24 04            [12] 2425 	add	a,#0x04
      000A6B C8               [12] 2426 	xch	a,r0
      000A6C A6 82            [24] 2427 	mov	@r0,dpl
      000A6E 08               [12] 2428 	inc	r0
      000A6F A6 83            [24] 2429 	mov	@r0,dph
      000A71 15 81            [12] 2430 	dec	sp
      000A73 15 81            [12] 2431 	dec	sp
      000A75 D0 02            [24] 2432 	pop	ar2
      000A77 D0 03            [24] 2433 	pop	ar3
      000A79 D0 04            [24] 2434 	pop	ar4
      000A7B E5*00            [12] 2435 	mov	a,_bp
      000A7D 24 06            [12] 2436 	add	a,#0x06
      000A7F F8               [12] 2437 	mov	r0,a
      000A80 E6               [12] 2438 	mov	a,@r0
      000A81 24 D0            [12] 2439 	add	a,#0xd0
      000A83 FD               [12] 2440 	mov	r5,a
      000A84 08               [12] 2441 	inc	r0
      000A85 E6               [12] 2442 	mov	a,@r0
      000A86 34 FF            [12] 2443 	addc	a,#0xff
      000A88 FF               [12] 2444 	mov	r7,a
      000A89 E5*00            [12] 2445 	mov	a,_bp
      000A8B 24 04            [12] 2446 	add	a,#0x04
      000A8D F8               [12] 2447 	mov	r0,a
      000A8E ED               [12] 2448 	mov	a,r5
      000A8F 26               [12] 2449 	add	a,@r0
      000A90 FD               [12] 2450 	mov	r5,a
      000A91 EF               [12] 2451 	mov	a,r7
      000A92 08               [12] 2452 	inc	r0
      000A93 36               [12] 2453 	addc	a,@r0
      000A94 FF               [12] 2454 	mov	r7,a
      000A95 8A 82            [24] 2455 	mov	dpl,r2
      000A97 8B 83            [24] 2456 	mov	dph,r3
      000A99 8C F0            [24] 2457 	mov	b,r4
      000A9B ED               [12] 2458 	mov	a,r5
      000A9C 12r00r00         [24] 2459 	lcall	__gptrput
      000A9F A3               [24] 2460 	inc	dptr
      000AA0 EF               [12] 2461 	mov	a,r7
      000AA1 12r00r00         [24] 2462 	lcall	__gptrput
      000AA4 02r0BrA4         [24] 2463 	ljmp	00113$
      000AA7                       2464 00109$:
                                   2465 ;	vt100.c:307: } else if(arg == ';') { // separator
      000AA7 E5*00            [12] 2466 	mov	a,_bp
      000AA9 24 FC            [12] 2467 	add	a,#0xfc
      000AAB F8               [12] 2468 	mov	r0,a
      000AAC B6 3B 26         [24] 2469 	cjne	@r0,#0x3b,00106$
                                   2470 ;	vt100.c:308: term->narg++;
      000AAF A8*00            [24] 2471 	mov	r0,_bp
      000AB1 08               [12] 2472 	inc	r0
      000AB2 74 0C            [12] 2473 	mov	a,#0x0c
      000AB4 26               [12] 2474 	add	a,@r0
      000AB5 FD               [12] 2475 	mov	r5,a
      000AB6 E4               [12] 2476 	clr	a
      000AB7 08               [12] 2477 	inc	r0
      000AB8 36               [12] 2478 	addc	a,@r0
      000AB9 FE               [12] 2479 	mov	r6,a
      000ABA 08               [12] 2480 	inc	r0
      000ABB 86 07            [24] 2481 	mov	ar7,@r0
      000ABD 8D 82            [24] 2482 	mov	dpl,r5
      000ABF 8E 83            [24] 2483 	mov	dph,r6
      000AC1 8F F0            [24] 2484 	mov	b,r7
      000AC3 12r00r00         [24] 2485 	lcall	__gptrget
      000AC6 FC               [12] 2486 	mov	r4,a
      000AC7 0C               [12] 2487 	inc	r4
      000AC8 8D 82            [24] 2488 	mov	dpl,r5
      000ACA 8E 83            [24] 2489 	mov	dph,r6
      000ACC 8F F0            [24] 2490 	mov	b,r7
      000ACE EC               [12] 2491 	mov	a,r4
      000ACF 12r00r00         [24] 2492 	lcall	__gptrput
      000AD2 02r0BrA4         [24] 2493 	ljmp	00113$
      000AD5                       2494 00106$:
                                   2495 ;	vt100.c:311: term->narg++;
      000AD5 A8*00            [24] 2496 	mov	r0,_bp
      000AD7 08               [12] 2497 	inc	r0
      000AD8 74 0C            [12] 2498 	mov	a,#0x0c
      000ADA 26               [12] 2499 	add	a,@r0
      000ADB FD               [12] 2500 	mov	r5,a
      000ADC E4               [12] 2501 	clr	a
      000ADD 08               [12] 2502 	inc	r0
      000ADE 36               [12] 2503 	addc	a,@r0
      000ADF FE               [12] 2504 	mov	r6,a
      000AE0 08               [12] 2505 	inc	r0
      000AE1 86 07            [24] 2506 	mov	ar7,@r0
      000AE3 8D 82            [24] 2507 	mov	dpl,r5
      000AE5 8E 83            [24] 2508 	mov	dph,r6
      000AE7 8F F0            [24] 2509 	mov	b,r7
      000AE9 12r00r00         [24] 2510 	lcall	__gptrget
      000AEC FC               [12] 2511 	mov	r4,a
      000AED 0C               [12] 2512 	inc	r4
      000AEE 8D 82            [24] 2513 	mov	dpl,r5
      000AF0 8E 83            [24] 2514 	mov	dph,r6
      000AF2 8F F0            [24] 2515 	mov	b,r7
      000AF4 EC               [12] 2516 	mov	a,r4
      000AF5 12r00r00         [24] 2517 	lcall	__gptrput
                                   2518 ;	vt100.c:312: if(term->ret_state){
      000AF8 A8*00            [24] 2519 	mov	r0,_bp
      000AFA 08               [12] 2520 	inc	r0
      000AFB 74 1A            [12] 2521 	mov	a,#0x1a
      000AFD 26               [12] 2522 	add	a,@r0
      000AFE FE               [12] 2523 	mov	r6,a
      000AFF E4               [12] 2524 	clr	a
      000B00 08               [12] 2525 	inc	r0
      000B01 36               [12] 2526 	addc	a,@r0
      000B02 FD               [12] 2527 	mov	r5,a
      000B03 08               [12] 2528 	inc	r0
      000B04 86 07            [24] 2529 	mov	ar7,@r0
      000B06 8E 82            [24] 2530 	mov	dpl,r6
      000B08 8D 83            [24] 2531 	mov	dph,r5
      000B0A 8F F0            [24] 2532 	mov	b,r7
      000B0C 12r00r00         [24] 2533 	lcall	__gptrget
      000B0F FE               [12] 2534 	mov	r6,a
      000B10 A3               [24] 2535 	inc	dptr
      000B11 12r00r00         [24] 2536 	lcall	__gptrget
      000B14 FF               [12] 2537 	mov	r7,a
      000B15 4E               [12] 2538 	orl	a,r6
      000B16 60 1F            [24] 2539 	jz	00103$
                                   2540 ;	vt100.c:313: term->state = term->ret_state;
      000B18 A8*00            [24] 2541 	mov	r0,_bp
      000B1A 08               [12] 2542 	inc	r0
      000B1B 74 16            [12] 2543 	mov	a,#0x16
      000B1D 26               [12] 2544 	add	a,@r0
      000B1E FB               [12] 2545 	mov	r3,a
      000B1F E4               [12] 2546 	clr	a
      000B20 08               [12] 2547 	inc	r0
      000B21 36               [12] 2548 	addc	a,@r0
      000B22 FC               [12] 2549 	mov	r4,a
      000B23 08               [12] 2550 	inc	r0
      000B24 86 05            [24] 2551 	mov	ar5,@r0
      000B26 8B 82            [24] 2552 	mov	dpl,r3
      000B28 8C 83            [24] 2553 	mov	dph,r4
      000B2A 8D F0            [24] 2554 	mov	b,r5
      000B2C EE               [12] 2555 	mov	a,r6
      000B2D 12r00r00         [24] 2556 	lcall	__gptrput
      000B30 A3               [24] 2557 	inc	dptr
      000B31 EF               [12] 2558 	mov	a,r7
      000B32 12r00r00         [24] 2559 	lcall	__gptrput
      000B35 80 1F            [24] 2560 	sjmp	00104$
      000B37                       2561 00103$:
                                   2562 ;	vt100.c:316: term->state = _st_idle;
      000B37 A8*00            [24] 2563 	mov	r0,_bp
      000B39 08               [12] 2564 	inc	r0
      000B3A 74 16            [12] 2565 	mov	a,#0x16
      000B3C 26               [12] 2566 	add	a,@r0
      000B3D FD               [12] 2567 	mov	r5,a
      000B3E E4               [12] 2568 	clr	a
      000B3F 08               [12] 2569 	inc	r0
      000B40 36               [12] 2570 	addc	a,@r0
      000B41 FE               [12] 2571 	mov	r6,a
      000B42 08               [12] 2572 	inc	r0
      000B43 86 07            [24] 2573 	mov	ar7,@r0
      000B45 8D 82            [24] 2574 	mov	dpl,r5
      000B47 8E 83            [24] 2575 	mov	dph,r6
      000B49 8F F0            [24] 2576 	mov	b,r7
      000B4B 74r23            [12] 2577 	mov	a,#__st_idle
      000B4D 12r00r00         [24] 2578 	lcall	__gptrput
      000B50 A3               [24] 2579 	inc	dptr
      000B51 74s24            [12] 2580 	mov	a,#(__st_idle >> 8)
      000B53 12r00r00         [24] 2581 	lcall	__gptrput
      000B56                       2582 00104$:
                                   2583 ;	vt100.c:319: term->state(term, ev, arg);
      000B56 A8*00            [24] 2584 	mov	r0,_bp
      000B58 08               [12] 2585 	inc	r0
      000B59 74 16            [12] 2586 	mov	a,#0x16
      000B5B 26               [12] 2587 	add	a,@r0
      000B5C FD               [12] 2588 	mov	r5,a
      000B5D E4               [12] 2589 	clr	a
      000B5E 08               [12] 2590 	inc	r0
      000B5F 36               [12] 2591 	addc	a,@r0
      000B60 FE               [12] 2592 	mov	r6,a
      000B61 08               [12] 2593 	inc	r0
      000B62 86 07            [24] 2594 	mov	ar7,@r0
      000B64 8D 82            [24] 2595 	mov	dpl,r5
      000B66 8E 83            [24] 2596 	mov	dph,r6
      000B68 8F F0            [24] 2597 	mov	b,r7
      000B6A 12r00r00         [24] 2598 	lcall	__gptrget
      000B6D FD               [12] 2599 	mov	r5,a
      000B6E A3               [24] 2600 	inc	dptr
      000B6F 12r00r00         [24] 2601 	lcall	__gptrget
      000B72 FE               [12] 2602 	mov	r6,a
      000B73 C0 06            [24] 2603 	push	ar6
      000B75 C0 05            [24] 2604 	push	ar5
      000B77 E5*00            [12] 2605 	mov	a,_bp
      000B79 24 FC            [12] 2606 	add	a,#0xfc
      000B7B F8               [12] 2607 	mov	r0,a
      000B7C E6               [12] 2608 	mov	a,@r0
      000B7D C0 E0            [24] 2609 	push	acc
      000B7F E5*00            [12] 2610 	mov	a,_bp
      000B81 24 FD            [12] 2611 	add	a,#0xfd
      000B83 F8               [12] 2612 	mov	r0,a
      000B84 E6               [12] 2613 	mov	a,@r0
      000B85 C0 E0            [24] 2614 	push	acc
      000B87 12r0Br8C         [24] 2615 	lcall	00145$
      000B8A 80 10            [24] 2616 	sjmp	00146$
      000B8C                       2617 00145$:
      000B8C C0 05            [24] 2618 	push	ar5
      000B8E C0 06            [24] 2619 	push	ar6
      000B90 A8*00            [24] 2620 	mov	r0,_bp
      000B92 08               [12] 2621 	inc	r0
      000B93 86 82            [24] 2622 	mov	dpl,@r0
      000B95 08               [12] 2623 	inc	r0
      000B96 86 83            [24] 2624 	mov	dph,@r0
      000B98 08               [12] 2625 	inc	r0
      000B99 86 F0            [24] 2626 	mov	b,@r0
      000B9B 22               [24] 2627 	ret
      000B9C                       2628 00146$:
      000B9C 15 81            [12] 2629 	dec	sp
      000B9E 15 81            [12] 2630 	dec	sp
      000BA0 D0 05            [24] 2631 	pop	ar5
      000BA2 D0 06            [24] 2632 	pop	ar6
                                   2633 ;	vt100.c:323: }
      000BA4                       2634 00113$:
                                   2635 ;	vt100.c:324: }
      000BA4 85*00 81         [24] 2636 	mov	sp,_bp
      000BA7 D0*00            [24] 2637 	pop	_bp
      000BA9 22               [24] 2638 	ret
                                   2639 ;------------------------------------------------------------
                                   2640 ;Allocation info for local variables in function '_st_esc_question'
                                   2641 ;------------------------------------------------------------
                                   2642 ;ev                        Allocated to stack - _bp -3
                                   2643 ;arg                       Allocated to stack - _bp -4
                                   2644 ;term                      Allocated to registers r5 r6 r7 
                                   2645 ;__2621440005              Allocated to registers 
                                   2646 ;__2621440006              Allocated to registers 
                                   2647 ;c                         Allocated to registers 
                                   2648 ;sloc0                     Allocated to stack - _bp +10
                                   2649 ;sloc1                     Allocated to stack - _bp +1
                                   2650 ;------------------------------------------------------------
                                   2651 ;	vt100.c:326: STATE(_st_esc_question, term, ev, arg) {
                                   2652 ;	-----------------------------------------
                                   2653 ;	 function _st_esc_question
                                   2654 ;	-----------------------------------------
      000BAA                       2655 __st_esc_question:
      000BAA C0*00            [24] 2656 	push	_bp
      000BAC 85 81*00         [24] 2657 	mov	_bp,sp
      000BAF 05 81            [12] 2658 	inc	sp
      000BB1 05 81            [12] 2659 	inc	sp
      000BB3 05 81            [12] 2660 	inc	sp
      000BB5 AD 82            [24] 2661 	mov	r5,dpl
      000BB7 AE 83            [24] 2662 	mov	r6,dph
      000BB9 AF F0            [24] 2663 	mov	r7,b
                                   2664 ;	vt100.c:329: switch(ev){
      000BBB E5*00            [12] 2665 	mov	a,_bp
      000BBD 24 FD            [12] 2666 	add	a,#0xfd
      000BBF F8               [12] 2667 	mov	r0,a
      000BC0 B6 01 02         [24] 2668 	cjne	@r0,#0x01,00172$
      000BC3 80 03            [24] 2669 	sjmp	00173$
      000BC5                       2670 00172$:
      000BC5 02r0Dr79         [24] 2671 	ljmp	00126$
      000BC8                       2672 00173$:
                                   2673 ;	vt100.c:331: if(isdigit(arg)){ // start of an argument
      000BC8 E5*00            [12] 2674 	mov	a,_bp
      000BCA 24 FC            [12] 2675 	add	a,#0xfc
      000BCC F8               [12] 2676 	mov	r0,a
      000BCD 86 04            [24] 2677 	mov	ar4,@r0
                                   2678 ;	c:\program files\sdcc\include\ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      000BCF BC 30 00         [24] 2679 	cjne	r4,#0x30,00174$
      000BD2                       2680 00174$:
      000BD2 92*00            [24] 2681 	mov	b0,c
      000BD4 40 67            [24] 2682 	jc	00122$
      000BD6 EC               [12] 2683 	mov	a,r4
      000BD7 24 C6            [12] 2684 	add	a,#0xff - 0x39
      000BD9 92*00            [24] 2685 	mov	b0,c
      000BDB 40 60            [24] 2686 	jc	00122$
                                   2687 ;	vt100.c:332: term->ret_state = _st_esc_question; 
      000BDD 74 1A            [12] 2688 	mov	a,#0x1a
      000BDF 2D               [12] 2689 	add	a,r5
      000BE0 FA               [12] 2690 	mov	r2,a
      000BE1 E4               [12] 2691 	clr	a
      000BE2 3E               [12] 2692 	addc	a,r6
      000BE3 FB               [12] 2693 	mov	r3,a
      000BE4 8F 04            [24] 2694 	mov	ar4,r7
      000BE6 8A 82            [24] 2695 	mov	dpl,r2
      000BE8 8B 83            [24] 2696 	mov	dph,r3
      000BEA 8C F0            [24] 2697 	mov	b,r4
      000BEC 74rAA            [12] 2698 	mov	a,#__st_esc_question
      000BEE 12r00r00         [24] 2699 	lcall	__gptrput
      000BF1 A3               [24] 2700 	inc	dptr
      000BF2 74s0B            [12] 2701 	mov	a,#(__st_esc_question >> 8)
      000BF4 12r00r00         [24] 2702 	lcall	__gptrput
                                   2703 ;	vt100.c:333: _st_command_arg(term, ev, arg);
      000BF7 C0 07            [24] 2704 	push	ar7
      000BF9 C0 06            [24] 2705 	push	ar6
      000BFB C0 05            [24] 2706 	push	ar5
      000BFD E5*00            [12] 2707 	mov	a,_bp
      000BFF 24 FC            [12] 2708 	add	a,#0xfc
      000C01 F8               [12] 2709 	mov	r0,a
      000C02 E6               [12] 2710 	mov	a,@r0
      000C03 C0 E0            [24] 2711 	push	acc
      000C05 E5*00            [12] 2712 	mov	a,_bp
      000C07 24 FD            [12] 2713 	add	a,#0xfd
      000C09 F8               [12] 2714 	mov	r0,a
      000C0A E6               [12] 2715 	mov	a,@r0
      000C0B C0 E0            [24] 2716 	push	acc
      000C0D 8D 82            [24] 2717 	mov	dpl,r5
      000C0F 8E 83            [24] 2718 	mov	dph,r6
      000C11 8F F0            [24] 2719 	mov	b,r7
      000C13 12r09rD0         [24] 2720 	lcall	__st_command_arg
      000C16 15 81            [12] 2721 	dec	sp
      000C18 15 81            [12] 2722 	dec	sp
      000C1A D0 05            [24] 2723 	pop	ar5
      000C1C D0 06            [24] 2724 	pop	ar6
      000C1E D0 07            [24] 2725 	pop	ar7
                                   2726 ;	vt100.c:334: term->state = _st_command_arg;
      000C20 74 16            [12] 2727 	mov	a,#0x16
      000C22 2D               [12] 2728 	add	a,r5
      000C23 FA               [12] 2729 	mov	r2,a
      000C24 E4               [12] 2730 	clr	a
      000C25 3E               [12] 2731 	addc	a,r6
      000C26 FB               [12] 2732 	mov	r3,a
      000C27 8F 04            [24] 2733 	mov	ar4,r7
      000C29 8A 82            [24] 2734 	mov	dpl,r2
      000C2B 8B 83            [24] 2735 	mov	dph,r3
      000C2D 8C F0            [24] 2736 	mov	b,r4
      000C2F 74rD0            [12] 2737 	mov	a,#__st_command_arg
      000C31 12r00r00         [24] 2738 	lcall	__gptrput
      000C34 A3               [24] 2739 	inc	dptr
      000C35 74s09            [12] 2740 	mov	a,#(__st_command_arg >> 8)
      000C37 12r00r00         [24] 2741 	lcall	__gptrput
      000C3A 02r0Dr79         [24] 2742 	ljmp	00126$
      000C3D                       2743 00122$:
                                   2744 ;	vt100.c:335: } else if(arg == ';'){ // arg separator. 
      000C3D E5*00            [12] 2745 	mov	a,_bp
      000C3F 24 FC            [12] 2746 	add	a,#0xfc
      000C41 F8               [12] 2747 	mov	r0,a
      000C42 B6 3B 03         [24] 2748 	cjne	@r0,#0x3b,00177$
      000C45 02r0Dr79         [24] 2749 	ljmp	00126$
      000C48                       2750 00177$:
                                   2751 ;	vt100.c:338: switch(arg) {
      000C48 E5*00            [12] 2752 	mov	a,_bp
      000C4A 24 FC            [12] 2753 	add	a,#0xfc
      000C4C F8               [12] 2754 	mov	r0,a
      000C4D E4               [12] 2755 	clr	a
      000C4E B6 68 01         [24] 2756 	cjne	@r0,#0x68,00178$
      000C51 04               [12] 2757 	inc	a
      000C52                       2758 00178$:
      000C52 FC               [12] 2759 	mov	r4,a
      000C53 70 18            [24] 2760 	jnz	00103$
      000C55 E5*00            [12] 2761 	mov	a,_bp
      000C57 24 FC            [12] 2762 	add	a,#0xfc
      000C59 F8               [12] 2763 	mov	r0,a
      000C5A B6 69 03         [24] 2764 	cjne	@r0,#0x69,00181$
      000C5D 02r0Dr47         [24] 2765 	ljmp	00116$
      000C60                       2766 00181$:
      000C60 E5*00            [12] 2767 	mov	a,_bp
      000C62 24 FC            [12] 2768 	add	a,#0xfc
      000C64 F8               [12] 2769 	mov	r0,a
      000C65 B6 6C 02         [24] 2770 	cjne	@r0,#0x6c,00182$
      000C68 80 03            [24] 2771 	sjmp	00183$
      000C6A                       2772 00182$:
      000C6A 02r0Dr47         [24] 2773 	ljmp	00116$
      000C6D                       2774 00183$:
                                   2775 ;	vt100.c:341: case 'h': {
      000C6D                       2776 00103$:
                                   2777 ;	vt100.c:343: switch(term->args[0]){
      000C6D C0 04            [24] 2778 	push	ar4
      000C6F 74 0D            [12] 2779 	mov	a,#0x0d
      000C71 2D               [12] 2780 	add	a,r5
      000C72 FA               [12] 2781 	mov	r2,a
      000C73 E4               [12] 2782 	clr	a
      000C74 3E               [12] 2783 	addc	a,r6
      000C75 FB               [12] 2784 	mov	r3,a
      000C76 8F 04            [24] 2785 	mov	ar4,r7
      000C78 8A 82            [24] 2786 	mov	dpl,r2
      000C7A 8B 83            [24] 2787 	mov	dph,r3
      000C7C 8C F0            [24] 2788 	mov	b,r4
      000C7E 12r00r00         [24] 2789 	lcall	__gptrget
      000C81 FA               [12] 2790 	mov	r2,a
      000C82 A3               [24] 2791 	inc	dptr
      000C83 12r00r00         [24] 2792 	lcall	__gptrget
      000C86 FB               [12] 2793 	mov	r3,a
      000C87 C3               [12] 2794 	clr	c
      000C88 74 09            [12] 2795 	mov	a,#0x09
      000C8A 9A               [12] 2796 	subb	a,r2
      000C8B E4               [12] 2797 	clr	a
      000C8C 9B               [12] 2798 	subb	a,r3
      000C8D D0 04            [24] 2799 	pop	ar4
      000C8F 50 03            [24] 2800 	jnc	00184$
      000C91 02r0Dr2B         [24] 2801 	ljmp	00113$
      000C94                       2802 00184$:
      000C94 EA               [12] 2803 	mov	a,r2
      000C95 24 0A            [12] 2804 	add	a,#(00185$-3-.)
      000C97 83               [24] 2805 	movc	a,@a+pc
      000C98 F5 82            [12] 2806 	mov	dpl,a
      000C9A EA               [12] 2807 	mov	a,r2
      000C9B 24 0E            [12] 2808 	add	a,#(00186$-3-.)
      000C9D 83               [24] 2809 	movc	a,@a+pc
      000C9E F5 83            [12] 2810 	mov	dph,a
      000CA0 E4               [12] 2811 	clr	a
      000CA1 73               [24] 2812 	jmp	@a+dptr
      000CA2                       2813 00185$:
      000CA2r2B                    2814 	.db	00113$
      000CA3r2B                    2815 	.db	00113$
      000CA4r2B                    2816 	.db	00113$
      000CA5r2B                    2817 	.db	00113$
      000CA6r2B                    2818 	.db	00113$
      000CA7r2B                    2819 	.db	00113$
      000CA8rB6                    2820 	.db	00109$
      000CA9rF3                    2821 	.db	00110$
      000CAAr2B                    2822 	.db	00113$
      000CABr2B                    2823 	.db	00113$
      000CAC                       2824 00186$:
      000CACs0D                    2825 	.db	00113$>>8
      000CADs0D                    2826 	.db	00113$>>8
      000CAEs0D                    2827 	.db	00113$>>8
      000CAFs0D                    2828 	.db	00113$>>8
      000CB0s0D                    2829 	.db	00113$>>8
      000CB1s0D                    2830 	.db	00113$>>8
      000CB2s0C                    2831 	.db	00109$>>8
      000CB3s0C                    2832 	.db	00110$>>8
      000CB4s0D                    2833 	.db	00113$>>8
      000CB5s0D                    2834 	.db	00113$>>8
                                   2835 ;	vt100.c:369: case 6: {
      000CB6                       2836 00109$:
                                   2837 ;	vt100.c:372: term->flags.origin_mode = (arg == 'h')?1:0; 
      000CB6 A8*00            [24] 2838 	mov	r0,_bp
      000CB8 08               [12] 2839 	inc	r0
      000CB9 A6 05            [24] 2840 	mov	@r0,ar5
      000CBB 08               [12] 2841 	inc	r0
      000CBC A6 06            [24] 2842 	mov	@r0,ar6
      000CBE 08               [12] 2843 	inc	r0
      000CBF A6 07            [24] 2844 	mov	@r0,ar7
      000CC1 EC               [12] 2845 	mov	a,r4
      000CC2 60 06            [24] 2846 	jz	00131$
      000CC4 7A 01            [12] 2847 	mov	r2,#0x01
      000CC6 7B 00            [12] 2848 	mov	r3,#0x00
      000CC8 80 04            [24] 2849 	sjmp	00132$
      000CCA                       2850 00131$:
      000CCA 7A 00            [12] 2851 	mov	r2,#0x00
      000CCC 7B 00            [12] 2852 	mov	r3,#0x00
      000CCE                       2853 00132$:
      000CCE A8*00            [24] 2854 	mov	r0,_bp
      000CD0 08               [12] 2855 	inc	r0
      000CD1 86 82            [24] 2856 	mov	dpl,@r0
      000CD3 08               [12] 2857 	inc	r0
      000CD4 86 83            [24] 2858 	mov	dph,@r0
      000CD6 08               [12] 2859 	inc	r0
      000CD7 86 F0            [24] 2860 	mov	b,@r0
      000CD9 EA               [12] 2861 	mov	a,r2
      000CDA 2A               [12] 2862 	add	a,r2
      000CDB 25 E0            [12] 2863 	add	a,acc
      000CDD 54 04            [12] 2864 	anl	a,#0x04
      000CDF C0 F0            [24] 2865 	push	b
      000CE1 C0 E0            [24] 2866 	push	acc
      000CE3 12r00r00         [24] 2867 	lcall	__gptrget
      000CE6 D0 F0            [24] 2868 	pop	b
      000CE8 54 FB            [12] 2869 	anl	a,#0xfb
      000CEA 45 F0            [12] 2870 	orl	a,b
      000CEC D0 F0            [24] 2871 	pop	b
      000CEE 12r00r00         [24] 2872 	lcall	__gptrput
                                   2873 ;	vt100.c:373: break;
                                   2874 ;	vt100.c:375: case 7: {
      000CF1 80 38            [24] 2875 	sjmp	00113$
      000CF3                       2876 00110$:
                                   2877 ;	vt100.c:378: term->flags.cursor_wrap = (arg == 'h')?1:0; 
      000CF3 A8*00            [24] 2878 	mov	r0,_bp
      000CF5 08               [12] 2879 	inc	r0
      000CF6 A6 05            [24] 2880 	mov	@r0,ar5
      000CF8 08               [12] 2881 	inc	r0
      000CF9 A6 06            [24] 2882 	mov	@r0,ar6
      000CFB 08               [12] 2883 	inc	r0
      000CFC A6 07            [24] 2884 	mov	@r0,ar7
      000CFE EC               [12] 2885 	mov	a,r4
      000CFF 60 06            [24] 2886 	jz	00133$
      000D01 7B 01            [12] 2887 	mov	r3,#0x01
      000D03 7C 00            [12] 2888 	mov	r4,#0x00
      000D05 80 04            [24] 2889 	sjmp	00134$
      000D07                       2890 00133$:
      000D07 7B 00            [12] 2891 	mov	r3,#0x00
      000D09 7C 00            [12] 2892 	mov	r4,#0x00
      000D0B                       2893 00134$:
      000D0B A8*00            [24] 2894 	mov	r0,_bp
      000D0D 08               [12] 2895 	inc	r0
      000D0E 86 82            [24] 2896 	mov	dpl,@r0
      000D10 08               [12] 2897 	inc	r0
      000D11 86 83            [24] 2898 	mov	dph,@r0
      000D13 08               [12] 2899 	inc	r0
      000D14 86 F0            [24] 2900 	mov	b,@r0
      000D16 EB               [12] 2901 	mov	a,r3
      000D17 54 01            [12] 2902 	anl	a,#0x01
      000D19 C0 F0            [24] 2903 	push	b
      000D1B C0 E0            [24] 2904 	push	acc
      000D1D 12r00r00         [24] 2905 	lcall	__gptrget
      000D20 D0 F0            [24] 2906 	pop	b
      000D22 54 FE            [12] 2907 	anl	a,#0xfe
      000D24 45 F0            [12] 2908 	orl	a,b
      000D26 D0 F0            [24] 2909 	pop	b
      000D28 12r00r00         [24] 2910 	lcall	__gptrput
                                   2911 ;	vt100.c:392: }
      000D2B                       2912 00113$:
                                   2913 ;	vt100.c:393: term->state = _st_idle;
      000D2B 74 16            [12] 2914 	mov	a,#0x16
      000D2D 2D               [12] 2915 	add	a,r5
      000D2E FA               [12] 2916 	mov	r2,a
      000D2F E4               [12] 2917 	clr	a
      000D30 3E               [12] 2918 	addc	a,r6
      000D31 FB               [12] 2919 	mov	r3,a
      000D32 8F 04            [24] 2920 	mov	ar4,r7
      000D34 8A 82            [24] 2921 	mov	dpl,r2
      000D36 8B 83            [24] 2922 	mov	dph,r3
      000D38 8C F0            [24] 2923 	mov	b,r4
      000D3A 74r23            [12] 2924 	mov	a,#__st_idle
      000D3C 12r00r00         [24] 2925 	lcall	__gptrput
      000D3F A3               [24] 2926 	inc	dptr
      000D40 74s24            [12] 2927 	mov	a,#(__st_idle >> 8)
      000D42 12r00r00         [24] 2928 	lcall	__gptrput
                                   2929 ;	vt100.c:394: break; 
                                   2930 ;	vt100.c:398: default:  
      000D45 80 1A            [24] 2931 	sjmp	00117$
      000D47                       2932 00116$:
                                   2933 ;	vt100.c:399: term->state = _st_idle; 
      000D47 74 16            [12] 2934 	mov	a,#0x16
      000D49 2D               [12] 2935 	add	a,r5
      000D4A FA               [12] 2936 	mov	r2,a
      000D4B E4               [12] 2937 	clr	a
      000D4C 3E               [12] 2938 	addc	a,r6
      000D4D FB               [12] 2939 	mov	r3,a
      000D4E 8F 04            [24] 2940 	mov	ar4,r7
      000D50 8A 82            [24] 2941 	mov	dpl,r2
      000D52 8B 83            [24] 2942 	mov	dph,r3
      000D54 8C F0            [24] 2943 	mov	b,r4
      000D56 74r23            [12] 2944 	mov	a,#__st_idle
      000D58 12r00r00         [24] 2945 	lcall	__gptrput
      000D5B A3               [24] 2946 	inc	dptr
      000D5C 74s24            [12] 2947 	mov	a,#(__st_idle >> 8)
      000D5E 12r00r00         [24] 2948 	lcall	__gptrput
                                   2949 ;	vt100.c:401: }
      000D61                       2950 00117$:
                                   2951 ;	vt100.c:402: term->state = _st_idle;
      000D61 74 16            [12] 2952 	mov	a,#0x16
      000D63 2D               [12] 2953 	add	a,r5
      000D64 FD               [12] 2954 	mov	r5,a
      000D65 E4               [12] 2955 	clr	a
      000D66 3E               [12] 2956 	addc	a,r6
      000D67 FE               [12] 2957 	mov	r6,a
      000D68 8D 82            [24] 2958 	mov	dpl,r5
      000D6A 8E 83            [24] 2959 	mov	dph,r6
      000D6C 8F F0            [24] 2960 	mov	b,r7
      000D6E 74r23            [12] 2961 	mov	a,#__st_idle
      000D70 12r00r00         [24] 2962 	lcall	__gptrput
      000D73 A3               [24] 2963 	inc	dptr
      000D74 74s24            [12] 2964 	mov	a,#(__st_idle >> 8)
      000D76 12r00r00         [24] 2965 	lcall	__gptrput
                                   2966 ;	vt100.c:405: }
      000D79                       2967 00126$:
                                   2968 ;	vt100.c:406: }
      000D79 85*00 81         [24] 2969 	mov	sp,_bp
      000D7C D0*00            [24] 2970 	pop	_bp
      000D7E 22               [24] 2971 	ret
                                   2972 ;------------------------------------------------------------
                                   2973 ;Allocation info for local variables in function '_st_esc_sq_bracket'
                                   2974 ;------------------------------------------------------------
                                   2975 ;ev                        Allocated to stack - _bp -3
                                   2976 ;arg                       Allocated to stack - _bp -4
                                   2977 ;term                      Allocated to stack - _bp +1
                                   2978 ;__2621440008              Allocated to registers 
                                   2979 ;__2621440009              Allocated to registers 
                                   2980 ;c                         Allocated to registers 
                                   2981 ;n                         Allocated to registers r6 r5 
                                   2982 ;n                         Allocated to registers r6 r5 
                                   2983 ;n                         Allocated to registers r6 r5 
                                   2984 ;n                         Allocated to registers r6 r5 
                                   2985 ;y                         Allocated to registers 
                                   2986 ;x                         Allocated to stack - _bp +12
                                   2987 ;y                         Allocated to stack - _bp +14
                                   2988 ;n                         Allocated to registers r6 r7 
                                   2989 ;c                         Allocated to registers r4 r5 
                                   2990 ;n                         Allocated to stack - _bp +12
                                   2991 ;top_margin                Allocated to registers r7 r6 
                                   2992 ;bottom_margin             Allocated to registers r2 r5 
                                   2993 ;sloc0                     Allocated to stack - _bp +4
                                   2994 ;sloc1                     Allocated to stack - _bp +7
                                   2995 ;sloc2                     Allocated to stack - _bp +9
                                   2996 ;------------------------------------------------------------
                                   2997 ;	vt100.c:408: STATE(_st_esc_sq_bracket, term, ev, arg) {
                                   2998 ;	-----------------------------------------
                                   2999 ;	 function _st_esc_sq_bracket
                                   3000 ;	-----------------------------------------
      000D7F                       3001 __st_esc_sq_bracket:
      000D7F C0*00            [24] 3002 	push	_bp
      000D81 85 81*00         [24] 3003 	mov	_bp,sp
      000D84 C0 82            [24] 3004 	push	dpl
      000D86 C0 83            [24] 3005 	push	dph
      000D88 C0 F0            [24] 3006 	push	b
      000D8A E5 81            [12] 3007 	mov	a,sp
      000D8C 24 0C            [12] 3008 	add	a,#0x0c
      000D8E F5 81            [12] 3009 	mov	sp,a
                                   3010 ;	vt100.c:410: switch(ev){
      000D90 E5*00            [12] 3011 	mov	a,_bp
      000D92 24 FD            [12] 3012 	add	a,#0xfd
      000D94 F8               [12] 3013 	mov	r0,a
      000D95 B6 01 02         [24] 3014 	cjne	@r0,#0x01,00399$
      000D98 80 03            [24] 3015 	sjmp	00400$
      000D9A                       3016 00399$:
      000D9A 02r1Cr62         [24] 3017 	ljmp	00194$
      000D9D                       3018 00400$:
                                   3019 ;	vt100.c:412: if(isdigit(arg)){ // start of an argument
      000D9D E5*00            [12] 3020 	mov	a,_bp
      000D9F 24 FC            [12] 3021 	add	a,#0xfc
      000DA1 F8               [12] 3022 	mov	r0,a
      000DA2 86 04            [24] 3023 	mov	ar4,@r0
                                   3024 ;	c:\program files\sdcc\include\ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      000DA4 BC 30 00         [24] 3025 	cjne	r4,#0x30,00401$
      000DA7                       3026 00401$:
      000DA7 92*00            [24] 3027 	mov	b0,c
      000DA9 40 6A            [24] 3028 	jc	00192$
      000DAB EC               [12] 3029 	mov	a,r4
      000DAC 24 C6            [12] 3030 	add	a,#0xff - 0x39
      000DAE 92*00            [24] 3031 	mov	b0,c
      000DB0 40 63            [24] 3032 	jc	00192$
                                   3033 ;	vt100.c:413: term->ret_state = _st_esc_sq_bracket; 
      000DB2 A8*00            [24] 3034 	mov	r0,_bp
      000DB4 08               [12] 3035 	inc	r0
      000DB5 74 1A            [12] 3036 	mov	a,#0x1a
      000DB7 26               [12] 3037 	add	a,@r0
      000DB8 FA               [12] 3038 	mov	r2,a
      000DB9 E4               [12] 3039 	clr	a
      000DBA 08               [12] 3040 	inc	r0
      000DBB 36               [12] 3041 	addc	a,@r0
      000DBC FB               [12] 3042 	mov	r3,a
      000DBD 08               [12] 3043 	inc	r0
      000DBE 86 04            [24] 3044 	mov	ar4,@r0
      000DC0 8A 82            [24] 3045 	mov	dpl,r2
      000DC2 8B 83            [24] 3046 	mov	dph,r3
      000DC4 8C F0            [24] 3047 	mov	b,r4
      000DC6 74r7F            [12] 3048 	mov	a,#__st_esc_sq_bracket
      000DC8 12r00r00         [24] 3049 	lcall	__gptrput
      000DCB A3               [24] 3050 	inc	dptr
      000DCC 74s0D            [12] 3051 	mov	a,#(__st_esc_sq_bracket >> 8)
      000DCE 12r00r00         [24] 3052 	lcall	__gptrput
                                   3053 ;	vt100.c:414: _st_command_arg(term, ev, arg);
      000DD1 E5*00            [12] 3054 	mov	a,_bp
      000DD3 24 FC            [12] 3055 	add	a,#0xfc
      000DD5 F8               [12] 3056 	mov	r0,a
      000DD6 E6               [12] 3057 	mov	a,@r0
      000DD7 C0 E0            [24] 3058 	push	acc
      000DD9 E5*00            [12] 3059 	mov	a,_bp
      000DDB 24 FD            [12] 3060 	add	a,#0xfd
      000DDD F8               [12] 3061 	mov	r0,a
      000DDE E6               [12] 3062 	mov	a,@r0
      000DDF C0 E0            [24] 3063 	push	acc
      000DE1 A8*00            [24] 3064 	mov	r0,_bp
      000DE3 08               [12] 3065 	inc	r0
      000DE4 86 82            [24] 3066 	mov	dpl,@r0
      000DE6 08               [12] 3067 	inc	r0
      000DE7 86 83            [24] 3068 	mov	dph,@r0
      000DE9 08               [12] 3069 	inc	r0
      000DEA 86 F0            [24] 3070 	mov	b,@r0
      000DEC 12r09rD0         [24] 3071 	lcall	__st_command_arg
      000DEF 15 81            [12] 3072 	dec	sp
      000DF1 15 81            [12] 3073 	dec	sp
                                   3074 ;	vt100.c:415: term->state = _st_command_arg;
      000DF3 A8*00            [24] 3075 	mov	r0,_bp
      000DF5 08               [12] 3076 	inc	r0
      000DF6 74 16            [12] 3077 	mov	a,#0x16
      000DF8 26               [12] 3078 	add	a,@r0
      000DF9 FA               [12] 3079 	mov	r2,a
      000DFA E4               [12] 3080 	clr	a
      000DFB 08               [12] 3081 	inc	r0
      000DFC 36               [12] 3082 	addc	a,@r0
      000DFD FB               [12] 3083 	mov	r3,a
      000DFE 08               [12] 3084 	inc	r0
      000DFF 86 04            [24] 3085 	mov	ar4,@r0
      000E01 8A 82            [24] 3086 	mov	dpl,r2
      000E03 8B 83            [24] 3087 	mov	dph,r3
      000E05 8C F0            [24] 3088 	mov	b,r4
      000E07 74rD0            [12] 3089 	mov	a,#__st_command_arg
      000E09 12r00r00         [24] 3090 	lcall	__gptrput
      000E0C A3               [24] 3091 	inc	dptr
      000E0D 74s09            [12] 3092 	mov	a,#(__st_command_arg >> 8)
      000E0F 12r00r00         [24] 3093 	lcall	__gptrput
      000E12 02r1Cr81         [24] 3094 	ljmp	00200$
      000E15                       3095 00192$:
                                   3096 ;	vt100.c:416: } else if(arg == ';'){ // arg separator. 
      000E15 E5*00            [12] 3097 	mov	a,_bp
      000E17 24 FC            [12] 3098 	add	a,#0xfc
      000E19 F8               [12] 3099 	mov	r0,a
      000E1A B6 3B 03         [24] 3100 	cjne	@r0,#0x3b,00404$
      000E1D 02r1Cr81         [24] 3101 	ljmp	00200$
      000E20                       3102 00404$:
                                   3103 ;	vt100.c:419: switch(arg){
      000E20 E5*00            [12] 3104 	mov	a,_bp
      000E22 24 FC            [12] 3105 	add	a,#0xfc
      000E24 F8               [12] 3106 	mov	r0,a
      000E25 B6 3D 00         [24] 3107 	cjne	@r0,#0x3d,00405$
      000E28                       3108 00405$:
      000E28 50 03            [24] 3109 	jnc	00406$
      000E2A 02r1Cr41         [24] 3110 	ljmp	00186$
      000E2D                       3111 00406$:
      000E2D E5*00            [12] 3112 	mov	a,_bp
      000E2F 24 FC            [12] 3113 	add	a,#0xfc
      000E31 F8               [12] 3114 	mov	r0,a
      000E32 E6               [12] 3115 	mov	a,@r0
      000E33 24 86            [12] 3116 	add	a,#0xff - 0x79
      000E35 50 03            [24] 3117 	jnc	00407$
      000E37 02r1Cr41         [24] 3118 	ljmp	00186$
      000E3A                       3119 00407$:
      000E3A E5*00            [12] 3120 	mov	a,_bp
      000E3C 24 FC            [12] 3121 	add	a,#0xfc
      000E3E F8               [12] 3122 	mov	r0,a
      000E3F E6               [12] 3123 	mov	a,@r0
      000E40 24 C3            [12] 3124 	add	a,#0xc3
      000E42 FC               [12] 3125 	mov	r4,a
      000E43 24 0A            [12] 3126 	add	a,#(00408$-3-.)
      000E45 83               [24] 3127 	movc	a,@a+pc
      000E46 F5 82            [12] 3128 	mov	dpl,a
      000E48 EC               [12] 3129 	mov	a,r4
      000E49 24 41            [12] 3130 	add	a,#(00409$-3-.)
      000E4B 83               [24] 3131 	movc	a,@a+pc
      000E4C F5 83            [12] 3132 	mov	dph,a
      000E4E E4               [12] 3133 	clr	a
      000E4F 73               [24] 3134 	jmp	@a+dptr
      000E50                       3135 00408$:
      000E50rFF                    3136 	.db	00184$
      000E51r41                    3137 	.db	00186$
      000E52r20                    3138 	.db	00185$
      000E53rD4                    3139 	.db	00176$
      000E54rCA                    3140 	.db	00102$
      000E55r5C                    3141 	.db	00105$
      000E56rF7                    3142 	.db	00108$
      000E57r92                    3143 	.db	00111$
      000E58r41                    3144 	.db	00186$
      000E59r41                    3145 	.db	00186$
      000E5Ar41                    3146 	.db	00186$
      000E5Br24                    3147 	.db	00115$
      000E5Cr41                    3148 	.db	00186$
      000E5DrF7                    3149 	.db	00124$
      000E5Er52                    3150 	.db	00137$
      000E5Fr32                    3151 	.db	00151$
      000E60r32                    3152 	.db	00151$
      000E61r41                    3153 	.db	00186$
      000E62r41                    3154 	.db	00186$
      000E63r54                    3155 	.db	00152$
      000E64r41                    3156 	.db	00186$
      000E65r41                    3157 	.db	00186$
      000E66r41                    3158 	.db	00186$
      000E67r41                    3159 	.db	00186$
      000E68r41                    3160 	.db	00186$
      000E69r41                    3161 	.db	00186$
      000E6Ar41                    3162 	.db	00186$
      000E6Br41                    3163 	.db	00186$
      000E6Cr41                    3164 	.db	00186$
      000E6Dr41                    3165 	.db	00186$
      000E6Er41                    3166 	.db	00186$
      000E6Fr41                    3167 	.db	00186$
      000E70r41                    3168 	.db	00186$
      000E71r41                    3169 	.db	00186$
      000E72r41                    3170 	.db	00186$
      000E73r41                    3171 	.db	00186$
      000E74r41                    3172 	.db	00186$
      000E75r41                    3173 	.db	00186$
      000E76r1C                    3174 	.db	00154$
      000E77r41                    3175 	.db	00186$
      000E78r41                    3176 	.db	00186$
      000E79r24                    3177 	.db	00115$
      000E7Ar80                    3178 	.db	00160$
      000E7Br5E                    3179 	.db	00159$
      000E7CrFF                    3180 	.db	00184$
      000E7Dr41                    3181 	.db	00186$
      000E7Er41                    3182 	.db	00186$
      000E7Fr5E                    3183 	.db	00159$
      000E80rA2                    3184 	.db	00161$
      000E81r41                    3185 	.db	00186$
      000E82r41                    3186 	.db	00186$
      000E83r41                    3187 	.db	00186$
      000E84r41                    3188 	.db	00186$
      000E85rF6                    3189 	.db	00177$
      000E86r60                    3190 	.db	00156$
      000E87r41                    3191 	.db	00186$
      000E88rDF                    3192 	.db	00157$
      000E89r41                    3193 	.db	00186$
      000E8Ar41                    3194 	.db	00186$
      000E8Br3E                    3195 	.db	00155$
      000E8CrFF                    3196 	.db	00184$
      000E8D                       3197 00409$:
      000E8Ds1B                    3198 	.db	00184$>>8
      000E8Es1C                    3199 	.db	00186$>>8
      000E8Fs1C                    3200 	.db	00185$>>8
      000E90s1A                    3201 	.db	00176$>>8
      000E91s0E                    3202 	.db	00102$>>8
      000E92s0F                    3203 	.db	00105$>>8
      000E93s0F                    3204 	.db	00108$>>8
      000E94s10                    3205 	.db	00111$>>8
      000E95s1C                    3206 	.db	00186$>>8
      000E96s1C                    3207 	.db	00186$>>8
      000E97s1C                    3208 	.db	00186$>>8
      000E98s11                    3209 	.db	00115$>>8
      000E99s1C                    3210 	.db	00186$>>8
      000E9As12                    3211 	.db	00124$>>8
      000E9Bs14                    3212 	.db	00137$>>8
      000E9Cs16                    3213 	.db	00151$>>8
      000E9Ds16                    3214 	.db	00151$>>8
      000E9Es1C                    3215 	.db	00186$>>8
      000E9Fs1C                    3216 	.db	00186$>>8
      000EA0s16                    3217 	.db	00152$>>8
      000EA1s1C                    3218 	.db	00186$>>8
      000EA2s1C                    3219 	.db	00186$>>8
      000EA3s1C                    3220 	.db	00186$>>8
      000EA4s1C                    3221 	.db	00186$>>8
      000EA5s1C                    3222 	.db	00186$>>8
      000EA6s1C                    3223 	.db	00186$>>8
      000EA7s1C                    3224 	.db	00186$>>8
      000EA8s1C                    3225 	.db	00186$>>8
      000EA9s1C                    3226 	.db	00186$>>8
      000EAAs1C                    3227 	.db	00186$>>8
      000EABs1C                    3228 	.db	00186$>>8
      000EACs1C                    3229 	.db	00186$>>8
      000EADs1C                    3230 	.db	00186$>>8
      000EAEs1C                    3231 	.db	00186$>>8
      000EAFs1C                    3232 	.db	00186$>>8
      000EB0s1C                    3233 	.db	00186$>>8
      000EB1s1C                    3234 	.db	00186$>>8
      000EB2s1C                    3235 	.db	00186$>>8
      000EB3s17                    3236 	.db	00154$>>8
      000EB4s1C                    3237 	.db	00186$>>8
      000EB5s1C                    3238 	.db	00186$>>8
      000EB6s11                    3239 	.db	00115$>>8
      000EB7s18                    3240 	.db	00160$>>8
      000EB8s18                    3241 	.db	00159$>>8
      000EB9s1B                    3242 	.db	00184$>>8
      000EBAs1C                    3243 	.db	00186$>>8
      000EBBs1C                    3244 	.db	00186$>>8
      000EBCs18                    3245 	.db	00159$>>8
      000EBDs18                    3246 	.db	00161$>>8
      000EBEs1C                    3247 	.db	00186$>>8
      000EBFs1C                    3248 	.db	00186$>>8
      000EC0s1C                    3249 	.db	00186$>>8
      000EC1s1C                    3250 	.db	00186$>>8
      000EC2s1A                    3251 	.db	00177$>>8
      000EC3s17                    3252 	.db	00156$>>8
      000EC4s1C                    3253 	.db	00186$>>8
      000EC5s17                    3254 	.db	00157$>>8
      000EC6s1C                    3255 	.db	00186$>>8
      000EC7s1C                    3256 	.db	00186$>>8
      000EC8s17                    3257 	.db	00155$>>8
      000EC9s1B                    3258 	.db	00184$>>8
                                   3259 ;	vt100.c:420: case 'A': {// move cursor up (cursor stops at top margin)
      000ECA                       3260 00102$:
                                   3261 ;	vt100.c:421: int n = (term->narg > 0)?term->args[0]:1;
      000ECA A8*00            [24] 3262 	mov	r0,_bp
      000ECC 08               [12] 3263 	inc	r0
      000ECD 74 0C            [12] 3264 	mov	a,#0x0c
      000ECF 26               [12] 3265 	add	a,@r0
      000ED0 FA               [12] 3266 	mov	r2,a
      000ED1 E4               [12] 3267 	clr	a
      000ED2 08               [12] 3268 	inc	r0
      000ED3 36               [12] 3269 	addc	a,@r0
      000ED4 FB               [12] 3270 	mov	r3,a
      000ED5 08               [12] 3271 	inc	r0
      000ED6 86 04            [24] 3272 	mov	ar4,@r0
      000ED8 8A 82            [24] 3273 	mov	dpl,r2
      000EDA 8B 83            [24] 3274 	mov	dph,r3
      000EDC 8C F0            [24] 3275 	mov	b,r4
      000EDE 12r00r00         [24] 3276 	lcall	__gptrget
      000EE1 60 1F            [24] 3277 	jz	00205$
      000EE3 A8*00            [24] 3278 	mov	r0,_bp
      000EE5 08               [12] 3279 	inc	r0
      000EE6 74 0D            [12] 3280 	mov	a,#0x0d
      000EE8 26               [12] 3281 	add	a,@r0
      000EE9 FB               [12] 3282 	mov	r3,a
      000EEA E4               [12] 3283 	clr	a
      000EEB 08               [12] 3284 	inc	r0
      000EEC 36               [12] 3285 	addc	a,@r0
      000EED FA               [12] 3286 	mov	r2,a
      000EEE 08               [12] 3287 	inc	r0
      000EEF 86 04            [24] 3288 	mov	ar4,@r0
      000EF1 8B 82            [24] 3289 	mov	dpl,r3
      000EF3 8A 83            [24] 3290 	mov	dph,r2
      000EF5 8C F0            [24] 3291 	mov	b,r4
      000EF7 12r00r00         [24] 3292 	lcall	__gptrget
      000EFA FB               [12] 3293 	mov	r3,a
      000EFB A3               [24] 3294 	inc	dptr
      000EFC 12r00r00         [24] 3295 	lcall	__gptrget
      000EFF FC               [12] 3296 	mov	r4,a
      000F00 80 04            [24] 3297 	sjmp	00206$
      000F02                       3298 00205$:
      000F02 7B 01            [12] 3299 	mov	r3,#0x01
      000F04 7C 00            [12] 3300 	mov	r4,#0x00
      000F06                       3301 00206$:
      000F06 8B 06            [24] 3302 	mov	ar6,r3
      000F08 8C 05            [24] 3303 	mov	ar5,r4
                                   3304 ;	vt100.c:422: term->cursor_y -= n;
      000F0A A8*00            [24] 3305 	mov	r0,_bp
      000F0C 08               [12] 3306 	inc	r0
      000F0D 74 02            [12] 3307 	mov	a,#0x02
      000F0F 26               [12] 3308 	add	a,@r0
      000F10 FA               [12] 3309 	mov	r2,a
      000F11 E4               [12] 3310 	clr	a
      000F12 08               [12] 3311 	inc	r0
      000F13 36               [12] 3312 	addc	a,@r0
      000F14 FB               [12] 3313 	mov	r3,a
      000F15 08               [12] 3314 	inc	r0
      000F16 86 04            [24] 3315 	mov	ar4,@r0
      000F18 8A 82            [24] 3316 	mov	dpl,r2
      000F1A 8B 83            [24] 3317 	mov	dph,r3
      000F1C 8C F0            [24] 3318 	mov	b,r4
      000F1E 12r00r00         [24] 3319 	lcall	__gptrget
      000F21 C3               [12] 3320 	clr	c
      000F22 9E               [12] 3321 	subb	a,r6
                                   3322 ;	vt100.c:423: if(term->cursor_y < 0) term->cursor_y = 0; 
      000F23 FF               [12] 3323 	mov	r7,a
      000F24 8A 82            [24] 3324 	mov	dpl,r2
      000F26 8B 83            [24] 3325 	mov	dph,r3
      000F28 8C F0            [24] 3326 	mov	b,r4
      000F2A 12r00r00         [24] 3327 	lcall	__gptrput
      000F2D 30 E7 0A         [24] 3328 	jnb	acc.7,00104$
      000F30 8A 82            [24] 3329 	mov	dpl,r2
      000F32 8B 83            [24] 3330 	mov	dph,r3
      000F34 8C F0            [24] 3331 	mov	b,r4
      000F36 E4               [12] 3332 	clr	a
      000F37 12r00r00         [24] 3333 	lcall	__gptrput
      000F3A                       3334 00104$:
                                   3335 ;	vt100.c:424: term->state = _st_idle; 
      000F3A A8*00            [24] 3336 	mov	r0,_bp
      000F3C 08               [12] 3337 	inc	r0
      000F3D 74 16            [12] 3338 	mov	a,#0x16
      000F3F 26               [12] 3339 	add	a,@r0
      000F40 FA               [12] 3340 	mov	r2,a
      000F41 E4               [12] 3341 	clr	a
      000F42 08               [12] 3342 	inc	r0
      000F43 36               [12] 3343 	addc	a,@r0
      000F44 FB               [12] 3344 	mov	r3,a
      000F45 08               [12] 3345 	inc	r0
      000F46 86 04            [24] 3346 	mov	ar4,@r0
      000F48 8A 82            [24] 3347 	mov	dpl,r2
      000F4A 8B 83            [24] 3348 	mov	dph,r3
      000F4C 8C F0            [24] 3349 	mov	b,r4
      000F4E 74r23            [12] 3350 	mov	a,#__st_idle
      000F50 12r00r00         [24] 3351 	lcall	__gptrput
      000F53 A3               [24] 3352 	inc	dptr
      000F54 74s24            [12] 3353 	mov	a,#(__st_idle >> 8)
      000F56 12r00r00         [24] 3354 	lcall	__gptrput
                                   3355 ;	vt100.c:425: break;
      000F59 02r1Cr81         [24] 3356 	ljmp	00200$
                                   3357 ;	vt100.c:427: case 'B': { // cursor down (cursor stops at bottom margin)
      000F5C                       3358 00105$:
                                   3359 ;	vt100.c:428: int n = (term->narg > 0)?term->args[0]:1;
      000F5C A8*00            [24] 3360 	mov	r0,_bp
      000F5E 08               [12] 3361 	inc	r0
      000F5F 74 0C            [12] 3362 	mov	a,#0x0c
      000F61 26               [12] 3363 	add	a,@r0
      000F62 FA               [12] 3364 	mov	r2,a
      000F63 E4               [12] 3365 	clr	a
      000F64 08               [12] 3366 	inc	r0
      000F65 36               [12] 3367 	addc	a,@r0
      000F66 FB               [12] 3368 	mov	r3,a
      000F67 08               [12] 3369 	inc	r0
      000F68 86 04            [24] 3370 	mov	ar4,@r0
      000F6A 8A 82            [24] 3371 	mov	dpl,r2
      000F6C 8B 83            [24] 3372 	mov	dph,r3
      000F6E 8C F0            [24] 3373 	mov	b,r4
      000F70 12r00r00         [24] 3374 	lcall	__gptrget
      000F73 60 1F            [24] 3375 	jz	00207$
      000F75 A8*00            [24] 3376 	mov	r0,_bp
      000F77 08               [12] 3377 	inc	r0
      000F78 74 0D            [12] 3378 	mov	a,#0x0d
      000F7A 26               [12] 3379 	add	a,@r0
      000F7B FB               [12] 3380 	mov	r3,a
      000F7C E4               [12] 3381 	clr	a
      000F7D 08               [12] 3382 	inc	r0
      000F7E 36               [12] 3383 	addc	a,@r0
      000F7F FA               [12] 3384 	mov	r2,a
      000F80 08               [12] 3385 	inc	r0
      000F81 86 04            [24] 3386 	mov	ar4,@r0
      000F83 8B 82            [24] 3387 	mov	dpl,r3
      000F85 8A 83            [24] 3388 	mov	dph,r2
      000F87 8C F0            [24] 3389 	mov	b,r4
      000F89 12r00r00         [24] 3390 	lcall	__gptrget
      000F8C FB               [12] 3391 	mov	r3,a
      000F8D A3               [24] 3392 	inc	dptr
      000F8E 12r00r00         [24] 3393 	lcall	__gptrget
      000F91 FC               [12] 3394 	mov	r4,a
      000F92 80 04            [24] 3395 	sjmp	00208$
      000F94                       3396 00207$:
      000F94 7B 01            [12] 3397 	mov	r3,#0x01
      000F96 7C 00            [12] 3398 	mov	r4,#0x00
      000F98                       3399 00208$:
      000F98 8B 06            [24] 3400 	mov	ar6,r3
      000F9A 8C 05            [24] 3401 	mov	ar5,r4
                                   3402 ;	vt100.c:429: term->cursor_y += n;
      000F9C A8*00            [24] 3403 	mov	r0,_bp
      000F9E 08               [12] 3404 	inc	r0
      000F9F 74 02            [12] 3405 	mov	a,#0x02
      000FA1 26               [12] 3406 	add	a,@r0
      000FA2 FA               [12] 3407 	mov	r2,a
      000FA3 E4               [12] 3408 	clr	a
      000FA4 08               [12] 3409 	inc	r0
      000FA5 36               [12] 3410 	addc	a,@r0
      000FA6 FB               [12] 3411 	mov	r3,a
      000FA7 08               [12] 3412 	inc	r0
      000FA8 86 04            [24] 3413 	mov	ar4,@r0
      000FAA 8A 82            [24] 3414 	mov	dpl,r2
      000FAC 8B 83            [24] 3415 	mov	dph,r3
      000FAE 8C F0            [24] 3416 	mov	b,r4
      000FB0 12r00r00         [24] 3417 	lcall	__gptrget
      000FB3 2E               [12] 3418 	add	a,r6
      000FB4 FF               [12] 3419 	mov	r7,a
      000FB5 8A 82            [24] 3420 	mov	dpl,r2
      000FB7 8B 83            [24] 3421 	mov	dph,r3
      000FB9 8C F0            [24] 3422 	mov	b,r4
      000FBB 12r00r00         [24] 3423 	lcall	__gptrput
                                   3424 ;	vt100.c:430: if(term->cursor_y > VT100_HEIGHT) term->cursor_y = VT100_HEIGHT; 
      000FBE C3               [12] 3425 	clr	c
      000FBF 74 98            [12] 3426 	mov	a,#(0x18 ^ 0x80)
      000FC1 8F F0            [24] 3427 	mov	b,r7
      000FC3 63 F0 80         [24] 3428 	xrl	b,#0x80
      000FC6 95 F0            [12] 3429 	subb	a,b
      000FC8 50 0B            [24] 3430 	jnc	00107$
      000FCA 8A 82            [24] 3431 	mov	dpl,r2
      000FCC 8B 83            [24] 3432 	mov	dph,r3
      000FCE 8C F0            [24] 3433 	mov	b,r4
      000FD0 74 18            [12] 3434 	mov	a,#0x18
      000FD2 12r00r00         [24] 3435 	lcall	__gptrput
      000FD5                       3436 00107$:
                                   3437 ;	vt100.c:431: term->state = _st_idle; 
      000FD5 A8*00            [24] 3438 	mov	r0,_bp
      000FD7 08               [12] 3439 	inc	r0
      000FD8 74 16            [12] 3440 	mov	a,#0x16
      000FDA 26               [12] 3441 	add	a,@r0
      000FDB FA               [12] 3442 	mov	r2,a
      000FDC E4               [12] 3443 	clr	a
      000FDD 08               [12] 3444 	inc	r0
      000FDE 36               [12] 3445 	addc	a,@r0
      000FDF FB               [12] 3446 	mov	r3,a
      000FE0 08               [12] 3447 	inc	r0
      000FE1 86 04            [24] 3448 	mov	ar4,@r0
      000FE3 8A 82            [24] 3449 	mov	dpl,r2
      000FE5 8B 83            [24] 3450 	mov	dph,r3
      000FE7 8C F0            [24] 3451 	mov	b,r4
      000FE9 74r23            [12] 3452 	mov	a,#__st_idle
      000FEB 12r00r00         [24] 3453 	lcall	__gptrput
      000FEE A3               [24] 3454 	inc	dptr
      000FEF 74s24            [12] 3455 	mov	a,#(__st_idle >> 8)
      000FF1 12r00r00         [24] 3456 	lcall	__gptrput
                                   3457 ;	vt100.c:432: break;
      000FF4 02r1Cr81         [24] 3458 	ljmp	00200$
                                   3459 ;	vt100.c:434: case 'C': { // cursor right (cursor stops at right margin)
      000FF7                       3460 00108$:
                                   3461 ;	vt100.c:435: int n = (term->narg > 0)?term->args[0]:1;
      000FF7 A8*00            [24] 3462 	mov	r0,_bp
      000FF9 08               [12] 3463 	inc	r0
      000FFA 74 0C            [12] 3464 	mov	a,#0x0c
      000FFC 26               [12] 3465 	add	a,@r0
      000FFD FA               [12] 3466 	mov	r2,a
      000FFE E4               [12] 3467 	clr	a
      000FFF 08               [12] 3468 	inc	r0
      001000 36               [12] 3469 	addc	a,@r0
      001001 FB               [12] 3470 	mov	r3,a
      001002 08               [12] 3471 	inc	r0
      001003 86 04            [24] 3472 	mov	ar4,@r0
      001005 8A 82            [24] 3473 	mov	dpl,r2
      001007 8B 83            [24] 3474 	mov	dph,r3
      001009 8C F0            [24] 3475 	mov	b,r4
      00100B 12r00r00         [24] 3476 	lcall	__gptrget
      00100E 60 1F            [24] 3477 	jz	00209$
      001010 A8*00            [24] 3478 	mov	r0,_bp
      001012 08               [12] 3479 	inc	r0
      001013 74 0D            [12] 3480 	mov	a,#0x0d
      001015 26               [12] 3481 	add	a,@r0
      001016 FB               [12] 3482 	mov	r3,a
      001017 E4               [12] 3483 	clr	a
      001018 08               [12] 3484 	inc	r0
      001019 36               [12] 3485 	addc	a,@r0
      00101A FA               [12] 3486 	mov	r2,a
      00101B 08               [12] 3487 	inc	r0
      00101C 86 04            [24] 3488 	mov	ar4,@r0
      00101E 8B 82            [24] 3489 	mov	dpl,r3
      001020 8A 83            [24] 3490 	mov	dph,r2
      001022 8C F0            [24] 3491 	mov	b,r4
      001024 12r00r00         [24] 3492 	lcall	__gptrget
      001027 FB               [12] 3493 	mov	r3,a
      001028 A3               [24] 3494 	inc	dptr
      001029 12r00r00         [24] 3495 	lcall	__gptrget
      00102C FC               [12] 3496 	mov	r4,a
      00102D 80 04            [24] 3497 	sjmp	00210$
      00102F                       3498 00209$:
      00102F 7B 01            [12] 3499 	mov	r3,#0x01
      001031 7C 00            [12] 3500 	mov	r4,#0x00
      001033                       3501 00210$:
      001033 8B 06            [24] 3502 	mov	ar6,r3
      001035 8C 05            [24] 3503 	mov	ar5,r4
                                   3504 ;	vt100.c:436: term->cursor_x += n;
      001037 A8*00            [24] 3505 	mov	r0,_bp
      001039 08               [12] 3506 	inc	r0
      00103A 74 01            [12] 3507 	mov	a,#0x01
      00103C 26               [12] 3508 	add	a,@r0
      00103D FA               [12] 3509 	mov	r2,a
      00103E E4               [12] 3510 	clr	a
      00103F 08               [12] 3511 	inc	r0
      001040 36               [12] 3512 	addc	a,@r0
      001041 FB               [12] 3513 	mov	r3,a
      001042 08               [12] 3514 	inc	r0
      001043 86 04            [24] 3515 	mov	ar4,@r0
      001045 8A 82            [24] 3516 	mov	dpl,r2
      001047 8B 83            [24] 3517 	mov	dph,r3
      001049 8C F0            [24] 3518 	mov	b,r4
      00104B 12r00r00         [24] 3519 	lcall	__gptrget
      00104E 2E               [12] 3520 	add	a,r6
      00104F FF               [12] 3521 	mov	r7,a
      001050 8A 82            [24] 3522 	mov	dpl,r2
      001052 8B 83            [24] 3523 	mov	dph,r3
      001054 8C F0            [24] 3524 	mov	b,r4
      001056 12r00r00         [24] 3525 	lcall	__gptrput
                                   3526 ;	vt100.c:437: if(term->cursor_x > VT100_WIDTH) term->cursor_x = VT100_WIDTH;
      001059 C3               [12] 3527 	clr	c
      00105A 74 D0            [12] 3528 	mov	a,#(0x50 ^ 0x80)
      00105C 8F F0            [24] 3529 	mov	b,r7
      00105E 63 F0 80         [24] 3530 	xrl	b,#0x80
      001061 95 F0            [12] 3531 	subb	a,b
      001063 50 0B            [24] 3532 	jnc	00110$
      001065 8A 82            [24] 3533 	mov	dpl,r2
      001067 8B 83            [24] 3534 	mov	dph,r3
      001069 8C F0            [24] 3535 	mov	b,r4
      00106B 74 50            [12] 3536 	mov	a,#0x50
      00106D 12r00r00         [24] 3537 	lcall	__gptrput
      001070                       3538 00110$:
                                   3539 ;	vt100.c:438: term->state = _st_idle; 
      001070 A8*00            [24] 3540 	mov	r0,_bp
      001072 08               [12] 3541 	inc	r0
      001073 74 16            [12] 3542 	mov	a,#0x16
      001075 26               [12] 3543 	add	a,@r0
      001076 FA               [12] 3544 	mov	r2,a
      001077 E4               [12] 3545 	clr	a
      001078 08               [12] 3546 	inc	r0
      001079 36               [12] 3547 	addc	a,@r0
      00107A FB               [12] 3548 	mov	r3,a
      00107B 08               [12] 3549 	inc	r0
      00107C 86 04            [24] 3550 	mov	ar4,@r0
      00107E 8A 82            [24] 3551 	mov	dpl,r2
      001080 8B 83            [24] 3552 	mov	dph,r3
      001082 8C F0            [24] 3553 	mov	b,r4
      001084 74r23            [12] 3554 	mov	a,#__st_idle
      001086 12r00r00         [24] 3555 	lcall	__gptrput
      001089 A3               [24] 3556 	inc	dptr
      00108A 74s24            [12] 3557 	mov	a,#(__st_idle >> 8)
      00108C 12r00r00         [24] 3558 	lcall	__gptrput
                                   3559 ;	vt100.c:439: break;
      00108F 02r1Cr81         [24] 3560 	ljmp	00200$
                                   3561 ;	vt100.c:441: case 'D': { // cursor left
      001092                       3562 00111$:
                                   3563 ;	vt100.c:442: int n = (term->narg > 0)?term->args[0]:1;
      001092 A8*00            [24] 3564 	mov	r0,_bp
      001094 08               [12] 3565 	inc	r0
      001095 74 0C            [12] 3566 	mov	a,#0x0c
      001097 26               [12] 3567 	add	a,@r0
      001098 FA               [12] 3568 	mov	r2,a
      001099 E4               [12] 3569 	clr	a
      00109A 08               [12] 3570 	inc	r0
      00109B 36               [12] 3571 	addc	a,@r0
      00109C FB               [12] 3572 	mov	r3,a
      00109D 08               [12] 3573 	inc	r0
      00109E 86 04            [24] 3574 	mov	ar4,@r0
      0010A0 8A 82            [24] 3575 	mov	dpl,r2
      0010A2 8B 83            [24] 3576 	mov	dph,r3
      0010A4 8C F0            [24] 3577 	mov	b,r4
      0010A6 12r00r00         [24] 3578 	lcall	__gptrget
      0010A9 60 1F            [24] 3579 	jz	00211$
      0010AB A8*00            [24] 3580 	mov	r0,_bp
      0010AD 08               [12] 3581 	inc	r0
      0010AE 74 0D            [12] 3582 	mov	a,#0x0d
      0010B0 26               [12] 3583 	add	a,@r0
      0010B1 FB               [12] 3584 	mov	r3,a
      0010B2 E4               [12] 3585 	clr	a
      0010B3 08               [12] 3586 	inc	r0
      0010B4 36               [12] 3587 	addc	a,@r0
      0010B5 FA               [12] 3588 	mov	r2,a
      0010B6 08               [12] 3589 	inc	r0
      0010B7 86 04            [24] 3590 	mov	ar4,@r0
      0010B9 8B 82            [24] 3591 	mov	dpl,r3
      0010BB 8A 83            [24] 3592 	mov	dph,r2
      0010BD 8C F0            [24] 3593 	mov	b,r4
      0010BF 12r00r00         [24] 3594 	lcall	__gptrget
      0010C2 FB               [12] 3595 	mov	r3,a
      0010C3 A3               [24] 3596 	inc	dptr
      0010C4 12r00r00         [24] 3597 	lcall	__gptrget
      0010C7 FC               [12] 3598 	mov	r4,a
      0010C8 80 04            [24] 3599 	sjmp	00212$
      0010CA                       3600 00211$:
      0010CA 7B 01            [12] 3601 	mov	r3,#0x01
      0010CC 7C 00            [12] 3602 	mov	r4,#0x00
      0010CE                       3603 00212$:
      0010CE 8B 06            [24] 3604 	mov	ar6,r3
      0010D0 8C 05            [24] 3605 	mov	ar5,r4
                                   3606 ;	vt100.c:443: term->cursor_x -= n;
      0010D2 A8*00            [24] 3607 	mov	r0,_bp
      0010D4 08               [12] 3608 	inc	r0
      0010D5 74 01            [12] 3609 	mov	a,#0x01
      0010D7 26               [12] 3610 	add	a,@r0
      0010D8 FA               [12] 3611 	mov	r2,a
      0010D9 E4               [12] 3612 	clr	a
      0010DA 08               [12] 3613 	inc	r0
      0010DB 36               [12] 3614 	addc	a,@r0
      0010DC FB               [12] 3615 	mov	r3,a
      0010DD 08               [12] 3616 	inc	r0
      0010DE 86 04            [24] 3617 	mov	ar4,@r0
      0010E0 8A 82            [24] 3618 	mov	dpl,r2
      0010E2 8B 83            [24] 3619 	mov	dph,r3
      0010E4 8C F0            [24] 3620 	mov	b,r4
      0010E6 12r00r00         [24] 3621 	lcall	__gptrget
      0010E9 C3               [12] 3622 	clr	c
      0010EA 9E               [12] 3623 	subb	a,r6
                                   3624 ;	vt100.c:444: if(term->cursor_x < 0) term->cursor_x = 0;
      0010EB FF               [12] 3625 	mov	r7,a
      0010EC 8A 82            [24] 3626 	mov	dpl,r2
      0010EE 8B 83            [24] 3627 	mov	dph,r3
      0010F0 8C F0            [24] 3628 	mov	b,r4
      0010F2 12r00r00         [24] 3629 	lcall	__gptrput
      0010F5 30 E7 0A         [24] 3630 	jnb	acc.7,00113$
      0010F8 8A 82            [24] 3631 	mov	dpl,r2
      0010FA 8B 83            [24] 3632 	mov	dph,r3
      0010FC 8C F0            [24] 3633 	mov	b,r4
      0010FE E4               [12] 3634 	clr	a
      0010FF 12r00r00         [24] 3635 	lcall	__gptrput
      001102                       3636 00113$:
                                   3637 ;	vt100.c:445: term->state = _st_idle; 
      001102 A8*00            [24] 3638 	mov	r0,_bp
      001104 08               [12] 3639 	inc	r0
      001105 74 16            [12] 3640 	mov	a,#0x16
      001107 26               [12] 3641 	add	a,@r0
      001108 FA               [12] 3642 	mov	r2,a
      001109 E4               [12] 3643 	clr	a
      00110A 08               [12] 3644 	inc	r0
      00110B 36               [12] 3645 	addc	a,@r0
      00110C FB               [12] 3646 	mov	r3,a
      00110D 08               [12] 3647 	inc	r0
      00110E 86 04            [24] 3648 	mov	ar4,@r0
      001110 8A 82            [24] 3649 	mov	dpl,r2
      001112 8B 83            [24] 3650 	mov	dph,r3
      001114 8C F0            [24] 3651 	mov	b,r4
      001116 74r23            [12] 3652 	mov	a,#__st_idle
      001118 12r00r00         [24] 3653 	lcall	__gptrput
      00111B A3               [24] 3654 	inc	dptr
      00111C 74s24            [12] 3655 	mov	a,#(__st_idle >> 8)
      00111E 12r00r00         [24] 3656 	lcall	__gptrput
                                   3657 ;	vt100.c:446: break;
      001121 02r1Cr81         [24] 3658 	ljmp	00200$
                                   3659 ;	vt100.c:449: case 'H': { // move cursor to position (default 0;0)
      001124                       3660 00115$:
                                   3661 ;	vt100.c:451: term->cursor_x = (term->narg >= 1)?(term->args[1]-1):0; 
      001124 A8*00            [24] 3662 	mov	r0,_bp
      001126 08               [12] 3663 	inc	r0
      001127 E5*00            [12] 3664 	mov	a,_bp
      001129 24 09            [12] 3665 	add	a,#0x09
      00112B F9               [12] 3666 	mov	r1,a
      00112C 74 01            [12] 3667 	mov	a,#0x01
      00112E 26               [12] 3668 	add	a,@r0
      00112F F7               [12] 3669 	mov	@r1,a
      001130 E4               [12] 3670 	clr	a
      001131 08               [12] 3671 	inc	r0
      001132 36               [12] 3672 	addc	a,@r0
      001133 09               [12] 3673 	inc	r1
      001134 F7               [12] 3674 	mov	@r1,a
      001135 08               [12] 3675 	inc	r0
      001136 E6               [12] 3676 	mov	a,@r0
      001137 09               [12] 3677 	inc	r1
      001138 F7               [12] 3678 	mov	@r1,a
      001139 A8*00            [24] 3679 	mov	r0,_bp
      00113B 08               [12] 3680 	inc	r0
      00113C E5*00            [12] 3681 	mov	a,_bp
      00113E 24 04            [12] 3682 	add	a,#0x04
      001140 F9               [12] 3683 	mov	r1,a
      001141 74 0C            [12] 3684 	mov	a,#0x0c
      001143 26               [12] 3685 	add	a,@r0
      001144 F7               [12] 3686 	mov	@r1,a
      001145 E4               [12] 3687 	clr	a
      001146 08               [12] 3688 	inc	r0
      001147 36               [12] 3689 	addc	a,@r0
      001148 09               [12] 3690 	inc	r1
      001149 F7               [12] 3691 	mov	@r1,a
      00114A 08               [12] 3692 	inc	r0
      00114B E6               [12] 3693 	mov	a,@r0
      00114C 09               [12] 3694 	inc	r1
      00114D F7               [12] 3695 	mov	@r1,a
      00114E E5*00            [12] 3696 	mov	a,_bp
      001150 24 04            [12] 3697 	add	a,#0x04
      001152 F8               [12] 3698 	mov	r0,a
      001153 86 82            [24] 3699 	mov	dpl,@r0
      001155 08               [12] 3700 	inc	r0
      001156 86 83            [24] 3701 	mov	dph,@r0
      001158 08               [12] 3702 	inc	r0
      001159 86 F0            [24] 3703 	mov	b,@r0
      00115B 12r00r00         [24] 3704 	lcall	__gptrget
      00115E FF               [12] 3705 	mov	r7,a
      00115F BF 01 00         [24] 3706 	cjne	r7,#0x01,00418$
      001162                       3707 00418$:
      001162 92*00            [24] 3708 	mov	b0,c
      001164 40 27            [24] 3709 	jc	00213$
      001166 A8*00            [24] 3710 	mov	r0,_bp
      001168 08               [12] 3711 	inc	r0
      001169 74 0D            [12] 3712 	mov	a,#0x0d
      00116B 26               [12] 3713 	add	a,@r0
      00116C FA               [12] 3714 	mov	r2,a
      00116D E4               [12] 3715 	clr	a
      00116E 08               [12] 3716 	inc	r0
      00116F 36               [12] 3717 	addc	a,@r0
      001170 FB               [12] 3718 	mov	r3,a
      001171 08               [12] 3719 	inc	r0
      001172 86 04            [24] 3720 	mov	ar4,@r0
      001174 74 02            [12] 3721 	mov	a,#0x02
      001176 2A               [12] 3722 	add	a,r2
      001177 FA               [12] 3723 	mov	r2,a
      001178 E4               [12] 3724 	clr	a
      001179 3B               [12] 3725 	addc	a,r3
      00117A FB               [12] 3726 	mov	r3,a
      00117B 8A 82            [24] 3727 	mov	dpl,r2
      00117D 8B 83            [24] 3728 	mov	dph,r3
      00117F 8C F0            [24] 3729 	mov	b,r4
      001181 12r00r00         [24] 3730 	lcall	__gptrget
      001184 FA               [12] 3731 	mov	r2,a
      001185 1A               [12] 3732 	dec	r2
      001186 EA               [12] 3733 	mov	a,r2
      001187 33               [12] 3734 	rlc	a
      001188 95 E0            [12] 3735 	subb	a,acc
      00118A FF               [12] 3736 	mov	r7,a
      00118B 80 04            [24] 3737 	sjmp	00214$
      00118D                       3738 00213$:
      00118D 7A 00            [12] 3739 	mov	r2,#0x00
      00118F 7F 00            [12] 3740 	mov	r7,#0x00
      001191                       3741 00214$:
      001191 8A 07            [24] 3742 	mov	ar7,r2
      001193 E5*00            [12] 3743 	mov	a,_bp
      001195 24 09            [12] 3744 	add	a,#0x09
      001197 F8               [12] 3745 	mov	r0,a
      001198 86 82            [24] 3746 	mov	dpl,@r0
      00119A 08               [12] 3747 	inc	r0
      00119B 86 83            [24] 3748 	mov	dph,@r0
      00119D 08               [12] 3749 	inc	r0
      00119E 86 F0            [24] 3750 	mov	b,@r0
      0011A0 EF               [12] 3751 	mov	a,r7
      0011A1 12r00r00         [24] 3752 	lcall	__gptrput
                                   3753 ;	vt100.c:452: term->cursor_y = (term->narg == 2)?(term->args[0]-1):0;
      0011A4 A8*00            [24] 3754 	mov	r0,_bp
      0011A6 08               [12] 3755 	inc	r0
      0011A7 74 02            [12] 3756 	mov	a,#0x02
      0011A9 26               [12] 3757 	add	a,@r0
      0011AA FD               [12] 3758 	mov	r5,a
      0011AB E4               [12] 3759 	clr	a
      0011AC 08               [12] 3760 	inc	r0
      0011AD 36               [12] 3761 	addc	a,@r0
      0011AE FE               [12] 3762 	mov	r6,a
      0011AF 08               [12] 3763 	inc	r0
      0011B0 86 07            [24] 3764 	mov	ar7,@r0
      0011B2 E5*00            [12] 3765 	mov	a,_bp
      0011B4 24 04            [12] 3766 	add	a,#0x04
      0011B6 F8               [12] 3767 	mov	r0,a
      0011B7 86 82            [24] 3768 	mov	dpl,@r0
      0011B9 08               [12] 3769 	inc	r0
      0011BA 86 83            [24] 3770 	mov	dph,@r0
      0011BC 08               [12] 3771 	inc	r0
      0011BD 86 F0            [24] 3772 	mov	b,@r0
      0011BF 12r00r00         [24] 3773 	lcall	__gptrget
      0011C2 FC               [12] 3774 	mov	r4,a
      0011C3 BC 02 20         [24] 3775 	cjne	r4,#0x02,00215$
      0011C6 A8*00            [24] 3776 	mov	r0,_bp
      0011C8 08               [12] 3777 	inc	r0
      0011C9 74 0D            [12] 3778 	mov	a,#0x0d
      0011CB 26               [12] 3779 	add	a,@r0
      0011CC FA               [12] 3780 	mov	r2,a
      0011CD E4               [12] 3781 	clr	a
      0011CE 08               [12] 3782 	inc	r0
      0011CF 36               [12] 3783 	addc	a,@r0
      0011D0 FB               [12] 3784 	mov	r3,a
      0011D1 08               [12] 3785 	inc	r0
      0011D2 86 04            [24] 3786 	mov	ar4,@r0
      0011D4 8A 82            [24] 3787 	mov	dpl,r2
      0011D6 8B 83            [24] 3788 	mov	dph,r3
      0011D8 8C F0            [24] 3789 	mov	b,r4
      0011DA 12r00r00         [24] 3790 	lcall	__gptrget
      0011DD FA               [12] 3791 	mov	r2,a
      0011DE 1A               [12] 3792 	dec	r2
      0011DF EA               [12] 3793 	mov	a,r2
      0011E0 33               [12] 3794 	rlc	a
      0011E1 95 E0            [12] 3795 	subb	a,acc
      0011E3 FC               [12] 3796 	mov	r4,a
      0011E4 80 04            [24] 3797 	sjmp	00216$
      0011E6                       3798 00215$:
      0011E6 7A 00            [12] 3799 	mov	r2,#0x00
      0011E8 7C 00            [12] 3800 	mov	r4,#0x00
      0011EA                       3801 00216$:
      0011EA 8A 04            [24] 3802 	mov	ar4,r2
      0011EC 8D 82            [24] 3803 	mov	dpl,r5
      0011EE 8E 83            [24] 3804 	mov	dph,r6
      0011F0 8F F0            [24] 3805 	mov	b,r7
      0011F2 EC               [12] 3806 	mov	a,r4
      0011F3 12r00r00         [24] 3807 	lcall	__gptrput
                                   3808 ;	vt100.c:453: if(term->flags.origin_mode) {
      0011F6 A8*00            [24] 3809 	mov	r0,_bp
      0011F8 08               [12] 3810 	inc	r0
      0011F9 86 02            [24] 3811 	mov	ar2,@r0
      0011FB 08               [12] 3812 	inc	r0
      0011FC 86 03            [24] 3813 	mov	ar3,@r0
      0011FE 08               [12] 3814 	inc	r0
      0011FF 86 04            [24] 3815 	mov	ar4,@r0
      001201 8A 82            [24] 3816 	mov	dpl,r2
      001203 8B 83            [24] 3817 	mov	dph,r3
      001205 8C F0            [24] 3818 	mov	b,r4
      001207 12r00r00         [24] 3819 	lcall	__gptrget
      00120A 30 E2 78         [24] 3820 	jnb	acc.2,00119$
                                   3821 ;	vt100.c:454: term->cursor_y += term->scroll_start_row;
      00120D 8D 82            [24] 3822 	mov	dpl,r5
      00120F 8E 83            [24] 3823 	mov	dph,r6
      001211 8F F0            [24] 3824 	mov	b,r7
      001213 E5*00            [12] 3825 	mov	a,_bp
      001215 24 07            [12] 3826 	add	a,#0x07
      001217 F8               [12] 3827 	mov	r0,a
      001218 12r00r00         [24] 3828 	lcall	__gptrget
      00121B F6               [12] 3829 	mov	@r0,a
      00121C A8*00            [24] 3830 	mov	r0,_bp
      00121E 08               [12] 3831 	inc	r0
      00121F 74 05            [12] 3832 	mov	a,#0x05
      001221 26               [12] 3833 	add	a,@r0
      001222 FA               [12] 3834 	mov	r2,a
      001223 E4               [12] 3835 	clr	a
      001224 08               [12] 3836 	inc	r0
      001225 36               [12] 3837 	addc	a,@r0
      001226 FB               [12] 3838 	mov	r3,a
      001227 08               [12] 3839 	inc	r0
      001228 86 04            [24] 3840 	mov	ar4,@r0
      00122A 8A 82            [24] 3841 	mov	dpl,r2
      00122C 8B 83            [24] 3842 	mov	dph,r3
      00122E 8C F0            [24] 3843 	mov	b,r4
      001230 12r00r00         [24] 3844 	lcall	__gptrget
      001233 FA               [12] 3845 	mov	r2,a
      001234 E5*00            [12] 3846 	mov	a,_bp
      001236 24 07            [12] 3847 	add	a,#0x07
      001238 F8               [12] 3848 	mov	r0,a
      001239 E5*00            [12] 3849 	mov	a,_bp
      00123B 24 07            [12] 3850 	add	a,#0x07
      00123D F9               [12] 3851 	mov	r1,a
      00123E EA               [12] 3852 	mov	a,r2
      00123F 26               [12] 3853 	add	a,@r0
      001240 F7               [12] 3854 	mov	@r1,a
      001241 8D 82            [24] 3855 	mov	dpl,r5
      001243 8E 83            [24] 3856 	mov	dph,r6
      001245 8F F0            [24] 3857 	mov	b,r7
      001247 E5*00            [12] 3858 	mov	a,_bp
      001249 24 07            [12] 3859 	add	a,#0x07
      00124B F8               [12] 3860 	mov	r0,a
      00124C E6               [12] 3861 	mov	a,@r0
      00124D 12r00r00         [24] 3862 	lcall	__gptrput
                                   3863 ;	vt100.c:455: if(term->cursor_y >= term->scroll_end_row){
      001250 A8*00            [24] 3864 	mov	r0,_bp
      001252 08               [12] 3865 	inc	r0
      001253 74 06            [12] 3866 	mov	a,#0x06
      001255 26               [12] 3867 	add	a,@r0
      001256 FA               [12] 3868 	mov	r2,a
      001257 E4               [12] 3869 	clr	a
      001258 08               [12] 3870 	inc	r0
      001259 36               [12] 3871 	addc	a,@r0
      00125A FB               [12] 3872 	mov	r3,a
      00125B 08               [12] 3873 	inc	r0
      00125C 86 04            [24] 3874 	mov	ar4,@r0
      00125E 8A 82            [24] 3875 	mov	dpl,r2
      001260 8B 83            [24] 3876 	mov	dph,r3
      001262 8C F0            [24] 3877 	mov	b,r4
      001264 12r00r00         [24] 3878 	lcall	__gptrget
      001267 FC               [12] 3879 	mov	r4,a
      001268 E5*00            [12] 3880 	mov	a,_bp
      00126A 24 07            [12] 3881 	add	a,#0x07
      00126C F8               [12] 3882 	mov	r0,a
      00126D C3               [12] 3883 	clr	c
      00126E E6               [12] 3884 	mov	a,@r0
      00126F 64 80            [12] 3885 	xrl	a,#0x80
      001271 8C F0            [24] 3886 	mov	b,r4
      001273 63 F0 80         [24] 3887 	xrl	b,#0x80
      001276 95 F0            [12] 3888 	subb	a,b
      001278 40 0B            [24] 3889 	jc	00119$
                                   3890 ;	vt100.c:456: term->cursor_y = term->scroll_end_row - 1;
      00127A 1C               [12] 3891 	dec	r4
      00127B 8D 82            [24] 3892 	mov	dpl,r5
      00127D 8E 83            [24] 3893 	mov	dph,r6
      00127F 8F F0            [24] 3894 	mov	b,r7
      001281 EC               [12] 3895 	mov	a,r4
      001282 12r00r00         [24] 3896 	lcall	__gptrput
      001285                       3897 00119$:
                                   3898 ;	vt100.c:459: if(term->cursor_x > VT100_WIDTH) term->cursor_x = VT100_WIDTH;
      001285 E5*00            [12] 3899 	mov	a,_bp
      001287 24 09            [12] 3900 	add	a,#0x09
      001289 F8               [12] 3901 	mov	r0,a
      00128A 86 82            [24] 3902 	mov	dpl,@r0
      00128C 08               [12] 3903 	inc	r0
      00128D 86 83            [24] 3904 	mov	dph,@r0
      00128F 08               [12] 3905 	inc	r0
      001290 86 F0            [24] 3906 	mov	b,@r0
      001292 12r00r00         [24] 3907 	lcall	__gptrget
      001295 FC               [12] 3908 	mov	r4,a
      001296 C3               [12] 3909 	clr	c
      001297 74 D0            [12] 3910 	mov	a,#(0x50 ^ 0x80)
      001299 8C F0            [24] 3911 	mov	b,r4
      00129B 63 F0 80         [24] 3912 	xrl	b,#0x80
      00129E 95 F0            [12] 3913 	subb	a,b
      0012A0 50 12            [24] 3914 	jnc	00121$
      0012A2 E5*00            [12] 3915 	mov	a,_bp
      0012A4 24 09            [12] 3916 	add	a,#0x09
      0012A6 F8               [12] 3917 	mov	r0,a
      0012A7 86 82            [24] 3918 	mov	dpl,@r0
      0012A9 08               [12] 3919 	inc	r0
      0012AA 86 83            [24] 3920 	mov	dph,@r0
      0012AC 08               [12] 3921 	inc	r0
      0012AD 86 F0            [24] 3922 	mov	b,@r0
      0012AF 74 50            [12] 3923 	mov	a,#0x50
      0012B1 12r00r00         [24] 3924 	lcall	__gptrput
      0012B4                       3925 00121$:
                                   3926 ;	vt100.c:460: if(term->cursor_y > VT100_HEIGHT) term->cursor_y = VT100_HEIGHT; 
      0012B4 8D 82            [24] 3927 	mov	dpl,r5
      0012B6 8E 83            [24] 3928 	mov	dph,r6
      0012B8 8F F0            [24] 3929 	mov	b,r7
      0012BA 12r00r00         [24] 3930 	lcall	__gptrget
      0012BD FC               [12] 3931 	mov	r4,a
      0012BE C3               [12] 3932 	clr	c
      0012BF 74 98            [12] 3933 	mov	a,#(0x18 ^ 0x80)
      0012C1 8C F0            [24] 3934 	mov	b,r4
      0012C3 63 F0 80         [24] 3935 	xrl	b,#0x80
      0012C6 95 F0            [12] 3936 	subb	a,b
      0012C8 50 0B            [24] 3937 	jnc	00123$
      0012CA 8D 82            [24] 3938 	mov	dpl,r5
      0012CC 8E 83            [24] 3939 	mov	dph,r6
      0012CE 8F F0            [24] 3940 	mov	b,r7
      0012D0 74 18            [12] 3941 	mov	a,#0x18
      0012D2 12r00r00         [24] 3942 	lcall	__gptrput
      0012D5                       3943 00123$:
                                   3944 ;	vt100.c:461: term->state = _st_idle; 
      0012D5 A8*00            [24] 3945 	mov	r0,_bp
      0012D7 08               [12] 3946 	inc	r0
      0012D8 74 16            [12] 3947 	mov	a,#0x16
      0012DA 26               [12] 3948 	add	a,@r0
      0012DB FD               [12] 3949 	mov	r5,a
      0012DC E4               [12] 3950 	clr	a
      0012DD 08               [12] 3951 	inc	r0
      0012DE 36               [12] 3952 	addc	a,@r0
      0012DF FE               [12] 3953 	mov	r6,a
      0012E0 08               [12] 3954 	inc	r0
      0012E1 86 07            [24] 3955 	mov	ar7,@r0
      0012E3 8D 82            [24] 3956 	mov	dpl,r5
      0012E5 8E 83            [24] 3957 	mov	dph,r6
      0012E7 8F F0            [24] 3958 	mov	b,r7
      0012E9 74r23            [12] 3959 	mov	a,#__st_idle
      0012EB 12r00r00         [24] 3960 	lcall	__gptrput
      0012EE A3               [24] 3961 	inc	dptr
      0012EF 74s24            [12] 3962 	mov	a,#(__st_idle >> 8)
      0012F1 12r00r00         [24] 3963 	lcall	__gptrput
                                   3964 ;	vt100.c:462: break;
      0012F4 02r1Cr81         [24] 3965 	ljmp	00200$
                                   3966 ;	vt100.c:464: case 'J':{// clear screen from cursor up or down
      0012F7                       3967 00124$:
                                   3968 ;	vt100.c:465: uint16_t y = VT100_CURSOR_Y(term); 
      0012F7 A8*00            [24] 3969 	mov	r0,_bp
      0012F9 08               [12] 3970 	inc	r0
      0012FA 86 82            [24] 3971 	mov	dpl,@r0
      0012FC 08               [12] 3972 	inc	r0
      0012FD 86 83            [24] 3973 	mov	dph,@r0
      0012FF 08               [12] 3974 	inc	r0
      001300 86 F0            [24] 3975 	mov	b,@r0
      001302 12r01rDD         [24] 3976 	lcall	_VT100_CURSOR_Y
                                   3977 ;	vt100.c:466: if(term->narg == 0 || (term->narg == 1 && term->args[0] == 0)){
      001305 A8*00            [24] 3978 	mov	r0,_bp
      001307 08               [12] 3979 	inc	r0
      001308 74 0C            [12] 3980 	mov	a,#0x0c
      00130A 26               [12] 3981 	add	a,@r0
      00130B FD               [12] 3982 	mov	r5,a
      00130C E4               [12] 3983 	clr	a
      00130D 08               [12] 3984 	inc	r0
      00130E 36               [12] 3985 	addc	a,@r0
      00130F FE               [12] 3986 	mov	r6,a
      001310 08               [12] 3987 	inc	r0
      001311 86 07            [24] 3988 	mov	ar7,@r0
      001313 8D 82            [24] 3989 	mov	dpl,r5
      001315 8E 83            [24] 3990 	mov	dph,r6
      001317 8F F0            [24] 3991 	mov	b,r7
      001319 12r00r00         [24] 3992 	lcall	__gptrget
      00131C FF               [12] 3993 	mov	r7,a
      00131D 60 2A            [24] 3994 	jz	00132$
      00131F BF 01 03         [24] 3995 	cjne	r7,#0x01,00427$
      001322 EF               [12] 3996 	mov	a,r7
      001323 80 01            [24] 3997 	sjmp	00428$
      001325                       3998 00427$:
      001325 E4               [12] 3999 	clr	a
      001326                       4000 00428$:
      001326 FF               [12] 4001 	mov	r7,a
      001327 60 5E            [24] 4002 	jz	00133$
      001329 A8*00            [24] 4003 	mov	r0,_bp
      00132B 08               [12] 4004 	inc	r0
      00132C 74 0D            [12] 4005 	mov	a,#0x0d
      00132E 26               [12] 4006 	add	a,@r0
      00132F FC               [12] 4007 	mov	r4,a
      001330 E4               [12] 4008 	clr	a
      001331 08               [12] 4009 	inc	r0
      001332 36               [12] 4010 	addc	a,@r0
      001333 FD               [12] 4011 	mov	r5,a
      001334 08               [12] 4012 	inc	r0
      001335 86 06            [24] 4013 	mov	ar6,@r0
      001337 8C 82            [24] 4014 	mov	dpl,r4
      001339 8D 83            [24] 4015 	mov	dph,r5
      00133B 8E F0            [24] 4016 	mov	b,r6
      00133D 12r00r00         [24] 4017 	lcall	__gptrget
      001340 FC               [12] 4018 	mov	r4,a
      001341 A3               [24] 4019 	inc	dptr
      001342 12r00r00         [24] 4020 	lcall	__gptrget
      001345 FD               [12] 4021 	mov	r5,a
      001346 4C               [12] 4022 	orl	a,r4
      001347 70 3E            [24] 4023 	jnz	00133$
      001349                       4024 00132$:
                                   4025 ;	vt100.c:468: _vt100_clearLines(term, term->cursor_y, VT100_HEIGHT - 1); 
      001349 A8*00            [24] 4026 	mov	r0,_bp
      00134B 08               [12] 4027 	inc	r0
      00134C 74 02            [12] 4028 	mov	a,#0x02
      00134E 26               [12] 4029 	add	a,@r0
      00134F FC               [12] 4030 	mov	r4,a
      001350 E4               [12] 4031 	clr	a
      001351 08               [12] 4032 	inc	r0
      001352 36               [12] 4033 	addc	a,@r0
      001353 FD               [12] 4034 	mov	r5,a
      001354 08               [12] 4035 	inc	r0
      001355 86 06            [24] 4036 	mov	ar6,@r0
      001357 8C 82            [24] 4037 	mov	dpl,r4
      001359 8D 83            [24] 4038 	mov	dph,r5
      00135B 8E F0            [24] 4039 	mov	b,r6
      00135D 12r00r00         [24] 4040 	lcall	__gptrget
      001360 FC               [12] 4041 	mov	r4,a
      001361 33               [12] 4042 	rlc	a
      001362 95 E0            [12] 4043 	subb	a,acc
      001364 FE               [12] 4044 	mov	r6,a
      001365 74 17            [12] 4045 	mov	a,#0x17
      001367 C0 E0            [24] 4046 	push	acc
      001369 E4               [12] 4047 	clr	a
      00136A C0 E0            [24] 4048 	push	acc
      00136C C0 04            [24] 4049 	push	ar4
      00136E C0 06            [24] 4050 	push	ar6
      001370 A8*00            [24] 4051 	mov	r0,_bp
      001372 08               [12] 4052 	inc	r0
      001373 86 82            [24] 4053 	mov	dpl,@r0
      001375 08               [12] 4054 	inc	r0
      001376 86 83            [24] 4055 	mov	dph,@r0
      001378 08               [12] 4056 	inc	r0
      001379 86 F0            [24] 4057 	mov	b,@r0
      00137B 12r02rD6         [24] 4058 	lcall	__vt100_clearLines
      00137E E5 81            [12] 4059 	mov	a,sp
      001380 24 FC            [12] 4060 	add	a,#0xfc
      001382 F5 81            [12] 4061 	mov	sp,a
      001384 02r14r30         [24] 4062 	ljmp	00134$
      001387                       4063 00133$:
                                   4064 ;	vt100.c:469: } else if(term->narg == 1 && term->args[0] == 1){
      001387 EF               [12] 4065 	mov	a,r7
      001388 60 5E            [24] 4066 	jz	00129$
      00138A A8*00            [24] 4067 	mov	r0,_bp
      00138C 08               [12] 4068 	inc	r0
      00138D 74 0D            [12] 4069 	mov	a,#0x0d
      00138F 26               [12] 4070 	add	a,@r0
      001390 FC               [12] 4071 	mov	r4,a
      001391 E4               [12] 4072 	clr	a
      001392 08               [12] 4073 	inc	r0
      001393 36               [12] 4074 	addc	a,@r0
      001394 FD               [12] 4075 	mov	r5,a
      001395 08               [12] 4076 	inc	r0
      001396 86 06            [24] 4077 	mov	ar6,@r0
      001398 8C 82            [24] 4078 	mov	dpl,r4
      00139A 8D 83            [24] 4079 	mov	dph,r5
      00139C 8E F0            [24] 4080 	mov	b,r6
      00139E 12r00r00         [24] 4081 	lcall	__gptrget
      0013A1 FC               [12] 4082 	mov	r4,a
      0013A2 A3               [24] 4083 	inc	dptr
      0013A3 12r00r00         [24] 4084 	lcall	__gptrget
      0013A6 FD               [12] 4085 	mov	r5,a
      0013A7 BC 01 3E         [24] 4086 	cjne	r4,#0x01,00129$
      0013AA BD 00 3B         [24] 4087 	cjne	r5,#0x00,00129$
                                   4088 ;	vt100.c:471: _vt100_clearLines(term, 0, term->cursor_y); 
      0013AD A8*00            [24] 4089 	mov	r0,_bp
      0013AF 08               [12] 4090 	inc	r0
      0013B0 74 02            [12] 4091 	mov	a,#0x02
      0013B2 26               [12] 4092 	add	a,@r0
      0013B3 FC               [12] 4093 	mov	r4,a
      0013B4 E4               [12] 4094 	clr	a
      0013B5 08               [12] 4095 	inc	r0
      0013B6 36               [12] 4096 	addc	a,@r0
      0013B7 FD               [12] 4097 	mov	r5,a
      0013B8 08               [12] 4098 	inc	r0
      0013B9 86 06            [24] 4099 	mov	ar6,@r0
      0013BB 8C 82            [24] 4100 	mov	dpl,r4
      0013BD 8D 83            [24] 4101 	mov	dph,r5
      0013BF 8E F0            [24] 4102 	mov	b,r6
      0013C1 12r00r00         [24] 4103 	lcall	__gptrget
      0013C4 FC               [12] 4104 	mov	r4,a
      0013C5 33               [12] 4105 	rlc	a
      0013C6 95 E0            [12] 4106 	subb	a,acc
      0013C8 FE               [12] 4107 	mov	r6,a
      0013C9 C0 04            [24] 4108 	push	ar4
      0013CB C0 06            [24] 4109 	push	ar6
      0013CD E4               [12] 4110 	clr	a
      0013CE C0 E0            [24] 4111 	push	acc
      0013D0 C0 E0            [24] 4112 	push	acc
      0013D2 A8*00            [24] 4113 	mov	r0,_bp
      0013D4 08               [12] 4114 	inc	r0
      0013D5 86 82            [24] 4115 	mov	dpl,@r0
      0013D7 08               [12] 4116 	inc	r0
      0013D8 86 83            [24] 4117 	mov	dph,@r0
      0013DA 08               [12] 4118 	inc	r0
      0013DB 86 F0            [24] 4119 	mov	b,@r0
      0013DD 12r02rD6         [24] 4120 	lcall	__vt100_clearLines
      0013E0 E5 81            [12] 4121 	mov	a,sp
      0013E2 24 FC            [12] 4122 	add	a,#0xfc
      0013E4 F5 81            [12] 4123 	mov	sp,a
      0013E6 80 48            [24] 4124 	sjmp	00134$
      0013E8                       4125 00129$:
                                   4126 ;	vt100.c:472: } else if(term->narg == 1 && term->args[0] == 2){
      0013E8 EF               [12] 4127 	mov	a,r7
      0013E9 60 45            [24] 4128 	jz	00134$
      0013EB A8*00            [24] 4129 	mov	r0,_bp
      0013ED 08               [12] 4130 	inc	r0
      0013EE 74 0D            [12] 4131 	mov	a,#0x0d
      0013F0 26               [12] 4132 	add	a,@r0
      0013F1 FD               [12] 4133 	mov	r5,a
      0013F2 E4               [12] 4134 	clr	a
      0013F3 08               [12] 4135 	inc	r0
      0013F4 36               [12] 4136 	addc	a,@r0
      0013F5 FE               [12] 4137 	mov	r6,a
      0013F6 08               [12] 4138 	inc	r0
      0013F7 86 07            [24] 4139 	mov	ar7,@r0
      0013F9 8D 82            [24] 4140 	mov	dpl,r5
      0013FB 8E 83            [24] 4141 	mov	dph,r6
      0013FD 8F F0            [24] 4142 	mov	b,r7
      0013FF 12r00r00         [24] 4143 	lcall	__gptrget
      001402 FD               [12] 4144 	mov	r5,a
      001403 A3               [24] 4145 	inc	dptr
      001404 12r00r00         [24] 4146 	lcall	__gptrget
      001407 FE               [12] 4147 	mov	r6,a
      001408 BD 02 25         [24] 4148 	cjne	r5,#0x02,00134$
      00140B BE 00 22         [24] 4149 	cjne	r6,#0x00,00134$
                                   4150 ;	vt100.c:474: _vt100_clearLines(term, 0, VT100_HEIGHT - 1);
      00140E 74 17            [12] 4151 	mov	a,#0x17
      001410 C0 E0            [24] 4152 	push	acc
      001412 E4               [12] 4153 	clr	a
      001413 C0 E0            [24] 4154 	push	acc
      001415 C0 E0            [24] 4155 	push	acc
      001417 C0 E0            [24] 4156 	push	acc
      001419 A8*00            [24] 4157 	mov	r0,_bp
      00141B 08               [12] 4158 	inc	r0
      00141C 86 82            [24] 4159 	mov	dpl,@r0
      00141E 08               [12] 4160 	inc	r0
      00141F 86 83            [24] 4161 	mov	dph,@r0
      001421 08               [12] 4162 	inc	r0
      001422 86 F0            [24] 4163 	mov	b,@r0
      001424 12r02rD6         [24] 4164 	lcall	__vt100_clearLines
      001427 E5 81            [12] 4165 	mov	a,sp
      001429 24 FC            [12] 4166 	add	a,#0xfc
      00142B F5 81            [12] 4167 	mov	sp,a
                                   4168 ;	vt100.c:476: _vt100_resetScroll(); 
      00142D 12r01rC4         [24] 4169 	lcall	__vt100_resetScroll
      001430                       4170 00134$:
                                   4171 ;	vt100.c:478: term->state = _st_idle; 
      001430 A8*00            [24] 4172 	mov	r0,_bp
      001432 08               [12] 4173 	inc	r0
      001433 74 16            [12] 4174 	mov	a,#0x16
      001435 26               [12] 4175 	add	a,@r0
      001436 FD               [12] 4176 	mov	r5,a
      001437 E4               [12] 4177 	clr	a
      001438 08               [12] 4178 	inc	r0
      001439 36               [12] 4179 	addc	a,@r0
      00143A FE               [12] 4180 	mov	r6,a
      00143B 08               [12] 4181 	inc	r0
      00143C 86 07            [24] 4182 	mov	ar7,@r0
      00143E 8D 82            [24] 4183 	mov	dpl,r5
      001440 8E 83            [24] 4184 	mov	dph,r6
      001442 8F F0            [24] 4185 	mov	b,r7
      001444 74r23            [12] 4186 	mov	a,#__st_idle
      001446 12r00r00         [24] 4187 	lcall	__gptrput
      001449 A3               [24] 4188 	inc	dptr
      00144A 74s24            [12] 4189 	mov	a,#(__st_idle >> 8)
      00144C 12r00r00         [24] 4190 	lcall	__gptrput
                                   4191 ;	vt100.c:479: break;
      00144F 02r1Cr81         [24] 4192 	ljmp	00200$
                                   4193 ;	vt100.c:481: case 'K':{// clear line from cursor right/left
      001452                       4194 00137$:
                                   4195 ;	vt100.c:482: uint16_t x = VT100_CURSOR_X(term);
      001452 A8*00            [24] 4196 	mov	r0,_bp
      001454 08               [12] 4197 	inc	r0
      001455 74 01            [12] 4198 	mov	a,#0x01
      001457 26               [12] 4199 	add	a,@r0
      001458 FD               [12] 4200 	mov	r5,a
      001459 E4               [12] 4201 	clr	a
      00145A 08               [12] 4202 	inc	r0
      00145B 36               [12] 4203 	addc	a,@r0
      00145C FE               [12] 4204 	mov	r6,a
      00145D 08               [12] 4205 	inc	r0
      00145E 86 07            [24] 4206 	mov	ar7,@r0
      001460 8D 82            [24] 4207 	mov	dpl,r5
      001462 8E 83            [24] 4208 	mov	dph,r6
      001464 8F F0            [24] 4209 	mov	b,r7
      001466 12r00r00         [24] 4210 	lcall	__gptrget
      001469 FD               [12] 4211 	mov	r5,a
      00146A A8*00            [24] 4212 	mov	r0,_bp
      00146C 08               [12] 4213 	inc	r0
      00146D 74 07            [12] 4214 	mov	a,#0x07
      00146F 26               [12] 4215 	add	a,@r0
      001470 FC               [12] 4216 	mov	r4,a
      001471 E4               [12] 4217 	clr	a
      001472 08               [12] 4218 	inc	r0
      001473 36               [12] 4219 	addc	a,@r0
      001474 FE               [12] 4220 	mov	r6,a
      001475 08               [12] 4221 	inc	r0
      001476 86 07            [24] 4222 	mov	ar7,@r0
      001478 8C 82            [24] 4223 	mov	dpl,r4
      00147A 8E 83            [24] 4224 	mov	dph,r6
      00147C 8F F0            [24] 4225 	mov	b,r7
      00147E 12r00r00         [24] 4226 	lcall	__gptrget
      001481 FC               [12] 4227 	mov	r4,a
      001482 C2 D5            [12] 4228 	clr	F0
      001484 8C F0            [24] 4229 	mov	b,r4
      001486 ED               [12] 4230 	mov	a,r5
      001487 30 E7 04         [24] 4231 	jnb	acc.7,00437$
      00148A B2 D5            [12] 4232 	cpl	F0
      00148C F4               [12] 4233 	cpl	a
      00148D 04               [12] 4234 	inc	a
      00148E                       4235 00437$:
      00148E A4               [48] 4236 	mul	ab
      00148F 30 D5 0A         [24] 4237 	jnb	F0,00438$
      001492 F4               [12] 4238 	cpl	a
      001493 24 01            [12] 4239 	add	a,#0x01
      001495 C5 F0            [12] 4240 	xch	a,b
      001497 F4               [12] 4241 	cpl	a
      001498 34 00            [12] 4242 	addc	a,#0x00
      00149A C5 F0            [12] 4243 	xch	a,b
      00149C                       4244 00438$:
      00149C FD               [12] 4245 	mov	r5,a
      00149D AF F0            [24] 4246 	mov	r7,b
      00149F E5*00            [12] 4247 	mov	a,_bp
      0014A1 24 0C            [12] 4248 	add	a,#0x0c
      0014A3 F8               [12] 4249 	mov	r0,a
      0014A4 A6 05            [24] 4250 	mov	@r0,ar5
      0014A6 08               [12] 4251 	inc	r0
      0014A7 A6 07            [24] 4252 	mov	@r0,ar7
                                   4253 ;	vt100.c:483: uint16_t y = VT100_CURSOR_Y(term);
      0014A9 A8*00            [24] 4254 	mov	r0,_bp
      0014AB 08               [12] 4255 	inc	r0
      0014AC 86 82            [24] 4256 	mov	dpl,@r0
      0014AE 08               [12] 4257 	inc	r0
      0014AF 86 83            [24] 4258 	mov	dph,@r0
      0014B1 08               [12] 4259 	inc	r0
      0014B2 86 F0            [24] 4260 	mov	b,@r0
      0014B4 12r01rDD         [24] 4261 	lcall	_VT100_CURSOR_Y
      0014B7 AC 82            [24] 4262 	mov	r4,dpl
      0014B9 AD 83            [24] 4263 	mov	r5,dph
      0014BB E5*00            [12] 4264 	mov	a,_bp
      0014BD 24 0E            [12] 4265 	add	a,#0x0e
      0014BF F8               [12] 4266 	mov	r0,a
      0014C0 A6 04            [24] 4267 	mov	@r0,ar4
      0014C2 08               [12] 4268 	inc	r0
      0014C3 A6 05            [24] 4269 	mov	@r0,ar5
                                   4270 ;	vt100.c:485: if(term->narg == 0 || (term->narg == 1 && term->args[0] == 0)){
      0014C5 A8*00            [24] 4271 	mov	r0,_bp
      0014C7 08               [12] 4272 	inc	r0
      0014C8 74 0C            [12] 4273 	mov	a,#0x0c
      0014CA 26               [12] 4274 	add	a,@r0
      0014CB FA               [12] 4275 	mov	r2,a
      0014CC E4               [12] 4276 	clr	a
      0014CD 08               [12] 4277 	inc	r0
      0014CE 36               [12] 4278 	addc	a,@r0
      0014CF FB               [12] 4279 	mov	r3,a
      0014D0 08               [12] 4280 	inc	r0
      0014D1 86 07            [24] 4281 	mov	ar7,@r0
      0014D3 8A 82            [24] 4282 	mov	dpl,r2
      0014D5 8B 83            [24] 4283 	mov	dph,r3
      0014D7 8F F0            [24] 4284 	mov	b,r7
      0014D9 12r00r00         [24] 4285 	lcall	__gptrget
      0014DC FF               [12] 4286 	mov	r7,a
      0014DD 60 2A            [24] 4287 	jz	00145$
      0014DF BF 01 03         [24] 4288 	cjne	r7,#0x01,00440$
      0014E2 EF               [12] 4289 	mov	a,r7
      0014E3 80 01            [24] 4290 	sjmp	00441$
      0014E5                       4291 00440$:
      0014E5 E4               [12] 4292 	clr	a
      0014E6                       4293 00441$:
      0014E6 FF               [12] 4294 	mov	r7,a
      0014E7 60 65            [24] 4295 	jz	00146$
      0014E9 A8*00            [24] 4296 	mov	r0,_bp
      0014EB 08               [12] 4297 	inc	r0
      0014EC 74 0D            [12] 4298 	mov	a,#0x0d
      0014EE 26               [12] 4299 	add	a,@r0
      0014EF FA               [12] 4300 	mov	r2,a
      0014F0 E4               [12] 4301 	clr	a
      0014F1 08               [12] 4302 	inc	r0
      0014F2 36               [12] 4303 	addc	a,@r0
      0014F3 FB               [12] 4304 	mov	r3,a
      0014F4 08               [12] 4305 	inc	r0
      0014F5 86 06            [24] 4306 	mov	ar6,@r0
      0014F7 8A 82            [24] 4307 	mov	dpl,r2
      0014F9 8B 83            [24] 4308 	mov	dph,r3
      0014FB 8E F0            [24] 4309 	mov	b,r6
      0014FD 12r00r00         [24] 4310 	lcall	__gptrget
      001500 FA               [12] 4311 	mov	r2,a
      001501 A3               [24] 4312 	inc	dptr
      001502 12r00r00         [24] 4313 	lcall	__gptrget
      001505 FB               [12] 4314 	mov	r3,a
      001506 4A               [12] 4315 	orl	a,r2
      001507 70 45            [24] 4316 	jnz	00146$
      001509                       4317 00145$:
                                   4318 ;	vt100.c:488: vga_fillRect(x, y, VT100_SCREEN_WIDTH - x, VT100_CHAR_HEIGHT, term->back_color);
      001509 A8*00            [24] 4319 	mov	r0,_bp
      00150B 08               [12] 4320 	inc	r0
      00150C 74 09            [12] 4321 	mov	a,#0x09
      00150E 26               [12] 4322 	add	a,@r0
      00150F FA               [12] 4323 	mov	r2,a
      001510 E4               [12] 4324 	clr	a
      001511 08               [12] 4325 	inc	r0
      001512 36               [12] 4326 	addc	a,@r0
      001513 FB               [12] 4327 	mov	r3,a
      001514 08               [12] 4328 	inc	r0
      001515 86 06            [24] 4329 	mov	ar6,@r0
      001517 8A 82            [24] 4330 	mov	dpl,r2
      001519 8B 83            [24] 4331 	mov	dph,r3
      00151B 8E F0            [24] 4332 	mov	b,r6
      00151D 12r00r00         [24] 4333 	lcall	__gptrget
      001520 FA               [12] 4334 	mov	r2,a
      001521 E5*00            [12] 4335 	mov	a,_bp
      001523 24 0C            [12] 4336 	add	a,#0x0c
      001525 F8               [12] 4337 	mov	r0,a
      001526 86 06            [24] 4338 	mov	ar6,@r0
      001528 8E 03            [24] 4339 	mov	ar3,r6
      00152A 74 50            [12] 4340 	mov	a,#0x50
      00152C C3               [12] 4341 	clr	c
      00152D 9B               [12] 4342 	subb	a,r3
      00152E FB               [12] 4343 	mov	r3,a
      00152F E5*00            [12] 4344 	mov	a,_bp
      001531 24 0E            [12] 4345 	add	a,#0x0e
      001533 F8               [12] 4346 	mov	r0,a
      001534 86 05            [24] 4347 	mov	ar5,@r0
      001536 C0 02            [24] 4348 	push	ar2
      001538 74 01            [12] 4349 	mov	a,#0x01
      00153A C0 E0            [24] 4350 	push	acc
      00153C C0 03            [24] 4351 	push	ar3
      00153E C0 05            [24] 4352 	push	ar5
      001540 8E 82            [24] 4353 	mov	dpl,r6
      001542 12r00r77         [24] 4354 	lcall	_vga_fillRect
      001545 E5 81            [12] 4355 	mov	a,sp
      001547 24 FC            [12] 4356 	add	a,#0xfc
      001549 F5 81            [12] 4357 	mov	sp,a
      00154B 02r16r10         [24] 4358 	ljmp	00147$
      00154E                       4359 00146$:
                                   4360 ;	vt100.c:489: } else if(term->narg == 1 && term->args[0] == 1){
      00154E EF               [12] 4361 	mov	a,r7
      00154F 60 62            [24] 4362 	jz	00142$
      001551 A8*00            [24] 4363 	mov	r0,_bp
      001553 08               [12] 4364 	inc	r0
      001554 74 0D            [12] 4365 	mov	a,#0x0d
      001556 26               [12] 4366 	add	a,@r0
      001557 FC               [12] 4367 	mov	r4,a
      001558 E4               [12] 4368 	clr	a
      001559 08               [12] 4369 	inc	r0
      00155A 36               [12] 4370 	addc	a,@r0
      00155B FD               [12] 4371 	mov	r5,a
      00155C 08               [12] 4372 	inc	r0
      00155D 86 06            [24] 4373 	mov	ar6,@r0
      00155F 8C 82            [24] 4374 	mov	dpl,r4
      001561 8D 83            [24] 4375 	mov	dph,r5
      001563 8E F0            [24] 4376 	mov	b,r6
      001565 12r00r00         [24] 4377 	lcall	__gptrget
      001568 FC               [12] 4378 	mov	r4,a
      001569 A3               [24] 4379 	inc	dptr
      00156A 12r00r00         [24] 4380 	lcall	__gptrget
      00156D FD               [12] 4381 	mov	r5,a
      00156E BC 01 42         [24] 4382 	cjne	r4,#0x01,00142$
      001571 BD 00 3F         [24] 4383 	cjne	r5,#0x00,00142$
                                   4384 ;	vt100.c:491: vga_fillRect(0, y, x + VT100_CHAR_WIDTH, VT100_CHAR_HEIGHT, term->back_color);
      001574 A8*00            [24] 4385 	mov	r0,_bp
      001576 08               [12] 4386 	inc	r0
      001577 74 09            [12] 4387 	mov	a,#0x09
      001579 26               [12] 4388 	add	a,@r0
      00157A FC               [12] 4389 	mov	r4,a
      00157B E4               [12] 4390 	clr	a
      00157C 08               [12] 4391 	inc	r0
      00157D 36               [12] 4392 	addc	a,@r0
      00157E FD               [12] 4393 	mov	r5,a
      00157F 08               [12] 4394 	inc	r0
      001580 86 06            [24] 4395 	mov	ar6,@r0
      001582 8C 82            [24] 4396 	mov	dpl,r4
      001584 8D 83            [24] 4397 	mov	dph,r5
      001586 8E F0            [24] 4398 	mov	b,r6
      001588 12r00r00         [24] 4399 	lcall	__gptrget
      00158B FC               [12] 4400 	mov	r4,a
      00158C E5*00            [12] 4401 	mov	a,_bp
      00158E 24 0C            [12] 4402 	add	a,#0x0c
      001590 F8               [12] 4403 	mov	r0,a
      001591 86 06            [24] 4404 	mov	ar6,@r0
      001593 0E               [12] 4405 	inc	r6
      001594 E5*00            [12] 4406 	mov	a,_bp
      001596 24 0E            [12] 4407 	add	a,#0x0e
      001598 F8               [12] 4408 	mov	r0,a
      001599 86 05            [24] 4409 	mov	ar5,@r0
      00159B C0 04            [24] 4410 	push	ar4
      00159D 74 01            [12] 4411 	mov	a,#0x01
      00159F C0 E0            [24] 4412 	push	acc
      0015A1 C0 06            [24] 4413 	push	ar6
      0015A3 C0 05            [24] 4414 	push	ar5
      0015A5 75 82 00         [24] 4415 	mov	dpl,#0x00
      0015A8 12r00r77         [24] 4416 	lcall	_vga_fillRect
      0015AB E5 81            [12] 4417 	mov	a,sp
      0015AD 24 FC            [12] 4418 	add	a,#0xfc
      0015AF F5 81            [12] 4419 	mov	sp,a
      0015B1 80 5D            [24] 4420 	sjmp	00147$
      0015B3                       4421 00142$:
                                   4422 ;	vt100.c:492: } else if(term->narg == 1 && term->args[0] == 2){
      0015B3 EF               [12] 4423 	mov	a,r7
      0015B4 60 5A            [24] 4424 	jz	00147$
      0015B6 A8*00            [24] 4425 	mov	r0,_bp
      0015B8 08               [12] 4426 	inc	r0
      0015B9 74 0D            [12] 4427 	mov	a,#0x0d
      0015BB 26               [12] 4428 	add	a,@r0
      0015BC FD               [12] 4429 	mov	r5,a
      0015BD E4               [12] 4430 	clr	a
      0015BE 08               [12] 4431 	inc	r0
      0015BF 36               [12] 4432 	addc	a,@r0
      0015C0 FE               [12] 4433 	mov	r6,a
      0015C1 08               [12] 4434 	inc	r0
      0015C2 86 07            [24] 4435 	mov	ar7,@r0
      0015C4 8D 82            [24] 4436 	mov	dpl,r5
      0015C6 8E 83            [24] 4437 	mov	dph,r6
      0015C8 8F F0            [24] 4438 	mov	b,r7
      0015CA 12r00r00         [24] 4439 	lcall	__gptrget
      0015CD FD               [12] 4440 	mov	r5,a
      0015CE A3               [24] 4441 	inc	dptr
      0015CF 12r00r00         [24] 4442 	lcall	__gptrget
      0015D2 FE               [12] 4443 	mov	r6,a
      0015D3 BD 02 3A         [24] 4444 	cjne	r5,#0x02,00147$
      0015D6 BE 00 37         [24] 4445 	cjne	r6,#0x00,00147$
                                   4446 ;	vt100.c:494: vga_fillRect(0, y, VT100_SCREEN_WIDTH, VT100_CHAR_HEIGHT, term->back_color);
      0015D9 A8*00            [24] 4447 	mov	r0,_bp
      0015DB 08               [12] 4448 	inc	r0
      0015DC 74 09            [12] 4449 	mov	a,#0x09
      0015DE 26               [12] 4450 	add	a,@r0
      0015DF FD               [12] 4451 	mov	r5,a
      0015E0 E4               [12] 4452 	clr	a
      0015E1 08               [12] 4453 	inc	r0
      0015E2 36               [12] 4454 	addc	a,@r0
      0015E3 FE               [12] 4455 	mov	r6,a
      0015E4 08               [12] 4456 	inc	r0
      0015E5 86 07            [24] 4457 	mov	ar7,@r0
      0015E7 8D 82            [24] 4458 	mov	dpl,r5
      0015E9 8E 83            [24] 4459 	mov	dph,r6
      0015EB 8F F0            [24] 4460 	mov	b,r7
      0015ED 12r00r00         [24] 4461 	lcall	__gptrget
      0015F0 FD               [12] 4462 	mov	r5,a
      0015F1 E5*00            [12] 4463 	mov	a,_bp
      0015F3 24 0E            [12] 4464 	add	a,#0x0e
      0015F5 F8               [12] 4465 	mov	r0,a
      0015F6 86 04            [24] 4466 	mov	ar4,@r0
      0015F8 C0 05            [24] 4467 	push	ar5
      0015FA 74 01            [12] 4468 	mov	a,#0x01
      0015FC C0 E0            [24] 4469 	push	acc
      0015FE 74 50            [12] 4470 	mov	a,#0x50
      001600 C0 E0            [24] 4471 	push	acc
      001602 C0 04            [24] 4472 	push	ar4
      001604 75 82 00         [24] 4473 	mov	dpl,#0x00
      001607 12r00r77         [24] 4474 	lcall	_vga_fillRect
      00160A E5 81            [12] 4475 	mov	a,sp
      00160C 24 FC            [12] 4476 	add	a,#0xfc
      00160E F5 81            [12] 4477 	mov	sp,a
      001610                       4478 00147$:
                                   4479 ;	vt100.c:496: term->state = _st_idle; 
      001610 A8*00            [24] 4480 	mov	r0,_bp
      001612 08               [12] 4481 	inc	r0
      001613 74 16            [12] 4482 	mov	a,#0x16
      001615 26               [12] 4483 	add	a,@r0
      001616 FD               [12] 4484 	mov	r5,a
      001617 E4               [12] 4485 	clr	a
      001618 08               [12] 4486 	inc	r0
      001619 36               [12] 4487 	addc	a,@r0
      00161A FE               [12] 4488 	mov	r6,a
      00161B 08               [12] 4489 	inc	r0
      00161C 86 07            [24] 4490 	mov	ar7,@r0
      00161E 8D 82            [24] 4491 	mov	dpl,r5
      001620 8E 83            [24] 4492 	mov	dph,r6
      001622 8F F0            [24] 4493 	mov	b,r7
      001624 74r23            [12] 4494 	mov	a,#__st_idle
      001626 12r00r00         [24] 4495 	lcall	__gptrput
      001629 A3               [24] 4496 	inc	dptr
      00162A 74s24            [12] 4497 	mov	a,#(__st_idle >> 8)
      00162C 12r00r00         [24] 4498 	lcall	__gptrput
                                   4499 ;	vt100.c:497: break;
      00162F 02r1Cr81         [24] 4500 	ljmp	00200$
                                   4501 ;	vt100.c:501: case 'M': // delete lines (args[0] = number of lines)
      001632                       4502 00151$:
                                   4503 ;	vt100.c:502: term->state = _st_idle;
      001632 A8*00            [24] 4504 	mov	r0,_bp
      001634 08               [12] 4505 	inc	r0
      001635 74 16            [12] 4506 	mov	a,#0x16
      001637 26               [12] 4507 	add	a,@r0
      001638 FD               [12] 4508 	mov	r5,a
      001639 E4               [12] 4509 	clr	a
      00163A 08               [12] 4510 	inc	r0
      00163B 36               [12] 4511 	addc	a,@r0
      00163C FE               [12] 4512 	mov	r6,a
      00163D 08               [12] 4513 	inc	r0
      00163E 86 07            [24] 4514 	mov	ar7,@r0
      001640 8D 82            [24] 4515 	mov	dpl,r5
      001642 8E 83            [24] 4516 	mov	dph,r6
      001644 8F F0            [24] 4517 	mov	b,r7
      001646 74r23            [12] 4518 	mov	a,#__st_idle
      001648 12r00r00         [24] 4519 	lcall	__gptrput
      00164B A3               [24] 4520 	inc	dptr
      00164C 74s24            [12] 4521 	mov	a,#(__st_idle >> 8)
      00164E 12r00r00         [24] 4522 	lcall	__gptrput
                                   4523 ;	vt100.c:503: break; 
      001651 02r1Cr81         [24] 4524 	ljmp	00200$
                                   4525 ;	vt100.c:504: case 'P': {// delete characters args[0] or 1 in front of cursor
      001654                       4526 00152$:
                                   4527 ;	vt100.c:506: int n = ((term->narg > 0)?term->args[0]:1);
      001654 A8*00            [24] 4528 	mov	r0,_bp
      001656 08               [12] 4529 	inc	r0
      001657 74 0C            [12] 4530 	mov	a,#0x0c
      001659 26               [12] 4531 	add	a,@r0
      00165A FD               [12] 4532 	mov	r5,a
      00165B E4               [12] 4533 	clr	a
      00165C 08               [12] 4534 	inc	r0
      00165D 36               [12] 4535 	addc	a,@r0
      00165E FE               [12] 4536 	mov	r6,a
      00165F 08               [12] 4537 	inc	r0
      001660 86 07            [24] 4538 	mov	ar7,@r0
      001662 8D 82            [24] 4539 	mov	dpl,r5
      001664 8E 83            [24] 4540 	mov	dph,r6
      001666 8F F0            [24] 4541 	mov	b,r7
      001668 12r00r00         [24] 4542 	lcall	__gptrget
      00166B 60 1F            [24] 4543 	jz	00217$
      00166D A8*00            [24] 4544 	mov	r0,_bp
      00166F 08               [12] 4545 	inc	r0
      001670 74 0D            [12] 4546 	mov	a,#0x0d
      001672 26               [12] 4547 	add	a,@r0
      001673 FE               [12] 4548 	mov	r6,a
      001674 E4               [12] 4549 	clr	a
      001675 08               [12] 4550 	inc	r0
      001676 36               [12] 4551 	addc	a,@r0
      001677 FD               [12] 4552 	mov	r5,a
      001678 08               [12] 4553 	inc	r0
      001679 86 07            [24] 4554 	mov	ar7,@r0
      00167B 8E 82            [24] 4555 	mov	dpl,r6
      00167D 8D 83            [24] 4556 	mov	dph,r5
      00167F 8F F0            [24] 4557 	mov	b,r7
      001681 12r00r00         [24] 4558 	lcall	__gptrget
      001684 FE               [12] 4559 	mov	r6,a
      001685 A3               [24] 4560 	inc	dptr
      001686 12r00r00         [24] 4561 	lcall	__gptrget
      001689 FF               [12] 4562 	mov	r7,a
      00168A 80 04            [24] 4563 	sjmp	00218$
      00168C                       4564 00217$:
      00168C 7E 01            [12] 4565 	mov	r6,#0x01
      00168E 7F 00            [12] 4566 	mov	r7,#0x00
      001690                       4567 00218$:
                                   4568 ;	vt100.c:507: _vt100_move(term, -n, 0);
      001690 C3               [12] 4569 	clr	c
      001691 E4               [12] 4570 	clr	a
      001692 9E               [12] 4571 	subb	a,r6
      001693 FC               [12] 4572 	mov	r4,a
      001694 E4               [12] 4573 	clr	a
      001695 9F               [12] 4574 	subb	a,r7
      001696 FD               [12] 4575 	mov	r5,a
      001697 C0 07            [24] 4576 	push	ar7
      001699 C0 06            [24] 4577 	push	ar6
      00169B E4               [12] 4578 	clr	a
      00169C C0 E0            [24] 4579 	push	acc
      00169E C0 E0            [24] 4580 	push	acc
      0016A0 C0 04            [24] 4581 	push	ar4
      0016A2 C0 05            [24] 4582 	push	ar5
      0016A4 A8*00            [24] 4583 	mov	r0,_bp
      0016A6 08               [12] 4584 	inc	r0
      0016A7 86 82            [24] 4585 	mov	dpl,@r0
      0016A9 08               [12] 4586 	inc	r0
      0016AA 86 83            [24] 4587 	mov	dph,@r0
      0016AC 08               [12] 4588 	inc	r0
      0016AD 86 F0            [24] 4589 	mov	b,@r0
      0016AF 12r05rA5         [24] 4590 	lcall	__vt100_move
      0016B2 E5 81            [12] 4591 	mov	a,sp
      0016B4 24 FC            [12] 4592 	add	a,#0xfc
      0016B6 F5 81            [12] 4593 	mov	sp,a
      0016B8 D0 06            [24] 4594 	pop	ar6
      0016BA D0 07            [24] 4595 	pop	ar7
                                   4596 ;	vt100.c:508: for(int c = 0; c < n; c++){
      0016BC 7C 00            [12] 4597 	mov	r4,#0x00
      0016BE 7D 00            [12] 4598 	mov	r5,#0x00
      0016C0                       4599 00198$:
      0016C0 C3               [12] 4600 	clr	c
      0016C1 EC               [12] 4601 	mov	a,r4
      0016C2 9E               [12] 4602 	subb	a,r6
      0016C3 ED               [12] 4603 	mov	a,r5
      0016C4 64 80            [12] 4604 	xrl	a,#0x80
      0016C6 8F F0            [24] 4605 	mov	b,r7
      0016C8 63 F0 80         [24] 4606 	xrl	b,#0x80
      0016CB 95 F0            [12] 4607 	subb	a,b
      0016CD 50 2B            [24] 4608 	jnc	00153$
                                   4609 ;	vt100.c:509: _vt100_putc(term, ' ');
      0016CF C0 07            [24] 4610 	push	ar7
      0016D1 C0 06            [24] 4611 	push	ar6
      0016D3 C0 05            [24] 4612 	push	ar5
      0016D5 C0 04            [24] 4613 	push	ar4
      0016D7 74 20            [12] 4614 	mov	a,#0x20
      0016D9 C0 E0            [24] 4615 	push	acc
      0016DB A8*00            [24] 4616 	mov	r0,_bp
      0016DD 08               [12] 4617 	inc	r0
      0016DE 86 82            [24] 4618 	mov	dpl,@r0
      0016E0 08               [12] 4619 	inc	r0
      0016E1 86 83            [24] 4620 	mov	dph,@r0
      0016E3 08               [12] 4621 	inc	r0
      0016E4 86 F0            [24] 4622 	mov	b,@r0
      0016E6 12r08r4A         [24] 4623 	lcall	__vt100_putc
      0016E9 15 81            [12] 4624 	dec	sp
      0016EB D0 04            [24] 4625 	pop	ar4
      0016ED D0 05            [24] 4626 	pop	ar5
      0016EF D0 06            [24] 4627 	pop	ar6
      0016F1 D0 07            [24] 4628 	pop	ar7
                                   4629 ;	vt100.c:508: for(int c = 0; c < n; c++){
      0016F3 0C               [12] 4630 	inc	r4
      0016F4 BC 00 C9         [24] 4631 	cjne	r4,#0x00,00198$
      0016F7 0D               [12] 4632 	inc	r5
      0016F8 80 C6            [24] 4633 	sjmp	00198$
      0016FA                       4634 00153$:
                                   4635 ;	vt100.c:511: term->state = _st_idle;
      0016FA A8*00            [24] 4636 	mov	r0,_bp
      0016FC 08               [12] 4637 	inc	r0
      0016FD 74 16            [12] 4638 	mov	a,#0x16
      0016FF 26               [12] 4639 	add	a,@r0
      001700 FD               [12] 4640 	mov	r5,a
      001701 E4               [12] 4641 	clr	a
      001702 08               [12] 4642 	inc	r0
      001703 36               [12] 4643 	addc	a,@r0
      001704 FE               [12] 4644 	mov	r6,a
      001705 08               [12] 4645 	inc	r0
      001706 86 07            [24] 4646 	mov	ar7,@r0
      001708 8D 82            [24] 4647 	mov	dpl,r5
      00170A 8E 83            [24] 4648 	mov	dph,r6
      00170C 8F F0            [24] 4649 	mov	b,r7
      00170E 74r23            [12] 4650 	mov	a,#__st_idle
      001710 12r00r00         [24] 4651 	lcall	__gptrput
      001713 A3               [24] 4652 	inc	dptr
      001714 74s24            [12] 4653 	mov	a,#(__st_idle >> 8)
      001716 12r00r00         [24] 4654 	lcall	__gptrput
                                   4655 ;	vt100.c:512: break;
      001719 02r1Cr81         [24] 4656 	ljmp	00200$
                                   4657 ;	vt100.c:514: case 'c':{ // query device code
      00171C                       4658 00154$:
                                   4659 ;	vt100.c:516: term->state = _st_idle; 
      00171C A8*00            [24] 4660 	mov	r0,_bp
      00171E 08               [12] 4661 	inc	r0
      00171F 74 16            [12] 4662 	mov	a,#0x16
      001721 26               [12] 4663 	add	a,@r0
      001722 FD               [12] 4664 	mov	r5,a
      001723 E4               [12] 4665 	clr	a
      001724 08               [12] 4666 	inc	r0
      001725 36               [12] 4667 	addc	a,@r0
      001726 FE               [12] 4668 	mov	r6,a
      001727 08               [12] 4669 	inc	r0
      001728 86 07            [24] 4670 	mov	ar7,@r0
      00172A 8D 82            [24] 4671 	mov	dpl,r5
      00172C 8E 83            [24] 4672 	mov	dph,r6
      00172E 8F F0            [24] 4673 	mov	b,r7
      001730 74r23            [12] 4674 	mov	a,#__st_idle
      001732 12r00r00         [24] 4675 	lcall	__gptrput
      001735 A3               [24] 4676 	inc	dptr
      001736 74s24            [12] 4677 	mov	a,#(__st_idle >> 8)
      001738 12r00r00         [24] 4678 	lcall	__gptrput
                                   4679 ;	vt100.c:517: break; 
      00173B 02r1Cr81         [24] 4680 	ljmp	00200$
                                   4681 ;	vt100.c:519: case 'x': {
      00173E                       4682 00155$:
                                   4683 ;	vt100.c:520: term->state = _st_idle;
      00173E A8*00            [24] 4684 	mov	r0,_bp
      001740 08               [12] 4685 	inc	r0
      001741 74 16            [12] 4686 	mov	a,#0x16
      001743 26               [12] 4687 	add	a,@r0
      001744 FD               [12] 4688 	mov	r5,a
      001745 E4               [12] 4689 	clr	a
      001746 08               [12] 4690 	inc	r0
      001747 36               [12] 4691 	addc	a,@r0
      001748 FE               [12] 4692 	mov	r6,a
      001749 08               [12] 4693 	inc	r0
      00174A 86 07            [24] 4694 	mov	ar7,@r0
      00174C 8D 82            [24] 4695 	mov	dpl,r5
      00174E 8E 83            [24] 4696 	mov	dph,r6
      001750 8F F0            [24] 4697 	mov	b,r7
      001752 74r23            [12] 4698 	mov	a,#__st_idle
      001754 12r00r00         [24] 4699 	lcall	__gptrput
      001757 A3               [24] 4700 	inc	dptr
      001758 74s24            [12] 4701 	mov	a,#(__st_idle >> 8)
      00175A 12r00r00         [24] 4702 	lcall	__gptrput
                                   4703 ;	vt100.c:521: break;
      00175D 02r1Cr81         [24] 4704 	ljmp	00200$
                                   4705 ;	vt100.c:523: case 's':{// save cursor pos
      001760                       4706 00156$:
                                   4707 ;	vt100.c:524: term->saved_cursor_x = term->cursor_x;
      001760 A8*00            [24] 4708 	mov	r0,_bp
      001762 08               [12] 4709 	inc	r0
      001763 74 03            [12] 4710 	mov	a,#0x03
      001765 26               [12] 4711 	add	a,@r0
      001766 FD               [12] 4712 	mov	r5,a
      001767 E4               [12] 4713 	clr	a
      001768 08               [12] 4714 	inc	r0
      001769 36               [12] 4715 	addc	a,@r0
      00176A FE               [12] 4716 	mov	r6,a
      00176B 08               [12] 4717 	inc	r0
      00176C 86 07            [24] 4718 	mov	ar7,@r0
      00176E A8*00            [24] 4719 	mov	r0,_bp
      001770 08               [12] 4720 	inc	r0
      001771 74 01            [12] 4721 	mov	a,#0x01
      001773 26               [12] 4722 	add	a,@r0
      001774 FA               [12] 4723 	mov	r2,a
      001775 E4               [12] 4724 	clr	a
      001776 08               [12] 4725 	inc	r0
      001777 36               [12] 4726 	addc	a,@r0
      001778 FB               [12] 4727 	mov	r3,a
      001779 08               [12] 4728 	inc	r0
      00177A 86 04            [24] 4729 	mov	ar4,@r0
      00177C 8A 82            [24] 4730 	mov	dpl,r2
      00177E 8B 83            [24] 4731 	mov	dph,r3
      001780 8C F0            [24] 4732 	mov	b,r4
      001782 12r00r00         [24] 4733 	lcall	__gptrget
      001785 8D 82            [24] 4734 	mov	dpl,r5
      001787 8E 83            [24] 4735 	mov	dph,r6
      001789 8F F0            [24] 4736 	mov	b,r7
      00178B 12r00r00         [24] 4737 	lcall	__gptrput
                                   4738 ;	vt100.c:525: term->saved_cursor_y = term->cursor_y;
      00178E A8*00            [24] 4739 	mov	r0,_bp
      001790 08               [12] 4740 	inc	r0
      001791 74 04            [12] 4741 	mov	a,#0x04
      001793 26               [12] 4742 	add	a,@r0
      001794 FD               [12] 4743 	mov	r5,a
      001795 E4               [12] 4744 	clr	a
      001796 08               [12] 4745 	inc	r0
      001797 36               [12] 4746 	addc	a,@r0
      001798 FE               [12] 4747 	mov	r6,a
      001799 08               [12] 4748 	inc	r0
      00179A 86 07            [24] 4749 	mov	ar7,@r0
      00179C A8*00            [24] 4750 	mov	r0,_bp
      00179E 08               [12] 4751 	inc	r0
      00179F 74 02            [12] 4752 	mov	a,#0x02
      0017A1 26               [12] 4753 	add	a,@r0
      0017A2 FA               [12] 4754 	mov	r2,a
      0017A3 E4               [12] 4755 	clr	a
      0017A4 08               [12] 4756 	inc	r0
      0017A5 36               [12] 4757 	addc	a,@r0
      0017A6 FB               [12] 4758 	mov	r3,a
      0017A7 08               [12] 4759 	inc	r0
      0017A8 86 04            [24] 4760 	mov	ar4,@r0
      0017AA 8A 82            [24] 4761 	mov	dpl,r2
      0017AC 8B 83            [24] 4762 	mov	dph,r3
      0017AE 8C F0            [24] 4763 	mov	b,r4
      0017B0 12r00r00         [24] 4764 	lcall	__gptrget
      0017B3 FA               [12] 4765 	mov	r2,a
      0017B4 8D 82            [24] 4766 	mov	dpl,r5
      0017B6 8E 83            [24] 4767 	mov	dph,r6
      0017B8 8F F0            [24] 4768 	mov	b,r7
      0017BA 12r00r00         [24] 4769 	lcall	__gptrput
                                   4770 ;	vt100.c:526: term->state = _st_idle; 
      0017BD A8*00            [24] 4771 	mov	r0,_bp
      0017BF 08               [12] 4772 	inc	r0
      0017C0 74 16            [12] 4773 	mov	a,#0x16
      0017C2 26               [12] 4774 	add	a,@r0
      0017C3 FD               [12] 4775 	mov	r5,a
      0017C4 E4               [12] 4776 	clr	a
      0017C5 08               [12] 4777 	inc	r0
      0017C6 36               [12] 4778 	addc	a,@r0
      0017C7 FE               [12] 4779 	mov	r6,a
      0017C8 08               [12] 4780 	inc	r0
      0017C9 86 07            [24] 4781 	mov	ar7,@r0
      0017CB 8D 82            [24] 4782 	mov	dpl,r5
      0017CD 8E 83            [24] 4783 	mov	dph,r6
      0017CF 8F F0            [24] 4784 	mov	b,r7
      0017D1 74r23            [12] 4785 	mov	a,#__st_idle
      0017D3 12r00r00         [24] 4786 	lcall	__gptrput
      0017D6 A3               [24] 4787 	inc	dptr
      0017D7 74s24            [12] 4788 	mov	a,#(__st_idle >> 8)
      0017D9 12r00r00         [24] 4789 	lcall	__gptrput
                                   4790 ;	vt100.c:527: break;
      0017DC 02r1Cr81         [24] 4791 	ljmp	00200$
                                   4792 ;	vt100.c:529: case 'u':{// restore cursor pos
      0017DF                       4793 00157$:
                                   4794 ;	vt100.c:530: term->cursor_x = term->saved_cursor_x;
      0017DF A8*00            [24] 4795 	mov	r0,_bp
      0017E1 08               [12] 4796 	inc	r0
      0017E2 74 01            [12] 4797 	mov	a,#0x01
      0017E4 26               [12] 4798 	add	a,@r0
      0017E5 FD               [12] 4799 	mov	r5,a
      0017E6 E4               [12] 4800 	clr	a
      0017E7 08               [12] 4801 	inc	r0
      0017E8 36               [12] 4802 	addc	a,@r0
      0017E9 FE               [12] 4803 	mov	r6,a
      0017EA 08               [12] 4804 	inc	r0
      0017EB 86 07            [24] 4805 	mov	ar7,@r0
      0017ED A8*00            [24] 4806 	mov	r0,_bp
      0017EF 08               [12] 4807 	inc	r0
      0017F0 74 03            [12] 4808 	mov	a,#0x03
      0017F2 26               [12] 4809 	add	a,@r0
      0017F3 FA               [12] 4810 	mov	r2,a
      0017F4 E4               [12] 4811 	clr	a
      0017F5 08               [12] 4812 	inc	r0
      0017F6 36               [12] 4813 	addc	a,@r0
      0017F7 FB               [12] 4814 	mov	r3,a
      0017F8 08               [12] 4815 	inc	r0
      0017F9 86 04            [24] 4816 	mov	ar4,@r0
      0017FB 8A 82            [24] 4817 	mov	dpl,r2
      0017FD 8B 83            [24] 4818 	mov	dph,r3
      0017FF 8C F0            [24] 4819 	mov	b,r4
      001801 12r00r00         [24] 4820 	lcall	__gptrget
      001804 8D 82            [24] 4821 	mov	dpl,r5
      001806 8E 83            [24] 4822 	mov	dph,r6
      001808 8F F0            [24] 4823 	mov	b,r7
      00180A 12r00r00         [24] 4824 	lcall	__gptrput
                                   4825 ;	vt100.c:531: term->cursor_y = term->saved_cursor_y; 
      00180D A8*00            [24] 4826 	mov	r0,_bp
      00180F 08               [12] 4827 	inc	r0
      001810 74 02            [12] 4828 	mov	a,#0x02
      001812 26               [12] 4829 	add	a,@r0
      001813 FD               [12] 4830 	mov	r5,a
      001814 E4               [12] 4831 	clr	a
      001815 08               [12] 4832 	inc	r0
      001816 36               [12] 4833 	addc	a,@r0
      001817 FE               [12] 4834 	mov	r6,a
      001818 08               [12] 4835 	inc	r0
      001819 86 07            [24] 4836 	mov	ar7,@r0
      00181B A8*00            [24] 4837 	mov	r0,_bp
      00181D 08               [12] 4838 	inc	r0
      00181E 74 04            [12] 4839 	mov	a,#0x04
      001820 26               [12] 4840 	add	a,@r0
      001821 FA               [12] 4841 	mov	r2,a
      001822 E4               [12] 4842 	clr	a
      001823 08               [12] 4843 	inc	r0
      001824 36               [12] 4844 	addc	a,@r0
      001825 FB               [12] 4845 	mov	r3,a
      001826 08               [12] 4846 	inc	r0
      001827 86 04            [24] 4847 	mov	ar4,@r0
      001829 8A 82            [24] 4848 	mov	dpl,r2
      00182B 8B 83            [24] 4849 	mov	dph,r3
      00182D 8C F0            [24] 4850 	mov	b,r4
      00182F 12r00r00         [24] 4851 	lcall	__gptrget
      001832 FA               [12] 4852 	mov	r2,a
      001833 8D 82            [24] 4853 	mov	dpl,r5
      001835 8E 83            [24] 4854 	mov	dph,r6
      001837 8F F0            [24] 4855 	mov	b,r7
      001839 12r00r00         [24] 4856 	lcall	__gptrput
                                   4857 ;	vt100.c:533: term->state = _st_idle; 
      00183C A8*00            [24] 4858 	mov	r0,_bp
      00183E 08               [12] 4859 	inc	r0
      00183F 74 16            [12] 4860 	mov	a,#0x16
      001841 26               [12] 4861 	add	a,@r0
      001842 FD               [12] 4862 	mov	r5,a
      001843 E4               [12] 4863 	clr	a
      001844 08               [12] 4864 	inc	r0
      001845 36               [12] 4865 	addc	a,@r0
      001846 FE               [12] 4866 	mov	r6,a
      001847 08               [12] 4867 	inc	r0
      001848 86 07            [24] 4868 	mov	ar7,@r0
      00184A 8D 82            [24] 4869 	mov	dpl,r5
      00184C 8E 83            [24] 4870 	mov	dph,r6
      00184E 8F F0            [24] 4871 	mov	b,r7
      001850 74r23            [12] 4872 	mov	a,#__st_idle
      001852 12r00r00         [24] 4873 	lcall	__gptrput
      001855 A3               [24] 4874 	inc	dptr
      001856 74s24            [12] 4875 	mov	a,#(__st_idle >> 8)
      001858 12r00r00         [24] 4876 	lcall	__gptrput
                                   4877 ;	vt100.c:534: break;
      00185B 02r1Cr81         [24] 4878 	ljmp	00200$
                                   4879 ;	vt100.c:537: case 'l': {
      00185E                       4880 00159$:
                                   4881 ;	vt100.c:538: term->state = _st_idle;
      00185E A8*00            [24] 4882 	mov	r0,_bp
      001860 08               [12] 4883 	inc	r0
      001861 74 16            [12] 4884 	mov	a,#0x16
      001863 26               [12] 4885 	add	a,@r0
      001864 FD               [12] 4886 	mov	r5,a
      001865 E4               [12] 4887 	clr	a
      001866 08               [12] 4888 	inc	r0
      001867 36               [12] 4889 	addc	a,@r0
      001868 FE               [12] 4890 	mov	r6,a
      001869 08               [12] 4891 	inc	r0
      00186A 86 07            [24] 4892 	mov	ar7,@r0
      00186C 8D 82            [24] 4893 	mov	dpl,r5
      00186E 8E 83            [24] 4894 	mov	dph,r6
      001870 8F F0            [24] 4895 	mov	b,r7
      001872 74r23            [12] 4896 	mov	a,#__st_idle
      001874 12r00r00         [24] 4897 	lcall	__gptrput
      001877 A3               [24] 4898 	inc	dptr
      001878 74s24            [12] 4899 	mov	a,#(__st_idle >> 8)
      00187A 12r00r00         [24] 4900 	lcall	__gptrput
                                   4901 ;	vt100.c:539: break;
      00187D 02r1Cr81         [24] 4902 	ljmp	00200$
                                   4903 ;	vt100.c:542: case 'g': {
      001880                       4904 00160$:
                                   4905 ;	vt100.c:543: term->state = _st_idle;
      001880 A8*00            [24] 4906 	mov	r0,_bp
      001882 08               [12] 4907 	inc	r0
      001883 74 16            [12] 4908 	mov	a,#0x16
      001885 26               [12] 4909 	add	a,@r0
      001886 FD               [12] 4910 	mov	r5,a
      001887 E4               [12] 4911 	clr	a
      001888 08               [12] 4912 	inc	r0
      001889 36               [12] 4913 	addc	a,@r0
      00188A FE               [12] 4914 	mov	r6,a
      00188B 08               [12] 4915 	inc	r0
      00188C 86 07            [24] 4916 	mov	ar7,@r0
      00188E 8D 82            [24] 4917 	mov	dpl,r5
      001890 8E 83            [24] 4918 	mov	dph,r6
      001892 8F F0            [24] 4919 	mov	b,r7
      001894 74r23            [12] 4920 	mov	a,#__st_idle
      001896 12r00r00         [24] 4921 	lcall	__gptrput
      001899 A3               [24] 4922 	inc	dptr
      00189A 74s24            [12] 4923 	mov	a,#(__st_idle >> 8)
      00189C 12r00r00         [24] 4924 	lcall	__gptrput
                                   4925 ;	vt100.c:544: break;
      00189F 02r1Cr81         [24] 4926 	ljmp	00200$
                                   4927 ;	vt100.c:546: case 'm': { // sets colors. Accepts up to 3 args
      0018A2                       4928 00161$:
                                   4929 ;	vt100.c:548: if(!term->narg){
      0018A2 A8*00            [24] 4930 	mov	r0,_bp
      0018A4 08               [12] 4931 	inc	r0
      0018A5 74 0C            [12] 4932 	mov	a,#0x0c
      0018A7 26               [12] 4933 	add	a,@r0
      0018A8 FD               [12] 4934 	mov	r5,a
      0018A9 E4               [12] 4935 	clr	a
      0018AA 08               [12] 4936 	inc	r0
      0018AB 36               [12] 4937 	addc	a,@r0
      0018AC FE               [12] 4938 	mov	r6,a
      0018AD 08               [12] 4939 	inc	r0
      0018AE 86 07            [24] 4940 	mov	ar7,@r0
      0018B0 8D 82            [24] 4941 	mov	dpl,r5
      0018B2 8E 83            [24] 4942 	mov	dph,r6
      0018B4 8F F0            [24] 4943 	mov	b,r7
      0018B6 12r00r00         [24] 4944 	lcall	__gptrget
      0018B9 70 31            [24] 4945 	jnz	00259$
                                   4946 ;	vt100.c:549: term->front_color = 0xff;
      0018BB A8*00            [24] 4947 	mov	r0,_bp
      0018BD 08               [12] 4948 	inc	r0
      0018BE 74 0A            [12] 4949 	mov	a,#0x0a
      0018C0 26               [12] 4950 	add	a,@r0
      0018C1 FA               [12] 4951 	mov	r2,a
      0018C2 E4               [12] 4952 	clr	a
      0018C3 08               [12] 4953 	inc	r0
      0018C4 36               [12] 4954 	addc	a,@r0
      0018C5 FB               [12] 4955 	mov	r3,a
      0018C6 08               [12] 4956 	inc	r0
      0018C7 86 04            [24] 4957 	mov	ar4,@r0
      0018C9 8A 82            [24] 4958 	mov	dpl,r2
      0018CB 8B 83            [24] 4959 	mov	dph,r3
      0018CD 8C F0            [24] 4960 	mov	b,r4
      0018CF 74 FF            [12] 4961 	mov	a,#0xff
      0018D1 12r00r00         [24] 4962 	lcall	__gptrput
                                   4963 ;	vt100.c:550: term->back_color = 0x00;
      0018D4 A8*00            [24] 4964 	mov	r0,_bp
      0018D6 08               [12] 4965 	inc	r0
      0018D7 74 09            [12] 4966 	mov	a,#0x09
      0018D9 26               [12] 4967 	add	a,@r0
      0018DA FA               [12] 4968 	mov	r2,a
      0018DB E4               [12] 4969 	clr	a
      0018DC 08               [12] 4970 	inc	r0
      0018DD 36               [12] 4971 	addc	a,@r0
      0018DE FB               [12] 4972 	mov	r3,a
      0018DF 08               [12] 4973 	inc	r0
      0018E0 86 04            [24] 4974 	mov	ar4,@r0
      0018E2 8A 82            [24] 4975 	mov	dpl,r2
      0018E4 8B 83            [24] 4976 	mov	dph,r3
      0018E6 8C F0            [24] 4977 	mov	b,r4
      0018E8 E4               [12] 4978 	clr	a
      0018E9 12r00r00         [24] 4979 	lcall	__gptrput
                                   4980 ;	vt100.c:552: while(term->narg){
      0018EC                       4981 00259$:
      0018EC A8*00            [24] 4982 	mov	r0,_bp
      0018EE 08               [12] 4983 	inc	r0
      0018EF E5*00            [12] 4984 	mov	a,_bp
      0018F1 24 09            [12] 4985 	add	a,#0x09
      0018F3 F9               [12] 4986 	mov	r1,a
      0018F4 74 0D            [12] 4987 	mov	a,#0x0d
      0018F6 26               [12] 4988 	add	a,@r0
      0018F7 F7               [12] 4989 	mov	@r1,a
      0018F8 E4               [12] 4990 	clr	a
      0018F9 08               [12] 4991 	inc	r0
      0018FA 36               [12] 4992 	addc	a,@r0
      0018FB 09               [12] 4993 	inc	r1
      0018FC F7               [12] 4994 	mov	@r1,a
      0018FD 08               [12] 4995 	inc	r0
      0018FE E6               [12] 4996 	mov	a,@r0
      0018FF 09               [12] 4997 	inc	r1
      001900 F7               [12] 4998 	mov	@r1,a
      001901                       4999 00173$:
      001901 8D 82            [24] 5000 	mov	dpl,r5
      001903 8E 83            [24] 5001 	mov	dph,r6
      001905 8F F0            [24] 5002 	mov	b,r7
      001907 12r00r00         [24] 5003 	lcall	__gptrget
      00190A 70 03            [24] 5004 	jnz	00454$
      00190C 02r1ArB2         [24] 5005 	ljmp	00175$
      00190F                       5006 00454$:
                                   5007 ;	vt100.c:553: term->narg--; 
      00190F 8D 82            [24] 5008 	mov	dpl,r5
      001911 8E 83            [24] 5009 	mov	dph,r6
      001913 8F F0            [24] 5010 	mov	b,r7
      001915 12r00r00         [24] 5011 	lcall	__gptrget
      001918 FC               [12] 5012 	mov	r4,a
      001919 1C               [12] 5013 	dec	r4
      00191A 8D 82            [24] 5014 	mov	dpl,r5
      00191C 8E 83            [24] 5015 	mov	dph,r6
      00191E 8F F0            [24] 5016 	mov	b,r7
                                   5017 ;	vt100.c:554: int n = term->args[term->narg];
      001920 EC               [12] 5018 	mov	a,r4
      001921 12r00r00         [24] 5019 	lcall	__gptrput
      001924 25 E0            [12] 5020 	add	a,acc
      001926 FC               [12] 5021 	mov	r4,a
      001927 E5*00            [12] 5022 	mov	a,_bp
      001929 24 09            [12] 5023 	add	a,#0x09
      00192B F8               [12] 5024 	mov	r0,a
      00192C EC               [12] 5025 	mov	a,r4
      00192D 26               [12] 5026 	add	a,@r0
      00192E FB               [12] 5027 	mov	r3,a
      00192F E4               [12] 5028 	clr	a
      001930 08               [12] 5029 	inc	r0
      001931 36               [12] 5030 	addc	a,@r0
      001932 FC               [12] 5031 	mov	r4,a
      001933 08               [12] 5032 	inc	r0
      001934 86 02            [24] 5033 	mov	ar2,@r0
      001936 8B 82            [24] 5034 	mov	dpl,r3
      001938 8C 83            [24] 5035 	mov	dph,r4
      00193A 8A F0            [24] 5036 	mov	b,r2
      00193C E5*00            [12] 5037 	mov	a,_bp
      00193E 24 0C            [12] 5038 	add	a,#0x0c
      001940 F8               [12] 5039 	mov	r0,a
      001941 12r00r00         [24] 5040 	lcall	__gptrget
      001944 F6               [12] 5041 	mov	@r0,a
      001945 A3               [24] 5042 	inc	dptr
      001946 12r00r00         [24] 5043 	lcall	__gptrget
      001949 08               [12] 5044 	inc	r0
      00194A F6               [12] 5045 	mov	@r0,a
                                   5046 ;	vt100.c:565: if(n == 0){ // all attributes off
      00194B E5*00            [12] 5047 	mov	a,_bp
      00194D 24 0C            [12] 5048 	add	a,#0x0c
      00194F F8               [12] 5049 	mov	r0,a
      001950 E6               [12] 5050 	mov	a,@r0
      001951 08               [12] 5051 	inc	r0
      001952 46               [12] 5052 	orl	a,@r0
      001953 70 71            [24] 5053 	jnz	00165$
                                   5054 ;	vt100.c:566: term->front_color = 0xff;
      001955 C0 05            [24] 5055 	push	ar5
      001957 C0 06            [24] 5056 	push	ar6
      001959 C0 07            [24] 5057 	push	ar7
      00195B A8*00            [24] 5058 	mov	r0,_bp
      00195D 08               [12] 5059 	inc	r0
      00195E 74 0A            [12] 5060 	mov	a,#0x0a
      001960 26               [12] 5061 	add	a,@r0
      001961 FA               [12] 5062 	mov	r2,a
      001962 E4               [12] 5063 	clr	a
      001963 08               [12] 5064 	inc	r0
      001964 36               [12] 5065 	addc	a,@r0
      001965 FE               [12] 5066 	mov	r6,a
      001966 08               [12] 5067 	inc	r0
      001967 86 07            [24] 5068 	mov	ar7,@r0
      001969 8A 82            [24] 5069 	mov	dpl,r2
      00196B 8E 83            [24] 5070 	mov	dph,r6
      00196D 8F F0            [24] 5071 	mov	b,r7
      00196F 74 FF            [12] 5072 	mov	a,#0xff
      001971 12r00r00         [24] 5073 	lcall	__gptrput
                                   5074 ;	vt100.c:567: term->back_color = 0x00;
      001974 A8*00            [24] 5075 	mov	r0,_bp
      001976 08               [12] 5076 	inc	r0
      001977 74 09            [12] 5077 	mov	a,#0x09
      001979 26               [12] 5078 	add	a,@r0
      00197A FB               [12] 5079 	mov	r3,a
      00197B E4               [12] 5080 	clr	a
      00197C 08               [12] 5081 	inc	r0
      00197D 36               [12] 5082 	addc	a,@r0
      00197E FC               [12] 5083 	mov	r4,a
      00197F 08               [12] 5084 	inc	r0
      001980 86 05            [24] 5085 	mov	ar5,@r0
      001982 8B 82            [24] 5086 	mov	dpl,r3
      001984 8C 83            [24] 5087 	mov	dph,r4
      001986 8D F0            [24] 5088 	mov	b,r5
      001988 E4               [12] 5089 	clr	a
      001989 12r00r00         [24] 5090 	lcall	__gptrput
                                   5091 ;	vt100.c:569: vga_setFrontColor(term->front_color);
      00198C 8A 82            [24] 5092 	mov	dpl,r2
      00198E 8E 83            [24] 5093 	mov	dph,r6
      001990 8F F0            [24] 5094 	mov	b,r7
      001992 12r00r00         [24] 5095 	lcall	__gptrget
      001995 F5 82            [12] 5096 	mov	dpl,a
      001997 C0 07            [24] 5097 	push	ar7
      001999 C0 06            [24] 5098 	push	ar6
      00199B C0 05            [24] 5099 	push	ar5
      00199D C0 04            [24] 5100 	push	ar4
      00199F C0 03            [24] 5101 	push	ar3
      0019A1 12r00r6B         [24] 5102 	lcall	_vga_setFrontColor
      0019A4 D0 03            [24] 5103 	pop	ar3
      0019A6 D0 04            [24] 5104 	pop	ar4
      0019A8 D0 05            [24] 5105 	pop	ar5
                                   5106 ;	vt100.c:570: vga_setBackColor(term->back_color);
      0019AA 8B 82            [24] 5107 	mov	dpl,r3
      0019AC 8C 83            [24] 5108 	mov	dph,r4
      0019AE 8D F0            [24] 5109 	mov	b,r5
      0019B0 12r00r00         [24] 5110 	lcall	__gptrget
      0019B3 F5 82            [12] 5111 	mov	dpl,a
      0019B5 C0 05            [24] 5112 	push	ar5
      0019B7 12r00r5F         [24] 5113 	lcall	_vga_setBackColor
      0019BA D0 05            [24] 5114 	pop	ar5
      0019BC D0 06            [24] 5115 	pop	ar6
      0019BE D0 07            [24] 5116 	pop	ar7
                                   5117 ;	vt100.c:627: term->state = _st_idle; 
      0019C0 D0 07            [24] 5118 	pop	ar7
      0019C2 D0 06            [24] 5119 	pop	ar6
      0019C4 D0 05            [24] 5120 	pop	ar5
                                   5121 ;	vt100.c:570: vga_setBackColor(term->back_color);
      0019C6                       5122 00165$:
                                   5123 ;	vt100.c:572: if(n >= 30 && n < 38){ // fg colors
      0019C6 E5*00            [12] 5124 	mov	a,_bp
      0019C8 24 0C            [12] 5125 	add	a,#0x0c
      0019CA F8               [12] 5126 	mov	r0,a
      0019CB C3               [12] 5127 	clr	c
      0019CC E6               [12] 5128 	mov	a,@r0
      0019CD 94 1E            [12] 5129 	subb	a,#0x1e
      0019CF 08               [12] 5130 	inc	r0
      0019D0 E6               [12] 5131 	mov	a,@r0
      0019D1 64 80            [12] 5132 	xrl	a,#0x80
      0019D3 94 80            [12] 5133 	subb	a,#0x80
      0019D5 40 62            [24] 5134 	jc	00170$
      0019D7 E5*00            [12] 5135 	mov	a,_bp
      0019D9 24 0C            [12] 5136 	add	a,#0x0c
      0019DB F8               [12] 5137 	mov	r0,a
      0019DC C3               [12] 5138 	clr	c
      0019DD E6               [12] 5139 	mov	a,@r0
      0019DE 94 26            [12] 5140 	subb	a,#0x26
      0019E0 08               [12] 5141 	inc	r0
      0019E1 E6               [12] 5142 	mov	a,@r0
      0019E2 64 80            [12] 5143 	xrl	a,#0x80
      0019E4 94 80            [12] 5144 	subb	a,#0x80
      0019E6 50 51            [24] 5145 	jnc	00170$
                                   5146 ;	vt100.c:573: term->front_color = colors[n-30]; 
      0019E8 C0 05            [24] 5147 	push	ar5
      0019EA C0 06            [24] 5148 	push	ar6
      0019EC C0 07            [24] 5149 	push	ar7
      0019EE A8*00            [24] 5150 	mov	r0,_bp
      0019F0 08               [12] 5151 	inc	r0
      0019F1 74 0A            [12] 5152 	mov	a,#0x0a
      0019F3 26               [12] 5153 	add	a,@r0
      0019F4 FA               [12] 5154 	mov	r2,a
      0019F5 E4               [12] 5155 	clr	a
      0019F6 08               [12] 5156 	inc	r0
      0019F7 36               [12] 5157 	addc	a,@r0
      0019F8 FB               [12] 5158 	mov	r3,a
      0019F9 08               [12] 5159 	inc	r0
      0019FA 86 04            [24] 5160 	mov	ar4,@r0
      0019FC E5*00            [12] 5161 	mov	a,_bp
      0019FE 24 0C            [12] 5162 	add	a,#0x0c
      001A00 F8               [12] 5163 	mov	r0,a
      001A01 E6               [12] 5164 	mov	a,@r0
      001A02 24 E2            [12] 5165 	add	a,#0xe2
      001A04 FF               [12] 5166 	mov	r7,a
      001A05 33               [12] 5167 	rlc	a
      001A06 95 E0            [12] 5168 	subb	a,acc
      001A08 FE               [12] 5169 	mov	r6,a
      001A09 EF               [12] 5170 	mov	a,r7
      001A0A 24r11            [12] 5171 	add	a,#__st_esc_sq_bracket_colors_458753_206
      001A0C F5 82            [12] 5172 	mov	dpl,a
      001A0E EE               [12] 5173 	mov	a,r6
      001A0F 34s00            [12] 5174 	addc	a,#(__st_esc_sq_bracket_colors_458753_206 >> 8)
      001A11 F5 83            [12] 5175 	mov	dph,a
      001A13 E4               [12] 5176 	clr	a
      001A14 93               [24] 5177 	movc	a,@a+dptr
      001A15 FF               [12] 5178 	mov	r7,a
      001A16 8A 82            [24] 5179 	mov	dpl,r2
      001A18 8B 83            [24] 5180 	mov	dph,r3
      001A1A 8C F0            [24] 5181 	mov	b,r4
      001A1C 12r00r00         [24] 5182 	lcall	__gptrput
                                   5183 ;	vt100.c:574: vga_setFrontColor(term->front_color);
      001A1F 8F 82            [24] 5184 	mov	dpl,r7
      001A21 C0 07            [24] 5185 	push	ar7
      001A23 C0 06            [24] 5186 	push	ar6
      001A25 C0 05            [24] 5187 	push	ar5
      001A27 12r00r6B         [24] 5188 	lcall	_vga_setFrontColor
      001A2A D0 05            [24] 5189 	pop	ar5
      001A2C D0 06            [24] 5190 	pop	ar6
      001A2E D0 07            [24] 5191 	pop	ar7
      001A30 D0 07            [24] 5192 	pop	ar7
      001A32 D0 06            [24] 5193 	pop	ar6
      001A34 D0 05            [24] 5194 	pop	ar5
      001A36 02r19r01         [24] 5195 	ljmp	00173$
      001A39                       5196 00170$:
                                   5197 ;	vt100.c:575: } else if(n >= 40 && n < 48){
      001A39 E5*00            [12] 5198 	mov	a,_bp
      001A3B 24 0C            [12] 5199 	add	a,#0x0c
      001A3D F8               [12] 5200 	mov	r0,a
      001A3E C3               [12] 5201 	clr	c
      001A3F E6               [12] 5202 	mov	a,@r0
      001A40 94 28            [12] 5203 	subb	a,#0x28
      001A42 08               [12] 5204 	inc	r0
      001A43 E6               [12] 5205 	mov	a,@r0
      001A44 64 80            [12] 5206 	xrl	a,#0x80
      001A46 94 80            [12] 5207 	subb	a,#0x80
      001A48 50 03            [24] 5208 	jnc	00458$
      001A4A 02r19r01         [24] 5209 	ljmp	00173$
      001A4D                       5210 00458$:
      001A4D E5*00            [12] 5211 	mov	a,_bp
      001A4F 24 0C            [12] 5212 	add	a,#0x0c
      001A51 F8               [12] 5213 	mov	r0,a
      001A52 C3               [12] 5214 	clr	c
      001A53 E6               [12] 5215 	mov	a,@r0
      001A54 94 30            [12] 5216 	subb	a,#0x30
      001A56 08               [12] 5217 	inc	r0
      001A57 E6               [12] 5218 	mov	a,@r0
      001A58 64 80            [12] 5219 	xrl	a,#0x80
      001A5A 94 80            [12] 5220 	subb	a,#0x80
      001A5C 40 03            [24] 5221 	jc	00459$
      001A5E 02r19r01         [24] 5222 	ljmp	00173$
      001A61                       5223 00459$:
                                   5224 ;	vt100.c:576: term->back_color = colors[n-40]; 
      001A61 C0 05            [24] 5225 	push	ar5
      001A63 C0 06            [24] 5226 	push	ar6
      001A65 C0 07            [24] 5227 	push	ar7
      001A67 A8*00            [24] 5228 	mov	r0,_bp
      001A69 08               [12] 5229 	inc	r0
      001A6A 74 09            [12] 5230 	mov	a,#0x09
      001A6C 26               [12] 5231 	add	a,@r0
      001A6D FA               [12] 5232 	mov	r2,a
      001A6E E4               [12] 5233 	clr	a
      001A6F 08               [12] 5234 	inc	r0
      001A70 36               [12] 5235 	addc	a,@r0
      001A71 FB               [12] 5236 	mov	r3,a
      001A72 08               [12] 5237 	inc	r0
      001A73 86 04            [24] 5238 	mov	ar4,@r0
      001A75 E5*00            [12] 5239 	mov	a,_bp
      001A77 24 0C            [12] 5240 	add	a,#0x0c
      001A79 F8               [12] 5241 	mov	r0,a
      001A7A E6               [12] 5242 	mov	a,@r0
      001A7B 24 D8            [12] 5243 	add	a,#0xd8
      001A7D FF               [12] 5244 	mov	r7,a
      001A7E 33               [12] 5245 	rlc	a
      001A7F 95 E0            [12] 5246 	subb	a,acc
      001A81 FE               [12] 5247 	mov	r6,a
      001A82 EF               [12] 5248 	mov	a,r7
      001A83 24r11            [12] 5249 	add	a,#__st_esc_sq_bracket_colors_458753_206
      001A85 F5 82            [12] 5250 	mov	dpl,a
      001A87 EE               [12] 5251 	mov	a,r6
      001A88 34s00            [12] 5252 	addc	a,#(__st_esc_sq_bracket_colors_458753_206 >> 8)
      001A8A F5 83            [12] 5253 	mov	dph,a
      001A8C E4               [12] 5254 	clr	a
      001A8D 93               [24] 5255 	movc	a,@a+dptr
      001A8E FF               [12] 5256 	mov	r7,a
      001A8F 8A 82            [24] 5257 	mov	dpl,r2
      001A91 8B 83            [24] 5258 	mov	dph,r3
      001A93 8C F0            [24] 5259 	mov	b,r4
      001A95 12r00r00         [24] 5260 	lcall	__gptrput
                                   5261 ;	vt100.c:577: vga_setBackColor(term->back_color); 
      001A98 8F 82            [24] 5262 	mov	dpl,r7
      001A9A C0 07            [24] 5263 	push	ar7
      001A9C C0 06            [24] 5264 	push	ar6
      001A9E C0 05            [24] 5265 	push	ar5
      001AA0 12r00r5F         [24] 5266 	lcall	_vga_setBackColor
      001AA3 D0 05            [24] 5267 	pop	ar5
      001AA5 D0 06            [24] 5268 	pop	ar6
      001AA7 D0 07            [24] 5269 	pop	ar7
      001AA9 D0 07            [24] 5270 	pop	ar7
      001AAB D0 06            [24] 5271 	pop	ar6
      001AAD D0 05            [24] 5272 	pop	ar5
      001AAF 02r19r01         [24] 5273 	ljmp	00173$
      001AB2                       5274 00175$:
                                   5275 ;	vt100.c:580: term->state = _st_idle; 
      001AB2 A8*00            [24] 5276 	mov	r0,_bp
      001AB4 08               [12] 5277 	inc	r0
      001AB5 74 16            [12] 5278 	mov	a,#0x16
      001AB7 26               [12] 5279 	add	a,@r0
      001AB8 FD               [12] 5280 	mov	r5,a
      001AB9 E4               [12] 5281 	clr	a
      001ABA 08               [12] 5282 	inc	r0
      001ABB 36               [12] 5283 	addc	a,@r0
      001ABC FE               [12] 5284 	mov	r6,a
      001ABD 08               [12] 5285 	inc	r0
      001ABE 86 07            [24] 5286 	mov	ar7,@r0
      001AC0 8D 82            [24] 5287 	mov	dpl,r5
      001AC2 8E 83            [24] 5288 	mov	dph,r6
      001AC4 8F F0            [24] 5289 	mov	b,r7
      001AC6 74r23            [12] 5290 	mov	a,#__st_idle
      001AC8 12r00r00         [24] 5291 	lcall	__gptrput
      001ACB A3               [24] 5292 	inc	dptr
      001ACC 74s24            [12] 5293 	mov	a,#(__st_idle >> 8)
      001ACE 12r00r00         [24] 5294 	lcall	__gptrput
                                   5295 ;	vt100.c:581: break;
      001AD1 02r1Cr81         [24] 5296 	ljmp	00200$
                                   5297 ;	vt100.c:584: case '@': // Insert Characters          
      001AD4                       5298 00176$:
                                   5299 ;	vt100.c:585: term->state = _st_idle;
      001AD4 A8*00            [24] 5300 	mov	r0,_bp
      001AD6 08               [12] 5301 	inc	r0
      001AD7 74 16            [12] 5302 	mov	a,#0x16
      001AD9 26               [12] 5303 	add	a,@r0
      001ADA FD               [12] 5304 	mov	r5,a
      001ADB E4               [12] 5305 	clr	a
      001ADC 08               [12] 5306 	inc	r0
      001ADD 36               [12] 5307 	addc	a,@r0
      001ADE FE               [12] 5308 	mov	r6,a
      001ADF 08               [12] 5309 	inc	r0
      001AE0 86 07            [24] 5310 	mov	ar7,@r0
      001AE2 8D 82            [24] 5311 	mov	dpl,r5
      001AE4 8E 83            [24] 5312 	mov	dph,r6
      001AE6 8F F0            [24] 5313 	mov	b,r7
      001AE8 74r23            [12] 5314 	mov	a,#__st_idle
      001AEA 12r00r00         [24] 5315 	lcall	__gptrput
      001AED A3               [24] 5316 	inc	dptr
      001AEE 74s24            [12] 5317 	mov	a,#(__st_idle >> 8)
      001AF0 12r00r00         [24] 5318 	lcall	__gptrput
                                   5319 ;	vt100.c:586: break; 
      001AF3 02r1Cr81         [24] 5320 	ljmp	00200$
                                   5321 ;	vt100.c:587: case 'r': // Set scroll region (top and bottom margins)
      001AF6                       5322 00177$:
                                   5323 ;	vt100.c:590: if(term->narg == 2 && term->args[0] < term->args[1]){
      001AF6 A8*00            [24] 5324 	mov	r0,_bp
      001AF8 08               [12] 5325 	inc	r0
      001AF9 74 0C            [12] 5326 	mov	a,#0x0c
      001AFB 26               [12] 5327 	add	a,@r0
      001AFC FD               [12] 5328 	mov	r5,a
      001AFD E4               [12] 5329 	clr	a
      001AFE 08               [12] 5330 	inc	r0
      001AFF 36               [12] 5331 	addc	a,@r0
      001B00 FE               [12] 5332 	mov	r6,a
      001B01 08               [12] 5333 	inc	r0
      001B02 86 07            [24] 5334 	mov	ar7,@r0
      001B04 8D 82            [24] 5335 	mov	dpl,r5
      001B06 8E 83            [24] 5336 	mov	dph,r6
      001B08 8F F0            [24] 5337 	mov	b,r7
      001B0A 12r00r00         [24] 5338 	lcall	__gptrget
      001B0D FD               [12] 5339 	mov	r5,a
      001B0E BD 02 02         [24] 5340 	cjne	r5,#0x02,00460$
      001B11 80 03            [24] 5341 	sjmp	00461$
      001B13                       5342 00460$:
      001B13 02r1BrDA         [24] 5343 	ljmp	00179$
      001B16                       5344 00461$:
      001B16 A8*00            [24] 5345 	mov	r0,_bp
      001B18 08               [12] 5346 	inc	r0
      001B19 74 0D            [12] 5347 	mov	a,#0x0d
      001B1B 26               [12] 5348 	add	a,@r0
      001B1C FE               [12] 5349 	mov	r6,a
      001B1D E4               [12] 5350 	clr	a
      001B1E 08               [12] 5351 	inc	r0
      001B1F 36               [12] 5352 	addc	a,@r0
      001B20 FD               [12] 5353 	mov	r5,a
      001B21 08               [12] 5354 	inc	r0
      001B22 86 07            [24] 5355 	mov	ar7,@r0
      001B24 74 02            [12] 5356 	mov	a,#0x02
      001B26 2E               [12] 5357 	add	a,r6
      001B27 FA               [12] 5358 	mov	r2,a
      001B28 E4               [12] 5359 	clr	a
      001B29 3D               [12] 5360 	addc	a,r5
      001B2A FB               [12] 5361 	mov	r3,a
      001B2B 8F 04            [24] 5362 	mov	ar4,r7
      001B2D 8E 82            [24] 5363 	mov	dpl,r6
      001B2F 8D 83            [24] 5364 	mov	dph,r5
      001B31 8F F0            [24] 5365 	mov	b,r7
      001B33 E5*00            [12] 5366 	mov	a,_bp
      001B35 24 09            [12] 5367 	add	a,#0x09
      001B37 F8               [12] 5368 	mov	r0,a
      001B38 12r00r00         [24] 5369 	lcall	__gptrget
      001B3B F6               [12] 5370 	mov	@r0,a
      001B3C A3               [24] 5371 	inc	dptr
      001B3D 12r00r00         [24] 5372 	lcall	__gptrget
      001B40 08               [12] 5373 	inc	r0
      001B41 F6               [12] 5374 	mov	@r0,a
      001B42 8A 82            [24] 5375 	mov	dpl,r2
      001B44 8B 83            [24] 5376 	mov	dph,r3
      001B46 8C F0            [24] 5377 	mov	b,r4
      001B48 12r00r00         [24] 5378 	lcall	__gptrget
      001B4B FD               [12] 5379 	mov	r5,a
      001B4C A3               [24] 5380 	inc	dptr
      001B4D 12r00r00         [24] 5381 	lcall	__gptrget
      001B50 FF               [12] 5382 	mov	r7,a
      001B51 E5*00            [12] 5383 	mov	a,_bp
      001B53 24 09            [12] 5384 	add	a,#0x09
      001B55 F8               [12] 5385 	mov	r0,a
      001B56 C3               [12] 5386 	clr	c
      001B57 E6               [12] 5387 	mov	a,@r0
      001B58 9D               [12] 5388 	subb	a,r5
      001B59 08               [12] 5389 	inc	r0
      001B5A E6               [12] 5390 	mov	a,@r0
      001B5B 9F               [12] 5391 	subb	a,r7
      001B5C 50 7C            [24] 5392 	jnc	00179$
                                   5393 ;	vt100.c:593: term->scroll_start_row = term->args[0] - 1;
      001B5E A8*00            [24] 5394 	mov	r0,_bp
      001B60 08               [12] 5395 	inc	r0
      001B61 E5*00            [12] 5396 	mov	a,_bp
      001B63 24 04            [12] 5397 	add	a,#0x04
      001B65 F9               [12] 5398 	mov	r1,a
      001B66 74 05            [12] 5399 	mov	a,#0x05
      001B68 26               [12] 5400 	add	a,@r0
      001B69 F7               [12] 5401 	mov	@r1,a
      001B6A E4               [12] 5402 	clr	a
      001B6B 08               [12] 5403 	inc	r0
      001B6C 36               [12] 5404 	addc	a,@r0
      001B6D 09               [12] 5405 	inc	r1
      001B6E F7               [12] 5406 	mov	@r1,a
      001B6F 08               [12] 5407 	inc	r0
      001B70 E6               [12] 5408 	mov	a,@r0
      001B71 09               [12] 5409 	inc	r1
      001B72 F7               [12] 5410 	mov	@r1,a
      001B73 E5*00            [12] 5411 	mov	a,_bp
      001B75 24 09            [12] 5412 	add	a,#0x09
      001B77 F8               [12] 5413 	mov	r0,a
      001B78 86 07            [24] 5414 	mov	ar7,@r0
      001B7A 1F               [12] 5415 	dec	r7
      001B7B E5*00            [12] 5416 	mov	a,_bp
      001B7D 24 04            [12] 5417 	add	a,#0x04
      001B7F F8               [12] 5418 	mov	r0,a
      001B80 86 82            [24] 5419 	mov	dpl,@r0
      001B82 08               [12] 5420 	inc	r0
      001B83 86 83            [24] 5421 	mov	dph,@r0
      001B85 08               [12] 5422 	inc	r0
      001B86 86 F0            [24] 5423 	mov	b,@r0
      001B88 EF               [12] 5424 	mov	a,r7
      001B89 12r00r00         [24] 5425 	lcall	__gptrput
                                   5426 ;	vt100.c:594: term->scroll_end_row = term->args[1] - 1; 
      001B8C A8*00            [24] 5427 	mov	r0,_bp
      001B8E 08               [12] 5428 	inc	r0
      001B8F 74 06            [12] 5429 	mov	a,#0x06
      001B91 26               [12] 5430 	add	a,@r0
      001B92 FD               [12] 5431 	mov	r5,a
      001B93 E4               [12] 5432 	clr	a
      001B94 08               [12] 5433 	inc	r0
      001B95 36               [12] 5434 	addc	a,@r0
      001B96 FE               [12] 5435 	mov	r6,a
      001B97 08               [12] 5436 	inc	r0
      001B98 86 07            [24] 5437 	mov	ar7,@r0
      001B9A 8A 82            [24] 5438 	mov	dpl,r2
      001B9C 8B 83            [24] 5439 	mov	dph,r3
      001B9E 8C F0            [24] 5440 	mov	b,r4
      001BA0 12r00r00         [24] 5441 	lcall	__gptrget
      001BA3 FA               [12] 5442 	mov	r2,a
      001BA4 1A               [12] 5443 	dec	r2
      001BA5 8D 82            [24] 5444 	mov	dpl,r5
      001BA7 8E 83            [24] 5445 	mov	dph,r6
      001BA9 8F F0            [24] 5446 	mov	b,r7
      001BAB EA               [12] 5447 	mov	a,r2
      001BAC 12r00r00         [24] 5448 	lcall	__gptrput
                                   5449 ;	vt100.c:595: uint16_t top_margin = term->scroll_start_row * VT100_CHAR_HEIGHT;
      001BAF E5*00            [12] 5450 	mov	a,_bp
      001BB1 24 04            [12] 5451 	add	a,#0x04
      001BB3 F8               [12] 5452 	mov	r0,a
      001BB4 86 82            [24] 5453 	mov	dpl,@r0
      001BB6 08               [12] 5454 	inc	r0
      001BB7 86 83            [24] 5455 	mov	dph,@r0
      001BB9 08               [12] 5456 	inc	r0
      001BBA 86 F0            [24] 5457 	mov	b,@r0
      001BBC 12r00r00         [24] 5458 	lcall	__gptrget
      001BBF FF               [12] 5459 	mov	r7,a
      001BC0 33               [12] 5460 	rlc	a
      001BC1 95 E0            [12] 5461 	subb	a,acc
                                   5462 ;	vt100.c:596: uint16_t bottom_margin = VT100_SCREEN_HEIGHT -
      001BC3 EA               [12] 5463 	mov	a,r2
      001BC4 33               [12] 5464 	rlc	a
      001BC5 95 E0            [12] 5465 	subb	a,acc
      001BC7 FD               [12] 5466 	mov	r5,a
      001BC8 74 18            [12] 5467 	mov	a,#0x18
      001BCA C3               [12] 5468 	clr	c
      001BCB 9A               [12] 5469 	subb	a,r2
      001BCC FA               [12] 5470 	mov	r2,a
      001BCD E4               [12] 5471 	clr	a
      001BCE 9D               [12] 5472 	subb	a,r5
                                   5473 ;	vt100.c:598: vga_setScrollMargins(top_margin, bottom_margin);
      001BCF C0 02            [24] 5474 	push	ar2
      001BD1 8F 82            [24] 5475 	mov	dpl,r7
      001BD3 12r01r31         [24] 5476 	lcall	_vga_setScrollMargins
      001BD6 15 81            [12] 5477 	dec	sp
      001BD8 80 03            [24] 5478 	sjmp	00180$
      001BDA                       5479 00179$:
                                   5480 ;	vt100.c:601: _vt100_resetScroll(); 
      001BDA 12r01rC4         [24] 5481 	lcall	__vt100_resetScroll
      001BDD                       5482 00180$:
                                   5483 ;	vt100.c:603: term->state = _st_idle; 
      001BDD A8*00            [24] 5484 	mov	r0,_bp
      001BDF 08               [12] 5485 	inc	r0
      001BE0 74 16            [12] 5486 	mov	a,#0x16
      001BE2 26               [12] 5487 	add	a,@r0
      001BE3 FD               [12] 5488 	mov	r5,a
      001BE4 E4               [12] 5489 	clr	a
      001BE5 08               [12] 5490 	inc	r0
      001BE6 36               [12] 5491 	addc	a,@r0
      001BE7 FE               [12] 5492 	mov	r6,a
      001BE8 08               [12] 5493 	inc	r0
      001BE9 86 07            [24] 5494 	mov	ar7,@r0
      001BEB 8D 82            [24] 5495 	mov	dpl,r5
      001BED 8E 83            [24] 5496 	mov	dph,r6
      001BEF 8F F0            [24] 5497 	mov	b,r7
      001BF1 74r23            [12] 5498 	mov	a,#__st_idle
      001BF3 12r00r00         [24] 5499 	lcall	__gptrput
      001BF6 A3               [24] 5500 	inc	dptr
      001BF7 74s24            [12] 5501 	mov	a,#(__st_idle >> 8)
      001BF9 12r00r00         [24] 5502 	lcall	__gptrput
                                   5503 ;	vt100.c:604: break;  
      001BFC 02r1Cr81         [24] 5504 	ljmp	00200$
                                   5505 ;	vt100.c:607: case '=':{ // argument follows... 
      001BFF                       5506 00184$:
                                   5507 ;	vt100.c:609: term->state = _st_idle; 
      001BFF A8*00            [24] 5508 	mov	r0,_bp
      001C01 08               [12] 5509 	inc	r0
      001C02 74 16            [12] 5510 	mov	a,#0x16
      001C04 26               [12] 5511 	add	a,@r0
      001C05 FD               [12] 5512 	mov	r5,a
      001C06 E4               [12] 5513 	clr	a
      001C07 08               [12] 5514 	inc	r0
      001C08 36               [12] 5515 	addc	a,@r0
      001C09 FE               [12] 5516 	mov	r6,a
      001C0A 08               [12] 5517 	inc	r0
      001C0B 86 07            [24] 5518 	mov	ar7,@r0
      001C0D 8D 82            [24] 5519 	mov	dpl,r5
      001C0F 8E 83            [24] 5520 	mov	dph,r6
      001C11 8F F0            [24] 5521 	mov	b,r7
      001C13 74r23            [12] 5522 	mov	a,#__st_idle
      001C15 12r00r00         [24] 5523 	lcall	__gptrput
      001C18 A3               [24] 5524 	inc	dptr
      001C19 74s24            [12] 5525 	mov	a,#(__st_idle >> 8)
      001C1B 12r00r00         [24] 5526 	lcall	__gptrput
                                   5527 ;	vt100.c:610: break; 
                                   5528 ;	vt100.c:612: case '?': // '[?' escape mode
      001C1E 80 61            [24] 5529 	sjmp	00200$
      001C20                       5530 00185$:
                                   5531 ;	vt100.c:613: term->state = _st_esc_question;
      001C20 A8*00            [24] 5532 	mov	r0,_bp
      001C22 08               [12] 5533 	inc	r0
      001C23 74 16            [12] 5534 	mov	a,#0x16
      001C25 26               [12] 5535 	add	a,@r0
      001C26 FD               [12] 5536 	mov	r5,a
      001C27 E4               [12] 5537 	clr	a
      001C28 08               [12] 5538 	inc	r0
      001C29 36               [12] 5539 	addc	a,@r0
      001C2A FE               [12] 5540 	mov	r6,a
      001C2B 08               [12] 5541 	inc	r0
      001C2C 86 07            [24] 5542 	mov	ar7,@r0
      001C2E 8D 82            [24] 5543 	mov	dpl,r5
      001C30 8E 83            [24] 5544 	mov	dph,r6
      001C32 8F F0            [24] 5545 	mov	b,r7
      001C34 74rAA            [12] 5546 	mov	a,#__st_esc_question
      001C36 12r00r00         [24] 5547 	lcall	__gptrput
      001C39 A3               [24] 5548 	inc	dptr
      001C3A 74s0B            [12] 5549 	mov	a,#(__st_esc_question >> 8)
      001C3C 12r00r00         [24] 5550 	lcall	__gptrput
                                   5551 ;	vt100.c:614: break; 
                                   5552 ;	vt100.c:615: default: { // unknown sequence
      001C3F 80 40            [24] 5553 	sjmp	00200$
      001C41                       5554 00186$:
                                   5555 ;	vt100.c:617: term->state = _st_idle;
      001C41 A8*00            [24] 5556 	mov	r0,_bp
      001C43 08               [12] 5557 	inc	r0
      001C44 74 16            [12] 5558 	mov	a,#0x16
      001C46 26               [12] 5559 	add	a,@r0
      001C47 FD               [12] 5560 	mov	r5,a
      001C48 E4               [12] 5561 	clr	a
      001C49 08               [12] 5562 	inc	r0
      001C4A 36               [12] 5563 	addc	a,@r0
      001C4B FE               [12] 5564 	mov	r6,a
      001C4C 08               [12] 5565 	inc	r0
      001C4D 86 07            [24] 5566 	mov	ar7,@r0
      001C4F 8D 82            [24] 5567 	mov	dpl,r5
      001C51 8E 83            [24] 5568 	mov	dph,r6
      001C53 8F F0            [24] 5569 	mov	b,r7
      001C55 74r23            [12] 5570 	mov	a,#__st_idle
      001C57 12r00r00         [24] 5571 	lcall	__gptrput
      001C5A A3               [24] 5572 	inc	dptr
      001C5B 74s24            [12] 5573 	mov	a,#(__st_idle >> 8)
      001C5D 12r00r00         [24] 5574 	lcall	__gptrput
                                   5575 ;	vt100.c:623: break;
                                   5576 ;	vt100.c:625: default: { // switch (ev)
      001C60 80 1F            [24] 5577 	sjmp	00200$
      001C62                       5578 00194$:
                                   5579 ;	vt100.c:627: term->state = _st_idle; 
      001C62 A8*00            [24] 5580 	mov	r0,_bp
      001C64 08               [12] 5581 	inc	r0
      001C65 74 16            [12] 5582 	mov	a,#0x16
      001C67 26               [12] 5583 	add	a,@r0
      001C68 FD               [12] 5584 	mov	r5,a
      001C69 E4               [12] 5585 	clr	a
      001C6A 08               [12] 5586 	inc	r0
      001C6B 36               [12] 5587 	addc	a,@r0
      001C6C FE               [12] 5588 	mov	r6,a
      001C6D 08               [12] 5589 	inc	r0
      001C6E 86 07            [24] 5590 	mov	ar7,@r0
      001C70 8D 82            [24] 5591 	mov	dpl,r5
      001C72 8E 83            [24] 5592 	mov	dph,r6
      001C74 8F F0            [24] 5593 	mov	b,r7
      001C76 74r23            [12] 5594 	mov	a,#__st_idle
      001C78 12r00r00         [24] 5595 	lcall	__gptrput
      001C7B A3               [24] 5596 	inc	dptr
      001C7C 74s24            [12] 5597 	mov	a,#(__st_idle >> 8)
      001C7E 12r00r00         [24] 5598 	lcall	__gptrput
                                   5599 ;	vt100.c:629: }
      001C81                       5600 00200$:
                                   5601 ;	vt100.c:630: }
      001C81 85*00 81         [24] 5602 	mov	sp,_bp
      001C84 D0*00            [24] 5603 	pop	_bp
      001C86 22               [24] 5604 	ret
                                   5605 ;------------------------------------------------------------
                                   5606 ;Allocation info for local variables in function '_st_esc_left_br'
                                   5607 ;------------------------------------------------------------
                                   5608 ;ev                        Allocated to stack - _bp -3
                                   5609 ;arg                       Allocated to stack - _bp -4
                                   5610 ;term                      Allocated to registers r5 r6 r7 
                                   5611 ;------------------------------------------------------------
                                   5612 ;	vt100.c:632: STATE(_st_esc_left_br, term, ev, arg) {
                                   5613 ;	-----------------------------------------
                                   5614 ;	 function _st_esc_left_br
                                   5615 ;	-----------------------------------------
      001C87                       5616 __st_esc_left_br:
      001C87 C0*00            [24] 5617 	push	_bp
      001C89 85 81*00         [24] 5618 	mov	_bp,sp
      001C8C AD 82            [24] 5619 	mov	r5,dpl
      001C8E AE 83            [24] 5620 	mov	r6,dph
      001C90 AF F0            [24] 5621 	mov	r7,b
                                   5622 ;	vt100.c:633: switch(ev){
      001C92 E5*00            [12] 5623 	mov	a,_bp
      001C94 24 FD            [12] 5624 	add	a,#0xfd
      001C96 F8               [12] 5625 	mov	r0,a
      001C97 B6 01 5A         [24] 5626 	cjne	@r0,#0x01,00109$
                                   5627 ;	vt100.c:635: switch(arg) {  
      001C9A E5*00            [12] 5628 	mov	a,_bp
      001C9C 24 FC            [12] 5629 	add	a,#0xfc
      001C9E F8               [12] 5630 	mov	r0,a
      001C9F B6 30 02         [24] 5631 	cjne	@r0,#0x30,00129$
      001CA2 80 1C            [24] 5632 	sjmp	00105$
      001CA4                       5633 00129$:
      001CA4 E5*00            [12] 5634 	mov	a,_bp
      001CA6 24 FC            [12] 5635 	add	a,#0xfc
      001CA8 F8               [12] 5636 	mov	r0,a
      001CA9 B6 41 02         [24] 5637 	cjne	@r0,#0x41,00130$
      001CAC 80 12            [24] 5638 	sjmp	00105$
      001CAE                       5639 00130$:
      001CAE E5*00            [12] 5640 	mov	a,_bp
      001CB0 24 FC            [12] 5641 	add	a,#0xfc
      001CB2 F8               [12] 5642 	mov	r0,a
      001CB3 B6 42 02         [24] 5643 	cjne	@r0,#0x42,00131$
      001CB6 80 08            [24] 5644 	sjmp	00105$
      001CB8                       5645 00131$:
      001CB8 E5*00            [12] 5646 	mov	a,_bp
      001CBA 24 FC            [12] 5647 	add	a,#0xfc
      001CBC F8               [12] 5648 	mov	r0,a
      001CBD B6 4F 1C         [24] 5649 	cjne	@r0,#0x4f,00106$
                                   5650 ;	vt100.c:640: case 'O':
      001CC0                       5651 00105$:
                                   5652 ;	vt100.c:642: term->state = _st_idle;
      001CC0 74 16            [12] 5653 	mov	a,#0x16
      001CC2 2D               [12] 5654 	add	a,r5
      001CC3 FA               [12] 5655 	mov	r2,a
      001CC4 E4               [12] 5656 	clr	a
      001CC5 3E               [12] 5657 	addc	a,r6
      001CC6 FB               [12] 5658 	mov	r3,a
      001CC7 8F 04            [24] 5659 	mov	ar4,r7
      001CC9 8A 82            [24] 5660 	mov	dpl,r2
      001CCB 8B 83            [24] 5661 	mov	dph,r3
      001CCD 8C F0            [24] 5662 	mov	b,r4
      001CCF 74r23            [12] 5663 	mov	a,#__st_idle
      001CD1 12r00r00         [24] 5664 	lcall	__gptrput
      001CD4 A3               [24] 5665 	inc	dptr
      001CD5 74s24            [12] 5666 	mov	a,#(__st_idle >> 8)
      001CD7 12r00r00         [24] 5667 	lcall	__gptrput
                                   5668 ;	vt100.c:643: break;
                                   5669 ;	vt100.c:644: default:
      001CDA 80 18            [24] 5670 	sjmp	00109$
      001CDC                       5671 00106$:
                                   5672 ;	vt100.c:645: term->state = _st_idle;
      001CDC 74 16            [12] 5673 	mov	a,#0x16
      001CDE 2D               [12] 5674 	add	a,r5
      001CDF FD               [12] 5675 	mov	r5,a
      001CE0 E4               [12] 5676 	clr	a
      001CE1 3E               [12] 5677 	addc	a,r6
      001CE2 FE               [12] 5678 	mov	r6,a
      001CE3 8D 82            [24] 5679 	mov	dpl,r5
      001CE5 8E 83            [24] 5680 	mov	dph,r6
      001CE7 8F F0            [24] 5681 	mov	b,r7
      001CE9 74r23            [12] 5682 	mov	a,#__st_idle
      001CEB 12r00r00         [24] 5683 	lcall	__gptrput
      001CEE A3               [24] 5684 	inc	dptr
      001CEF 74s24            [12] 5685 	mov	a,#(__st_idle >> 8)
      001CF1 12r00r00         [24] 5686 	lcall	__gptrput
                                   5687 ;	vt100.c:649: }
      001CF4                       5688 00109$:
                                   5689 ;	vt100.c:650: }
      001CF4 D0*00            [24] 5690 	pop	_bp
      001CF6 22               [24] 5691 	ret
                                   5692 ;------------------------------------------------------------
                                   5693 ;Allocation info for local variables in function '_st_esc_right_br'
                                   5694 ;------------------------------------------------------------
                                   5695 ;ev                        Allocated to stack - _bp -3
                                   5696 ;arg                       Allocated to stack - _bp -4
                                   5697 ;term                      Allocated to registers r5 r6 r7 
                                   5698 ;------------------------------------------------------------
                                   5699 ;	vt100.c:652: STATE(_st_esc_right_br, term, ev, arg) {
                                   5700 ;	-----------------------------------------
                                   5701 ;	 function _st_esc_right_br
                                   5702 ;	-----------------------------------------
      001CF7                       5703 __st_esc_right_br:
      001CF7 C0*00            [24] 5704 	push	_bp
      001CF9 85 81*00         [24] 5705 	mov	_bp,sp
      001CFC AD 82            [24] 5706 	mov	r5,dpl
      001CFE AE 83            [24] 5707 	mov	r6,dph
      001D00 AF F0            [24] 5708 	mov	r7,b
                                   5709 ;	vt100.c:653: switch(ev){
      001D02 E5*00            [12] 5710 	mov	a,_bp
      001D04 24 FD            [12] 5711 	add	a,#0xfd
      001D06 F8               [12] 5712 	mov	r0,a
      001D07 B6 01 5A         [24] 5713 	cjne	@r0,#0x01,00109$
                                   5714 ;	vt100.c:655: switch(arg) {  
      001D0A E5*00            [12] 5715 	mov	a,_bp
      001D0C 24 FC            [12] 5716 	add	a,#0xfc
      001D0E F8               [12] 5717 	mov	r0,a
      001D0F B6 30 02         [24] 5718 	cjne	@r0,#0x30,00129$
      001D12 80 1C            [24] 5719 	sjmp	00105$
      001D14                       5720 00129$:
      001D14 E5*00            [12] 5721 	mov	a,_bp
      001D16 24 FC            [12] 5722 	add	a,#0xfc
      001D18 F8               [12] 5723 	mov	r0,a
      001D19 B6 41 02         [24] 5724 	cjne	@r0,#0x41,00130$
      001D1C 80 12            [24] 5725 	sjmp	00105$
      001D1E                       5726 00130$:
      001D1E E5*00            [12] 5727 	mov	a,_bp
      001D20 24 FC            [12] 5728 	add	a,#0xfc
      001D22 F8               [12] 5729 	mov	r0,a
      001D23 B6 42 02         [24] 5730 	cjne	@r0,#0x42,00131$
      001D26 80 08            [24] 5731 	sjmp	00105$
      001D28                       5732 00131$:
      001D28 E5*00            [12] 5733 	mov	a,_bp
      001D2A 24 FC            [12] 5734 	add	a,#0xfc
      001D2C F8               [12] 5735 	mov	r0,a
      001D2D B6 4F 1C         [24] 5736 	cjne	@r0,#0x4f,00106$
                                   5737 ;	vt100.c:660: case 'O':
      001D30                       5738 00105$:
                                   5739 ;	vt100.c:662: term->state = _st_idle;
      001D30 74 16            [12] 5740 	mov	a,#0x16
      001D32 2D               [12] 5741 	add	a,r5
      001D33 FA               [12] 5742 	mov	r2,a
      001D34 E4               [12] 5743 	clr	a
      001D35 3E               [12] 5744 	addc	a,r6
      001D36 FB               [12] 5745 	mov	r3,a
      001D37 8F 04            [24] 5746 	mov	ar4,r7
      001D39 8A 82            [24] 5747 	mov	dpl,r2
      001D3B 8B 83            [24] 5748 	mov	dph,r3
      001D3D 8C F0            [24] 5749 	mov	b,r4
      001D3F 74r23            [12] 5750 	mov	a,#__st_idle
      001D41 12r00r00         [24] 5751 	lcall	__gptrput
      001D44 A3               [24] 5752 	inc	dptr
      001D45 74s24            [12] 5753 	mov	a,#(__st_idle >> 8)
      001D47 12r00r00         [24] 5754 	lcall	__gptrput
                                   5755 ;	vt100.c:663: break;
                                   5756 ;	vt100.c:664: default:
      001D4A 80 18            [24] 5757 	sjmp	00109$
      001D4C                       5758 00106$:
                                   5759 ;	vt100.c:665: term->state = _st_idle;
      001D4C 74 16            [12] 5760 	mov	a,#0x16
      001D4E 2D               [12] 5761 	add	a,r5
      001D4F FD               [12] 5762 	mov	r5,a
      001D50 E4               [12] 5763 	clr	a
      001D51 3E               [12] 5764 	addc	a,r6
      001D52 FE               [12] 5765 	mov	r6,a
      001D53 8D 82            [24] 5766 	mov	dpl,r5
      001D55 8E 83            [24] 5767 	mov	dph,r6
      001D57 8F F0            [24] 5768 	mov	b,r7
      001D59 74r23            [12] 5769 	mov	a,#__st_idle
      001D5B 12r00r00         [24] 5770 	lcall	__gptrput
      001D5E A3               [24] 5771 	inc	dptr
      001D5F 74s24            [12] 5772 	mov	a,#(__st_idle >> 8)
      001D61 12r00r00         [24] 5773 	lcall	__gptrput
                                   5774 ;	vt100.c:669: }
      001D64                       5775 00109$:
                                   5776 ;	vt100.c:670: }
      001D64 D0*00            [24] 5777 	pop	_bp
      001D66 22               [24] 5778 	ret
                                   5779 ;------------------------------------------------------------
                                   5780 ;Allocation info for local variables in function '_st_esc_hash'
                                   5781 ;------------------------------------------------------------
                                   5782 ;ev                        Allocated to stack - _bp -3
                                   5783 ;arg                       Allocated to stack - _bp -4
                                   5784 ;term                      Allocated to registers r5 r6 r7 
                                   5785 ;------------------------------------------------------------
                                   5786 ;	vt100.c:672: STATE(_st_esc_hash, term, ev, arg) {
                                   5787 ;	-----------------------------------------
                                   5788 ;	 function _st_esc_hash
                                   5789 ;	-----------------------------------------
      001D67                       5790 __st_esc_hash:
      001D67 C0*00            [24] 5791 	push	_bp
      001D69 85 81*00         [24] 5792 	mov	_bp,sp
      001D6C AD 82            [24] 5793 	mov	r5,dpl
      001D6E AE 83            [24] 5794 	mov	r6,dph
      001D70 AF F0            [24] 5795 	mov	r7,b
                                   5796 ;	vt100.c:673: switch(ev){
      001D72 E5*00            [12] 5797 	mov	a,_bp
      001D74 24 FD            [12] 5798 	add	a,#0xfd
      001D76 F8               [12] 5799 	mov	r0,a
      001D77 B6 01 3C         [24] 5800 	cjne	@r0,#0x01,00106$
                                   5801 ;	vt100.c:675: switch(arg) {  
      001D7A E5*00            [12] 5802 	mov	a,_bp
      001D7C 24 FC            [12] 5803 	add	a,#0xfc
      001D7E F8               [12] 5804 	mov	r0,a
      001D7F B6 38 1C         [24] 5805 	cjne	@r0,#0x38,00103$
                                   5806 ;	vt100.c:679: term->state = _st_idle;
      001D82 74 16            [12] 5807 	mov	a,#0x16
      001D84 2D               [12] 5808 	add	a,r5
      001D85 FA               [12] 5809 	mov	r2,a
      001D86 E4               [12] 5810 	clr	a
      001D87 3E               [12] 5811 	addc	a,r6
      001D88 FB               [12] 5812 	mov	r3,a
      001D89 8F 04            [24] 5813 	mov	ar4,r7
      001D8B 8A 82            [24] 5814 	mov	dpl,r2
      001D8D 8B 83            [24] 5815 	mov	dph,r3
      001D8F 8C F0            [24] 5816 	mov	b,r4
      001D91 74r23            [12] 5817 	mov	a,#__st_idle
      001D93 12r00r00         [24] 5818 	lcall	__gptrput
      001D96 A3               [24] 5819 	inc	dptr
      001D97 74s24            [12] 5820 	mov	a,#(__st_idle >> 8)
      001D99 12r00r00         [24] 5821 	lcall	__gptrput
                                   5822 ;	vt100.c:680: break;
                                   5823 ;	vt100.c:682: default:
      001D9C 80 18            [24] 5824 	sjmp	00106$
      001D9E                       5825 00103$:
                                   5826 ;	vt100.c:683: term->state = _st_idle;
      001D9E 74 16            [12] 5827 	mov	a,#0x16
      001DA0 2D               [12] 5828 	add	a,r5
      001DA1 FD               [12] 5829 	mov	r5,a
      001DA2 E4               [12] 5830 	clr	a
      001DA3 3E               [12] 5831 	addc	a,r6
      001DA4 FE               [12] 5832 	mov	r6,a
      001DA5 8D 82            [24] 5833 	mov	dpl,r5
      001DA7 8E 83            [24] 5834 	mov	dph,r6
      001DA9 8F F0            [24] 5835 	mov	b,r7
      001DAB 74r23            [12] 5836 	mov	a,#__st_idle
      001DAD 12r00r00         [24] 5837 	lcall	__gptrput
      001DB0 A3               [24] 5838 	inc	dptr
      001DB1 74s24            [12] 5839 	mov	a,#(__st_idle >> 8)
      001DB3 12r00r00         [24] 5840 	lcall	__gptrput
                                   5841 ;	vt100.c:686: }
      001DB6                       5842 00106$:
                                   5843 ;	vt100.c:687: }
      001DB6 D0*00            [24] 5844 	pop	_bp
      001DB8 22               [24] 5845 	ret
                                   5846 ;------------------------------------------------------------
                                   5847 ;Allocation info for local variables in function '_st_escape'
                                   5848 ;------------------------------------------------------------
                                   5849 ;ev                        Allocated to stack - _bp -3
                                   5850 ;arg                       Allocated to stack - _bp -4
                                   5851 ;term                      Allocated to stack - _bp +1
                                   5852 ;c                         Allocated to stack - _bp +4
                                   5853 ;c                         Allocated to stack - _bp +4
                                   5854 ;c                         Allocated to stack - _bp +4
                                   5855 ;c                         Allocated to stack - _bp +4
                                   5856 ;------------------------------------------------------------
                                   5857 ;	vt100.c:689: STATE(_st_escape, term, ev, arg) {
                                   5858 ;	-----------------------------------------
                                   5859 ;	 function _st_escape
                                   5860 ;	-----------------------------------------
      001DB9                       5861 __st_escape:
      001DB9 C0*00            [24] 5862 	push	_bp
      001DBB 85 81*00         [24] 5863 	mov	_bp,sp
      001DBE C0 82            [24] 5864 	push	dpl
      001DC0 C0 83            [24] 5865 	push	dph
      001DC2 C0 F0            [24] 5866 	push	b
      001DC4 05 81            [12] 5867 	inc	sp
      001DC6 05 81            [12] 5868 	inc	sp
                                   5869 ;	vt100.c:692: switch(ev){
      001DC8 E5*00            [12] 5870 	mov	a,_bp
      001DCA 24 FD            [12] 5871 	add	a,#0xfd
      001DCC F8               [12] 5872 	mov	r0,a
      001DCD B6 01 02         [24] 5873 	cjne	@r0,#0x01,00269$
      001DD0 80 03            [24] 5874 	sjmp	00270$
      001DD2                       5875 00269$:
      001DD2 02r23rFE         [24] 5876 	ljmp	00129$
      001DD5                       5877 00270$:
                                   5878 ;	vt100.c:699: switch(arg){
      001DD5 E5*00            [12] 5879 	mov	a,_bp
      001DD7 24 FC            [12] 5880 	add	a,#0xfc
      001DD9 F8               [12] 5881 	mov	r0,a
      001DDA B6 1B 03         [24] 5882 	cjne	@r0,#0x1b,00271$
      001DDD 02r24r1D         [24] 5883 	ljmp	00143$
      001DE0                       5884 00271$:
      001DE0 E5*00            [12] 5885 	mov	a,_bp
      001DE2 24 FC            [12] 5886 	add	a,#0xfc
      001DE4 F8               [12] 5887 	mov	r0,a
      001DE5 B6 23 03         [24] 5888 	cjne	@r0,#0x23,00272$
      001DE8 02r20r71         [24] 5889 	ljmp	00108$
      001DEB                       5890 00272$:
      001DEB E5*00            [12] 5891 	mov	a,_bp
      001DED 24 FC            [12] 5892 	add	a,#0xfc
      001DEF F8               [12] 5893 	mov	r0,a
      001DF0 B6 28 03         [24] 5894 	cjne	@r0,#0x28,00273$
      001DF3 02r1Fr4F         [24] 5895 	ljmp	00104$
      001DF6                       5896 00273$:
      001DF6 E5*00            [12] 5897 	mov	a,_bp
      001DF8 24 FC            [12] 5898 	add	a,#0xfc
      001DFA F8               [12] 5899 	mov	r0,a
      001DFB B6 29 03         [24] 5900 	cjne	@r0,#0x29,00274$
      001DFE 02r1FrE0         [24] 5901 	ljmp	00106$
      001E01                       5902 00274$:
      001E01 E5*00            [12] 5903 	mov	a,_bp
      001E03 24 FC            [12] 5904 	add	a,#0xfc
      001E05 F8               [12] 5905 	mov	r0,a
      001E06 B6 37 03         [24] 5906 	cjne	@r0,#0x37,00275$
      001E09 02r21rFF         [24] 5907 	ljmp	00115$
      001E0C                       5908 00275$:
      001E0C E5*00            [12] 5909 	mov	a,_bp
      001E0E 24 FC            [12] 5910 	add	a,#0xfc
      001E10 F8               [12] 5911 	mov	r0,a
      001E11 B6 38 03         [24] 5912 	cjne	@r0,#0x38,00276$
      001E14 02r22r7E         [24] 5913 	ljmp	00117$
      001E17                       5914 00276$:
      001E17 E5*00            [12] 5915 	mov	a,_bp
      001E19 24 FC            [12] 5916 	add	a,#0xfc
      001E1B F8               [12] 5917 	mov	r0,a
      001E1C B6 3C 03         [24] 5918 	cjne	@r0,#0x3c,00277$
      001E1F 02r23rBC         [24] 5919 	ljmp	00125$
      001E22                       5920 00277$:
      001E22 E5*00            [12] 5921 	mov	a,_bp
      001E24 24 FC            [12] 5922 	add	a,#0xfc
      001E26 F8               [12] 5923 	mov	r0,a
      001E27 B6 3D 03         [24] 5924 	cjne	@r0,#0x3d,00278$
      001E2A 02r22rFD         [24] 5925 	ljmp	00118$
      001E2D                       5926 00278$:
      001E2D E5*00            [12] 5927 	mov	a,_bp
      001E2F 24 FC            [12] 5928 	add	a,#0xfc
      001E31 F8               [12] 5929 	mov	r0,a
      001E32 B6 3E 03         [24] 5930 	cjne	@r0,#0x3e,00279$
      001E35 02r23r1F         [24] 5931 	ljmp	00119$
      001E38                       5932 00279$:
      001E38 E5*00            [12] 5933 	mov	a,_bp
      001E3A 24 FC            [12] 5934 	add	a,#0xfc
      001E3C F8               [12] 5935 	mov	r0,a
      001E3D B6 44 03         [24] 5936 	cjne	@r0,#0x44,00280$
      001E40 02r21r24         [24] 5937 	ljmp	00111$
      001E43                       5938 00280$:
      001E43 E5*00            [12] 5939 	mov	a,_bp
      001E45 24 FC            [12] 5940 	add	a,#0xfc
      001E47 F8               [12] 5941 	mov	r0,a
      001E48 B6 45 03         [24] 5942 	cjne	@r0,#0x45,00281$
      001E4B 02r21rA6         [24] 5943 	ljmp	00113$
      001E4E                       5944 00281$:
      001E4E E5*00            [12] 5945 	mov	a,_bp
      001E50 24 FC            [12] 5946 	add	a,#0xfc
      001E52 F8               [12] 5947 	mov	r0,a
      001E53 B6 48 03         [24] 5948 	cjne	@r0,#0x48,00282$
      001E56 02r23rBC         [24] 5949 	ljmp	00125$
      001E59                       5950 00282$:
      001E59 E5*00            [12] 5951 	mov	a,_bp
      001E5B 24 FC            [12] 5952 	add	a,#0xfc
      001E5D F8               [12] 5953 	mov	r0,a
      001E5E B6 4D 03         [24] 5954 	cjne	@r0,#0x4d,00283$
      001E61 02r21r65         [24] 5955 	ljmp	00112$
      001E64                       5956 00283$:
      001E64 E5*00            [12] 5957 	mov	a,_bp
      001E66 24 FC            [12] 5958 	add	a,#0xfc
      001E68 F8               [12] 5959 	mov	r0,a
      001E69 B6 4E 03         [24] 5960 	cjne	@r0,#0x4e,00284$
      001E6C 02r23rBC         [24] 5961 	ljmp	00125$
      001E6F                       5962 00284$:
      001E6F E5*00            [12] 5963 	mov	a,_bp
      001E71 24 FC            [12] 5964 	add	a,#0xfc
      001E73 F8               [12] 5965 	mov	r0,a
      001E74 B6 4F 03         [24] 5966 	cjne	@r0,#0x4f,00285$
      001E77 02r23rBC         [24] 5967 	ljmp	00125$
      001E7A                       5968 00285$:
      001E7A E5*00            [12] 5969 	mov	a,_bp
      001E7C 24 FC            [12] 5970 	add	a,#0xfc
      001E7E F8               [12] 5971 	mov	r0,a
      001E7F B6 50 03         [24] 5972 	cjne	@r0,#0x50,00286$
      001E82 02r21r02         [24] 5973 	ljmp	00110$
      001E85                       5974 00286$:
      001E85 E5*00            [12] 5975 	mov	a,_bp
      001E87 24 FC            [12] 5976 	add	a,#0xfc
      001E89 F8               [12] 5977 	mov	r0,a
      001E8A B6 5A 03         [24] 5978 	cjne	@r0,#0x5a,00287$
      001E8D 02r23r41         [24] 5979 	ljmp	00120$
      001E90                       5980 00287$:
      001E90 E5*00            [12] 5981 	mov	a,_bp
      001E92 24 FC            [12] 5982 	add	a,#0xfc
      001E94 F8               [12] 5983 	mov	r0,a
      001E95 B6 5B 02         [24] 5984 	cjne	@r0,#0x5b,00288$
      001E98 80 24            [24] 5985 	sjmp	00102$
      001E9A                       5986 00288$:
      001E9A E5*00            [12] 5987 	mov	a,_bp
      001E9C 24 FC            [12] 5988 	add	a,#0xfc
      001E9E F8               [12] 5989 	mov	r0,a
      001E9F B6 63 03         [24] 5990 	cjne	@r0,#0x63,00289$
      001EA2 02r23r98         [24] 5991 	ljmp	00121$
      001EA5                       5992 00289$:
      001EA5 E5*00            [12] 5993 	mov	a,_bp
      001EA7 24 FC            [12] 5994 	add	a,#0xfc
      001EA9 F8               [12] 5995 	mov	r0,a
      001EAA B6 73 03         [24] 5996 	cjne	@r0,#0x73,00290$
      001EAD 02r21rFF         [24] 5997 	ljmp	00115$
      001EB0                       5998 00290$:
      001EB0 E5*00            [12] 5999 	mov	a,_bp
      001EB2 24 FC            [12] 6000 	add	a,#0xfc
      001EB4 F8               [12] 6001 	mov	r0,a
      001EB5 B6 75 03         [24] 6002 	cjne	@r0,#0x75,00291$
      001EB8 02r22r7E         [24] 6003 	ljmp	00117$
      001EBB                       6004 00291$:
      001EBB 02r23rDD         [24] 6005 	ljmp	00127$
                                   6006 ;	vt100.c:700: case '[': { // command
      001EBE                       6007 00102$:
                                   6008 ;	vt100.c:702: CLEAR_ARGS; 
      001EBE A8*00            [24] 6009 	mov	r0,_bp
      001EC0 08               [12] 6010 	inc	r0
      001EC1 74 0C            [12] 6011 	mov	a,#0x0c
      001EC3 26               [12] 6012 	add	a,@r0
      001EC4 FA               [12] 6013 	mov	r2,a
      001EC5 E4               [12] 6014 	clr	a
      001EC6 08               [12] 6015 	inc	r0
      001EC7 36               [12] 6016 	addc	a,@r0
      001EC8 FB               [12] 6017 	mov	r3,a
      001EC9 08               [12] 6018 	inc	r0
      001ECA 86 04            [24] 6019 	mov	ar4,@r0
      001ECC 8A 82            [24] 6020 	mov	dpl,r2
      001ECE 8B 83            [24] 6021 	mov	dph,r3
      001ED0 8C F0            [24] 6022 	mov	b,r4
      001ED2 E4               [12] 6023 	clr	a
      001ED3 12r00r00         [24] 6024 	lcall	__gptrput
      001ED6 A8*00            [24] 6025 	mov	r0,_bp
      001ED8 08               [12] 6026 	inc	r0
      001ED9 74 0D            [12] 6027 	mov	a,#0x0d
      001EDB 26               [12] 6028 	add	a,@r0
      001EDC FA               [12] 6029 	mov	r2,a
      001EDD E4               [12] 6030 	clr	a
      001EDE 08               [12] 6031 	inc	r0
      001EDF 36               [12] 6032 	addc	a,@r0
      001EE0 FB               [12] 6033 	mov	r3,a
      001EE1 08               [12] 6034 	inc	r0
      001EE2 86 04            [24] 6035 	mov	ar4,@r0
      001EE4 E5*00            [12] 6036 	mov	a,_bp
      001EE6 24 04            [12] 6037 	add	a,#0x04
      001EE8 F8               [12] 6038 	mov	r0,a
      001EE9 E4               [12] 6039 	clr	a
      001EEA F6               [12] 6040 	mov	@r0,a
      001EEB 08               [12] 6041 	inc	r0
      001EEC F6               [12] 6042 	mov	@r0,a
      001EED                       6043 00132$:
      001EED E5*00            [12] 6044 	mov	a,_bp
      001EEF 24 04            [12] 6045 	add	a,#0x04
      001EF1 F8               [12] 6046 	mov	r0,a
      001EF2 C3               [12] 6047 	clr	c
      001EF3 E6               [12] 6048 	mov	a,@r0
      001EF4 94 04            [12] 6049 	subb	a,#0x04
      001EF6 08               [12] 6050 	inc	r0
      001EF7 E6               [12] 6051 	mov	a,@r0
      001EF8 64 80            [12] 6052 	xrl	a,#0x80
      001EFA 94 80            [12] 6053 	subb	a,#0x80
      001EFC 50 2F            [24] 6054 	jnc	00103$
      001EFE E5*00            [12] 6055 	mov	a,_bp
      001F00 24 04            [12] 6056 	add	a,#0x04
      001F02 F8               [12] 6057 	mov	r0,a
      001F03 E6               [12] 6058 	mov	a,@r0
      001F04 26               [12] 6059 	add	a,@r0
      001F05 FD               [12] 6060 	mov	r5,a
      001F06 08               [12] 6061 	inc	r0
      001F07 E6               [12] 6062 	mov	a,@r0
      001F08 33               [12] 6063 	rlc	a
      001F09 FF               [12] 6064 	mov	r7,a
      001F0A ED               [12] 6065 	mov	a,r5
      001F0B 2A               [12] 6066 	add	a,r2
      001F0C FD               [12] 6067 	mov	r5,a
      001F0D EF               [12] 6068 	mov	a,r7
      001F0E 3B               [12] 6069 	addc	a,r3
      001F0F FF               [12] 6070 	mov	r7,a
      001F10 8C 06            [24] 6071 	mov	ar6,r4
      001F12 8D 82            [24] 6072 	mov	dpl,r5
      001F14 8F 83            [24] 6073 	mov	dph,r7
      001F16 8E F0            [24] 6074 	mov	b,r6
      001F18 E4               [12] 6075 	clr	a
      001F19 12r00r00         [24] 6076 	lcall	__gptrput
      001F1C A3               [24] 6077 	inc	dptr
      001F1D 12r00r00         [24] 6078 	lcall	__gptrput
      001F20 E5*00            [12] 6079 	mov	a,_bp
      001F22 24 04            [12] 6080 	add	a,#0x04
      001F24 F8               [12] 6081 	mov	r0,a
      001F25 06               [12] 6082 	inc	@r0
      001F26 B6 00 02         [24] 6083 	cjne	@r0,#0x00,00293$
      001F29 08               [12] 6084 	inc	r0
      001F2A 06               [12] 6085 	inc	@r0
      001F2B                       6086 00293$:
      001F2B 80 C0            [24] 6087 	sjmp	00132$
      001F2D                       6088 00103$:
                                   6089 ;	vt100.c:703: term->state = _st_esc_sq_bracket;
      001F2D A8*00            [24] 6090 	mov	r0,_bp
      001F2F 08               [12] 6091 	inc	r0
      001F30 74 16            [12] 6092 	mov	a,#0x16
      001F32 26               [12] 6093 	add	a,@r0
      001F33 FD               [12] 6094 	mov	r5,a
      001F34 E4               [12] 6095 	clr	a
      001F35 08               [12] 6096 	inc	r0
      001F36 36               [12] 6097 	addc	a,@r0
      001F37 FE               [12] 6098 	mov	r6,a
      001F38 08               [12] 6099 	inc	r0
      001F39 86 07            [24] 6100 	mov	ar7,@r0
      001F3B 8D 82            [24] 6101 	mov	dpl,r5
      001F3D 8E 83            [24] 6102 	mov	dph,r6
      001F3F 8F F0            [24] 6103 	mov	b,r7
      001F41 74r7F            [12] 6104 	mov	a,#__st_esc_sq_bracket
      001F43 12r00r00         [24] 6105 	lcall	__gptrput
      001F46 A3               [24] 6106 	inc	dptr
      001F47 74s0D            [12] 6107 	mov	a,#(__st_esc_sq_bracket >> 8)
      001F49 12r00r00         [24] 6108 	lcall	__gptrput
                                   6109 ;	vt100.c:704: break;
      001F4C 02r24r1D         [24] 6110 	ljmp	00143$
                                   6111 ;	vt100.c:706: case '(': /* ESC ( */  
      001F4F                       6112 00104$:
                                   6113 ;	vt100.c:707: CLEAR_ARGS;
      001F4F A8*00            [24] 6114 	mov	r0,_bp
      001F51 08               [12] 6115 	inc	r0
      001F52 74 0C            [12] 6116 	mov	a,#0x0c
      001F54 26               [12] 6117 	add	a,@r0
      001F55 FD               [12] 6118 	mov	r5,a
      001F56 E4               [12] 6119 	clr	a
      001F57 08               [12] 6120 	inc	r0
      001F58 36               [12] 6121 	addc	a,@r0
      001F59 FE               [12] 6122 	mov	r6,a
      001F5A 08               [12] 6123 	inc	r0
      001F5B 86 07            [24] 6124 	mov	ar7,@r0
      001F5D 8D 82            [24] 6125 	mov	dpl,r5
      001F5F 8E 83            [24] 6126 	mov	dph,r6
      001F61 8F F0            [24] 6127 	mov	b,r7
      001F63 E4               [12] 6128 	clr	a
      001F64 12r00r00         [24] 6129 	lcall	__gptrput
      001F67 A8*00            [24] 6130 	mov	r0,_bp
      001F69 08               [12] 6131 	inc	r0
      001F6A 74 0D            [12] 6132 	mov	a,#0x0d
      001F6C 26               [12] 6133 	add	a,@r0
      001F6D FD               [12] 6134 	mov	r5,a
      001F6E E4               [12] 6135 	clr	a
      001F6F 08               [12] 6136 	inc	r0
      001F70 36               [12] 6137 	addc	a,@r0
      001F71 FE               [12] 6138 	mov	r6,a
      001F72 08               [12] 6139 	inc	r0
      001F73 86 07            [24] 6140 	mov	ar7,@r0
      001F75 E5*00            [12] 6141 	mov	a,_bp
      001F77 24 04            [12] 6142 	add	a,#0x04
      001F79 F8               [12] 6143 	mov	r0,a
      001F7A E4               [12] 6144 	clr	a
      001F7B F6               [12] 6145 	mov	@r0,a
      001F7C 08               [12] 6146 	inc	r0
      001F7D F6               [12] 6147 	mov	@r0,a
      001F7E                       6148 00135$:
      001F7E E5*00            [12] 6149 	mov	a,_bp
      001F80 24 04            [12] 6150 	add	a,#0x04
      001F82 F8               [12] 6151 	mov	r0,a
      001F83 C3               [12] 6152 	clr	c
      001F84 E6               [12] 6153 	mov	a,@r0
      001F85 94 04            [12] 6154 	subb	a,#0x04
      001F87 08               [12] 6155 	inc	r0
      001F88 E6               [12] 6156 	mov	a,@r0
      001F89 64 80            [12] 6157 	xrl	a,#0x80
      001F8B 94 80            [12] 6158 	subb	a,#0x80
      001F8D 50 2F            [24] 6159 	jnc	00105$
      001F8F E5*00            [12] 6160 	mov	a,_bp
      001F91 24 04            [12] 6161 	add	a,#0x04
      001F93 F8               [12] 6162 	mov	r0,a
      001F94 E6               [12] 6163 	mov	a,@r0
      001F95 26               [12] 6164 	add	a,@r0
      001F96 FA               [12] 6165 	mov	r2,a
      001F97 08               [12] 6166 	inc	r0
      001F98 E6               [12] 6167 	mov	a,@r0
      001F99 33               [12] 6168 	rlc	a
      001F9A FC               [12] 6169 	mov	r4,a
      001F9B EA               [12] 6170 	mov	a,r2
      001F9C 2D               [12] 6171 	add	a,r5
      001F9D FA               [12] 6172 	mov	r2,a
      001F9E EC               [12] 6173 	mov	a,r4
      001F9F 3E               [12] 6174 	addc	a,r6
      001FA0 FC               [12] 6175 	mov	r4,a
      001FA1 8F 03            [24] 6176 	mov	ar3,r7
      001FA3 8A 82            [24] 6177 	mov	dpl,r2
      001FA5 8C 83            [24] 6178 	mov	dph,r4
      001FA7 8B F0            [24] 6179 	mov	b,r3
      001FA9 E4               [12] 6180 	clr	a
      001FAA 12r00r00         [24] 6181 	lcall	__gptrput
      001FAD A3               [24] 6182 	inc	dptr
      001FAE 12r00r00         [24] 6183 	lcall	__gptrput
      001FB1 E5*00            [12] 6184 	mov	a,_bp
      001FB3 24 04            [12] 6185 	add	a,#0x04
      001FB5 F8               [12] 6186 	mov	r0,a
      001FB6 06               [12] 6187 	inc	@r0
      001FB7 B6 00 02         [24] 6188 	cjne	@r0,#0x00,00295$
      001FBA 08               [12] 6189 	inc	r0
      001FBB 06               [12] 6190 	inc	@r0
      001FBC                       6191 00295$:
      001FBC 80 C0            [24] 6192 	sjmp	00135$
      001FBE                       6193 00105$:
                                   6194 ;	vt100.c:708: term->state = _st_esc_left_br;
      001FBE A8*00            [24] 6195 	mov	r0,_bp
      001FC0 08               [12] 6196 	inc	r0
      001FC1 74 16            [12] 6197 	mov	a,#0x16
      001FC3 26               [12] 6198 	add	a,@r0
      001FC4 FD               [12] 6199 	mov	r5,a
      001FC5 E4               [12] 6200 	clr	a
      001FC6 08               [12] 6201 	inc	r0
      001FC7 36               [12] 6202 	addc	a,@r0
      001FC8 FE               [12] 6203 	mov	r6,a
      001FC9 08               [12] 6204 	inc	r0
      001FCA 86 07            [24] 6205 	mov	ar7,@r0
      001FCC 8D 82            [24] 6206 	mov	dpl,r5
      001FCE 8E 83            [24] 6207 	mov	dph,r6
      001FD0 8F F0            [24] 6208 	mov	b,r7
      001FD2 74r87            [12] 6209 	mov	a,#__st_esc_left_br
      001FD4 12r00r00         [24] 6210 	lcall	__gptrput
      001FD7 A3               [24] 6211 	inc	dptr
      001FD8 74s1C            [12] 6212 	mov	a,#(__st_esc_left_br >> 8)
      001FDA 12r00r00         [24] 6213 	lcall	__gptrput
                                   6214 ;	vt100.c:709: break; 
      001FDD 02r24r1D         [24] 6215 	ljmp	00143$
                                   6216 ;	vt100.c:710: case ')': /* ESC ) */  
      001FE0                       6217 00106$:
                                   6218 ;	vt100.c:711: CLEAR_ARGS;
      001FE0 A8*00            [24] 6219 	mov	r0,_bp
      001FE2 08               [12] 6220 	inc	r0
      001FE3 74 0C            [12] 6221 	mov	a,#0x0c
      001FE5 26               [12] 6222 	add	a,@r0
      001FE6 FD               [12] 6223 	mov	r5,a
      001FE7 E4               [12] 6224 	clr	a
      001FE8 08               [12] 6225 	inc	r0
      001FE9 36               [12] 6226 	addc	a,@r0
      001FEA FE               [12] 6227 	mov	r6,a
      001FEB 08               [12] 6228 	inc	r0
      001FEC 86 07            [24] 6229 	mov	ar7,@r0
      001FEE 8D 82            [24] 6230 	mov	dpl,r5
      001FF0 8E 83            [24] 6231 	mov	dph,r6
      001FF2 8F F0            [24] 6232 	mov	b,r7
      001FF4 E4               [12] 6233 	clr	a
      001FF5 12r00r00         [24] 6234 	lcall	__gptrput
      001FF8 A8*00            [24] 6235 	mov	r0,_bp
      001FFA 08               [12] 6236 	inc	r0
      001FFB 74 0D            [12] 6237 	mov	a,#0x0d
      001FFD 26               [12] 6238 	add	a,@r0
      001FFE FD               [12] 6239 	mov	r5,a
      001FFF E4               [12] 6240 	clr	a
      002000 08               [12] 6241 	inc	r0
      002001 36               [12] 6242 	addc	a,@r0
      002002 FE               [12] 6243 	mov	r6,a
      002003 08               [12] 6244 	inc	r0
      002004 86 07            [24] 6245 	mov	ar7,@r0
      002006 E5*00            [12] 6246 	mov	a,_bp
      002008 24 04            [12] 6247 	add	a,#0x04
      00200A F8               [12] 6248 	mov	r0,a
      00200B E4               [12] 6249 	clr	a
      00200C F6               [12] 6250 	mov	@r0,a
      00200D 08               [12] 6251 	inc	r0
      00200E F6               [12] 6252 	mov	@r0,a
      00200F                       6253 00138$:
      00200F E5*00            [12] 6254 	mov	a,_bp
      002011 24 04            [12] 6255 	add	a,#0x04
      002013 F8               [12] 6256 	mov	r0,a
      002014 C3               [12] 6257 	clr	c
      002015 E6               [12] 6258 	mov	a,@r0
      002016 94 04            [12] 6259 	subb	a,#0x04
      002018 08               [12] 6260 	inc	r0
      002019 E6               [12] 6261 	mov	a,@r0
      00201A 64 80            [12] 6262 	xrl	a,#0x80
      00201C 94 80            [12] 6263 	subb	a,#0x80
      00201E 50 2F            [24] 6264 	jnc	00107$
      002020 E5*00            [12] 6265 	mov	a,_bp
      002022 24 04            [12] 6266 	add	a,#0x04
      002024 F8               [12] 6267 	mov	r0,a
      002025 E6               [12] 6268 	mov	a,@r0
      002026 26               [12] 6269 	add	a,@r0
      002027 FA               [12] 6270 	mov	r2,a
      002028 08               [12] 6271 	inc	r0
      002029 E6               [12] 6272 	mov	a,@r0
      00202A 33               [12] 6273 	rlc	a
      00202B FC               [12] 6274 	mov	r4,a
      00202C EA               [12] 6275 	mov	a,r2
      00202D 2D               [12] 6276 	add	a,r5
      00202E FA               [12] 6277 	mov	r2,a
      00202F EC               [12] 6278 	mov	a,r4
      002030 3E               [12] 6279 	addc	a,r6
      002031 FC               [12] 6280 	mov	r4,a
      002032 8F 03            [24] 6281 	mov	ar3,r7
      002034 8A 82            [24] 6282 	mov	dpl,r2
      002036 8C 83            [24] 6283 	mov	dph,r4
      002038 8B F0            [24] 6284 	mov	b,r3
      00203A E4               [12] 6285 	clr	a
      00203B 12r00r00         [24] 6286 	lcall	__gptrput
      00203E A3               [24] 6287 	inc	dptr
      00203F 12r00r00         [24] 6288 	lcall	__gptrput
      002042 E5*00            [12] 6289 	mov	a,_bp
      002044 24 04            [12] 6290 	add	a,#0x04
      002046 F8               [12] 6291 	mov	r0,a
      002047 06               [12] 6292 	inc	@r0
      002048 B6 00 02         [24] 6293 	cjne	@r0,#0x00,00297$
      00204B 08               [12] 6294 	inc	r0
      00204C 06               [12] 6295 	inc	@r0
      00204D                       6296 00297$:
      00204D 80 C0            [24] 6297 	sjmp	00138$
      00204F                       6298 00107$:
                                   6299 ;	vt100.c:712: term->state = _st_esc_right_br;
      00204F A8*00            [24] 6300 	mov	r0,_bp
      002051 08               [12] 6301 	inc	r0
      002052 74 16            [12] 6302 	mov	a,#0x16
      002054 26               [12] 6303 	add	a,@r0
      002055 FD               [12] 6304 	mov	r5,a
      002056 E4               [12] 6305 	clr	a
      002057 08               [12] 6306 	inc	r0
      002058 36               [12] 6307 	addc	a,@r0
      002059 FE               [12] 6308 	mov	r6,a
      00205A 08               [12] 6309 	inc	r0
      00205B 86 07            [24] 6310 	mov	ar7,@r0
      00205D 8D 82            [24] 6311 	mov	dpl,r5
      00205F 8E 83            [24] 6312 	mov	dph,r6
      002061 8F F0            [24] 6313 	mov	b,r7
      002063 74rF7            [12] 6314 	mov	a,#__st_esc_right_br
      002065 12r00r00         [24] 6315 	lcall	__gptrput
      002068 A3               [24] 6316 	inc	dptr
      002069 74s1C            [12] 6317 	mov	a,#(__st_esc_right_br >> 8)
      00206B 12r00r00         [24] 6318 	lcall	__gptrput
                                   6319 ;	vt100.c:713: break;  
      00206E 02r24r1D         [24] 6320 	ljmp	00143$
                                   6321 ;	vt100.c:714: case '#': // ESC # 
      002071                       6322 00108$:
                                   6323 ;	vt100.c:715: CLEAR_ARGS;
      002071 A8*00            [24] 6324 	mov	r0,_bp
      002073 08               [12] 6325 	inc	r0
      002074 74 0C            [12] 6326 	mov	a,#0x0c
      002076 26               [12] 6327 	add	a,@r0
      002077 FD               [12] 6328 	mov	r5,a
      002078 E4               [12] 6329 	clr	a
      002079 08               [12] 6330 	inc	r0
      00207A 36               [12] 6331 	addc	a,@r0
      00207B FE               [12] 6332 	mov	r6,a
      00207C 08               [12] 6333 	inc	r0
      00207D 86 07            [24] 6334 	mov	ar7,@r0
      00207F 8D 82            [24] 6335 	mov	dpl,r5
      002081 8E 83            [24] 6336 	mov	dph,r6
      002083 8F F0            [24] 6337 	mov	b,r7
      002085 E4               [12] 6338 	clr	a
      002086 12r00r00         [24] 6339 	lcall	__gptrput
      002089 A8*00            [24] 6340 	mov	r0,_bp
      00208B 08               [12] 6341 	inc	r0
      00208C 74 0D            [12] 6342 	mov	a,#0x0d
      00208E 26               [12] 6343 	add	a,@r0
      00208F FD               [12] 6344 	mov	r5,a
      002090 E4               [12] 6345 	clr	a
      002091 08               [12] 6346 	inc	r0
      002092 36               [12] 6347 	addc	a,@r0
      002093 FE               [12] 6348 	mov	r6,a
      002094 08               [12] 6349 	inc	r0
      002095 86 07            [24] 6350 	mov	ar7,@r0
      002097 E5*00            [12] 6351 	mov	a,_bp
      002099 24 04            [12] 6352 	add	a,#0x04
      00209B F8               [12] 6353 	mov	r0,a
      00209C E4               [12] 6354 	clr	a
      00209D F6               [12] 6355 	mov	@r0,a
      00209E 08               [12] 6356 	inc	r0
      00209F F6               [12] 6357 	mov	@r0,a
      0020A0                       6358 00141$:
      0020A0 E5*00            [12] 6359 	mov	a,_bp
      0020A2 24 04            [12] 6360 	add	a,#0x04
      0020A4 F8               [12] 6361 	mov	r0,a
      0020A5 C3               [12] 6362 	clr	c
      0020A6 E6               [12] 6363 	mov	a,@r0
      0020A7 94 04            [12] 6364 	subb	a,#0x04
      0020A9 08               [12] 6365 	inc	r0
      0020AA E6               [12] 6366 	mov	a,@r0
      0020AB 64 80            [12] 6367 	xrl	a,#0x80
      0020AD 94 80            [12] 6368 	subb	a,#0x80
      0020AF 50 2F            [24] 6369 	jnc	00109$
      0020B1 E5*00            [12] 6370 	mov	a,_bp
      0020B3 24 04            [12] 6371 	add	a,#0x04
      0020B5 F8               [12] 6372 	mov	r0,a
      0020B6 E6               [12] 6373 	mov	a,@r0
      0020B7 26               [12] 6374 	add	a,@r0
      0020B8 FA               [12] 6375 	mov	r2,a
      0020B9 08               [12] 6376 	inc	r0
      0020BA E6               [12] 6377 	mov	a,@r0
      0020BB 33               [12] 6378 	rlc	a
      0020BC FC               [12] 6379 	mov	r4,a
      0020BD EA               [12] 6380 	mov	a,r2
      0020BE 2D               [12] 6381 	add	a,r5
      0020BF FA               [12] 6382 	mov	r2,a
      0020C0 EC               [12] 6383 	mov	a,r4
      0020C1 3E               [12] 6384 	addc	a,r6
      0020C2 FC               [12] 6385 	mov	r4,a
      0020C3 8F 03            [24] 6386 	mov	ar3,r7
      0020C5 8A 82            [24] 6387 	mov	dpl,r2
      0020C7 8C 83            [24] 6388 	mov	dph,r4
      0020C9 8B F0            [24] 6389 	mov	b,r3
      0020CB E4               [12] 6390 	clr	a
      0020CC 12r00r00         [24] 6391 	lcall	__gptrput
      0020CF A3               [24] 6392 	inc	dptr
      0020D0 12r00r00         [24] 6393 	lcall	__gptrput
      0020D3 E5*00            [12] 6394 	mov	a,_bp
      0020D5 24 04            [12] 6395 	add	a,#0x04
      0020D7 F8               [12] 6396 	mov	r0,a
      0020D8 06               [12] 6397 	inc	@r0
      0020D9 B6 00 02         [24] 6398 	cjne	@r0,#0x00,00299$
      0020DC 08               [12] 6399 	inc	r0
      0020DD 06               [12] 6400 	inc	@r0
      0020DE                       6401 00299$:
      0020DE 80 C0            [24] 6402 	sjmp	00141$
      0020E0                       6403 00109$:
                                   6404 ;	vt100.c:716: term->state = _st_esc_hash;
      0020E0 A8*00            [24] 6405 	mov	r0,_bp
      0020E2 08               [12] 6406 	inc	r0
      0020E3 74 16            [12] 6407 	mov	a,#0x16
      0020E5 26               [12] 6408 	add	a,@r0
      0020E6 FD               [12] 6409 	mov	r5,a
      0020E7 E4               [12] 6410 	clr	a
      0020E8 08               [12] 6411 	inc	r0
      0020E9 36               [12] 6412 	addc	a,@r0
      0020EA FE               [12] 6413 	mov	r6,a
      0020EB 08               [12] 6414 	inc	r0
      0020EC 86 07            [24] 6415 	mov	ar7,@r0
      0020EE 8D 82            [24] 6416 	mov	dpl,r5
      0020F0 8E 83            [24] 6417 	mov	dph,r6
      0020F2 8F F0            [24] 6418 	mov	b,r7
      0020F4 74r67            [12] 6419 	mov	a,#__st_esc_hash
      0020F6 12r00r00         [24] 6420 	lcall	__gptrput
      0020F9 A3               [24] 6421 	inc	dptr
      0020FA 74s1D            [12] 6422 	mov	a,#(__st_esc_hash >> 8)
      0020FC 12r00r00         [24] 6423 	lcall	__gptrput
                                   6424 ;	vt100.c:717: break;  
      0020FF 02r24r1D         [24] 6425 	ljmp	00143$
                                   6426 ;	vt100.c:718: case 'P': //ESC P (DCS, Device Control String)
      002102                       6427 00110$:
                                   6428 ;	vt100.c:719: term->state = _st_idle; 
      002102 A8*00            [24] 6429 	mov	r0,_bp
      002104 08               [12] 6430 	inc	r0
      002105 74 16            [12] 6431 	mov	a,#0x16
      002107 26               [12] 6432 	add	a,@r0
      002108 FD               [12] 6433 	mov	r5,a
      002109 E4               [12] 6434 	clr	a
      00210A 08               [12] 6435 	inc	r0
      00210B 36               [12] 6436 	addc	a,@r0
      00210C FE               [12] 6437 	mov	r6,a
      00210D 08               [12] 6438 	inc	r0
      00210E 86 07            [24] 6439 	mov	ar7,@r0
      002110 8D 82            [24] 6440 	mov	dpl,r5
      002112 8E 83            [24] 6441 	mov	dph,r6
      002114 8F F0            [24] 6442 	mov	b,r7
      002116 74r23            [12] 6443 	mov	a,#__st_idle
      002118 12r00r00         [24] 6444 	lcall	__gptrput
      00211B A3               [24] 6445 	inc	dptr
      00211C 74s24            [12] 6446 	mov	a,#(__st_idle >> 8)
      00211E 12r00r00         [24] 6447 	lcall	__gptrput
                                   6448 ;	vt100.c:720: break;
      002121 02r24r1D         [24] 6449 	ljmp	00143$
                                   6450 ;	vt100.c:721: case 'D': // moves cursor down one line and scrolls if necessary
      002124                       6451 00111$:
                                   6452 ;	vt100.c:723: _vt100_move(term, 0, 1); 
      002124 74 01            [12] 6453 	mov	a,#0x01
      002126 C0 E0            [24] 6454 	push	acc
      002128 E4               [12] 6455 	clr	a
      002129 C0 E0            [24] 6456 	push	acc
      00212B C0 E0            [24] 6457 	push	acc
      00212D C0 E0            [24] 6458 	push	acc
      00212F A8*00            [24] 6459 	mov	r0,_bp
      002131 08               [12] 6460 	inc	r0
      002132 86 82            [24] 6461 	mov	dpl,@r0
      002134 08               [12] 6462 	inc	r0
      002135 86 83            [24] 6463 	mov	dph,@r0
      002137 08               [12] 6464 	inc	r0
      002138 86 F0            [24] 6465 	mov	b,@r0
      00213A 12r05rA5         [24] 6466 	lcall	__vt100_move
      00213D E5 81            [12] 6467 	mov	a,sp
      00213F 24 FC            [12] 6468 	add	a,#0xfc
      002141 F5 81            [12] 6469 	mov	sp,a
                                   6470 ;	vt100.c:724: term->state = _st_idle;
      002143 A8*00            [24] 6471 	mov	r0,_bp
      002145 08               [12] 6472 	inc	r0
      002146 74 16            [12] 6473 	mov	a,#0x16
      002148 26               [12] 6474 	add	a,@r0
      002149 FD               [12] 6475 	mov	r5,a
      00214A E4               [12] 6476 	clr	a
      00214B 08               [12] 6477 	inc	r0
      00214C 36               [12] 6478 	addc	a,@r0
      00214D FE               [12] 6479 	mov	r6,a
      00214E 08               [12] 6480 	inc	r0
      00214F 86 07            [24] 6481 	mov	ar7,@r0
      002151 8D 82            [24] 6482 	mov	dpl,r5
      002153 8E 83            [24] 6483 	mov	dph,r6
      002155 8F F0            [24] 6484 	mov	b,r7
      002157 74r23            [12] 6485 	mov	a,#__st_idle
      002159 12r00r00         [24] 6486 	lcall	__gptrput
      00215C A3               [24] 6487 	inc	dptr
      00215D 74s24            [12] 6488 	mov	a,#(__st_idle >> 8)
      00215F 12r00r00         [24] 6489 	lcall	__gptrput
                                   6490 ;	vt100.c:725: break; 
      002162 02r24r1D         [24] 6491 	ljmp	00143$
                                   6492 ;	vt100.c:726: case 'M': // Cursor up
      002165                       6493 00112$:
                                   6494 ;	vt100.c:728: _vt100_move(term, 0, -1); 
      002165 74 FF            [12] 6495 	mov	a,#0xff
      002167 C0 E0            [24] 6496 	push	acc
      002169 C0 E0            [24] 6497 	push	acc
      00216B E4               [12] 6498 	clr	a
      00216C C0 E0            [24] 6499 	push	acc
      00216E C0 E0            [24] 6500 	push	acc
      002170 A8*00            [24] 6501 	mov	r0,_bp
      002172 08               [12] 6502 	inc	r0
      002173 86 82            [24] 6503 	mov	dpl,@r0
      002175 08               [12] 6504 	inc	r0
      002176 86 83            [24] 6505 	mov	dph,@r0
      002178 08               [12] 6506 	inc	r0
      002179 86 F0            [24] 6507 	mov	b,@r0
      00217B 12r05rA5         [24] 6508 	lcall	__vt100_move
      00217E E5 81            [12] 6509 	mov	a,sp
      002180 24 FC            [12] 6510 	add	a,#0xfc
      002182 F5 81            [12] 6511 	mov	sp,a
                                   6512 ;	vt100.c:729: term->state = _st_idle;
      002184 A8*00            [24] 6513 	mov	r0,_bp
      002186 08               [12] 6514 	inc	r0
      002187 74 16            [12] 6515 	mov	a,#0x16
      002189 26               [12] 6516 	add	a,@r0
      00218A FD               [12] 6517 	mov	r5,a
      00218B E4               [12] 6518 	clr	a
      00218C 08               [12] 6519 	inc	r0
      00218D 36               [12] 6520 	addc	a,@r0
      00218E FE               [12] 6521 	mov	r6,a
      00218F 08               [12] 6522 	inc	r0
      002190 86 07            [24] 6523 	mov	ar7,@r0
      002192 8D 82            [24] 6524 	mov	dpl,r5
      002194 8E 83            [24] 6525 	mov	dph,r6
      002196 8F F0            [24] 6526 	mov	b,r7
      002198 74r23            [12] 6527 	mov	a,#__st_idle
      00219A 12r00r00         [24] 6528 	lcall	__gptrput
      00219D A3               [24] 6529 	inc	dptr
      00219E 74s24            [12] 6530 	mov	a,#(__st_idle >> 8)
      0021A0 12r00r00         [24] 6531 	lcall	__gptrput
                                   6532 ;	vt100.c:730: break; 
      0021A3 02r24r1D         [24] 6533 	ljmp	00143$
                                   6534 ;	vt100.c:731: case 'E': // next line
      0021A6                       6535 00113$:
                                   6536 ;	vt100.c:733: _vt100_move(term, 0, 1);
      0021A6 74 01            [12] 6537 	mov	a,#0x01
      0021A8 C0 E0            [24] 6538 	push	acc
      0021AA E4               [12] 6539 	clr	a
      0021AB C0 E0            [24] 6540 	push	acc
      0021AD C0 E0            [24] 6541 	push	acc
      0021AF C0 E0            [24] 6542 	push	acc
      0021B1 A8*00            [24] 6543 	mov	r0,_bp
      0021B3 08               [12] 6544 	inc	r0
      0021B4 86 82            [24] 6545 	mov	dpl,@r0
      0021B6 08               [12] 6546 	inc	r0
      0021B7 86 83            [24] 6547 	mov	dph,@r0
      0021B9 08               [12] 6548 	inc	r0
      0021BA 86 F0            [24] 6549 	mov	b,@r0
      0021BC 12r05rA5         [24] 6550 	lcall	__vt100_move
      0021BF E5 81            [12] 6551 	mov	a,sp
      0021C1 24 FC            [12] 6552 	add	a,#0xfc
      0021C3 F5 81            [12] 6553 	mov	sp,a
                                   6554 ;	vt100.c:734: term->cursor_x = 0; 
      0021C5 A8*00            [24] 6555 	mov	r0,_bp
      0021C7 08               [12] 6556 	inc	r0
      0021C8 74 01            [12] 6557 	mov	a,#0x01
      0021CA 26               [12] 6558 	add	a,@r0
      0021CB FD               [12] 6559 	mov	r5,a
      0021CC E4               [12] 6560 	clr	a
      0021CD 08               [12] 6561 	inc	r0
      0021CE 36               [12] 6562 	addc	a,@r0
      0021CF FE               [12] 6563 	mov	r6,a
      0021D0 08               [12] 6564 	inc	r0
      0021D1 86 07            [24] 6565 	mov	ar7,@r0
      0021D3 8D 82            [24] 6566 	mov	dpl,r5
      0021D5 8E 83            [24] 6567 	mov	dph,r6
      0021D7 8F F0            [24] 6568 	mov	b,r7
      0021D9 E4               [12] 6569 	clr	a
      0021DA 12r00r00         [24] 6570 	lcall	__gptrput
                                   6571 ;	vt100.c:735: term->state = _st_idle;
      0021DD A8*00            [24] 6572 	mov	r0,_bp
      0021DF 08               [12] 6573 	inc	r0
      0021E0 74 16            [12] 6574 	mov	a,#0x16
      0021E2 26               [12] 6575 	add	a,@r0
      0021E3 FD               [12] 6576 	mov	r5,a
      0021E4 E4               [12] 6577 	clr	a
      0021E5 08               [12] 6578 	inc	r0
      0021E6 36               [12] 6579 	addc	a,@r0
      0021E7 FE               [12] 6580 	mov	r6,a
      0021E8 08               [12] 6581 	inc	r0
      0021E9 86 07            [24] 6582 	mov	ar7,@r0
      0021EB 8D 82            [24] 6583 	mov	dpl,r5
      0021ED 8E 83            [24] 6584 	mov	dph,r6
      0021EF 8F F0            [24] 6585 	mov	b,r7
      0021F1 74r23            [12] 6586 	mov	a,#__st_idle
      0021F3 12r00r00         [24] 6587 	lcall	__gptrput
      0021F6 A3               [24] 6588 	inc	dptr
      0021F7 74s24            [12] 6589 	mov	a,#(__st_idle >> 8)
      0021F9 12r00r00         [24] 6590 	lcall	__gptrput
                                   6591 ;	vt100.c:736: break;  
      0021FC 02r24r1D         [24] 6592 	ljmp	00143$
                                   6593 ;	vt100.c:738: case 's':  
      0021FF                       6594 00115$:
                                   6595 ;	vt100.c:739: term->saved_cursor_x = term->cursor_x;
      0021FF A8*00            [24] 6596 	mov	r0,_bp
      002201 08               [12] 6597 	inc	r0
      002202 74 03            [12] 6598 	mov	a,#0x03
      002204 26               [12] 6599 	add	a,@r0
      002205 FD               [12] 6600 	mov	r5,a
      002206 E4               [12] 6601 	clr	a
      002207 08               [12] 6602 	inc	r0
      002208 36               [12] 6603 	addc	a,@r0
      002209 FE               [12] 6604 	mov	r6,a
      00220A 08               [12] 6605 	inc	r0
      00220B 86 07            [24] 6606 	mov	ar7,@r0
      00220D A8*00            [24] 6607 	mov	r0,_bp
      00220F 08               [12] 6608 	inc	r0
      002210 74 01            [12] 6609 	mov	a,#0x01
      002212 26               [12] 6610 	add	a,@r0
      002213 FA               [12] 6611 	mov	r2,a
      002214 E4               [12] 6612 	clr	a
      002215 08               [12] 6613 	inc	r0
      002216 36               [12] 6614 	addc	a,@r0
      002217 FB               [12] 6615 	mov	r3,a
      002218 08               [12] 6616 	inc	r0
      002219 86 04            [24] 6617 	mov	ar4,@r0
      00221B 8A 82            [24] 6618 	mov	dpl,r2
      00221D 8B 83            [24] 6619 	mov	dph,r3
      00221F 8C F0            [24] 6620 	mov	b,r4
      002221 12r00r00         [24] 6621 	lcall	__gptrget
      002224 8D 82            [24] 6622 	mov	dpl,r5
      002226 8E 83            [24] 6623 	mov	dph,r6
      002228 8F F0            [24] 6624 	mov	b,r7
      00222A 12r00r00         [24] 6625 	lcall	__gptrput
                                   6626 ;	vt100.c:740: term->saved_cursor_y = term->cursor_y;
      00222D A8*00            [24] 6627 	mov	r0,_bp
      00222F 08               [12] 6628 	inc	r0
      002230 74 04            [12] 6629 	mov	a,#0x04
      002232 26               [12] 6630 	add	a,@r0
      002233 FD               [12] 6631 	mov	r5,a
      002234 E4               [12] 6632 	clr	a
      002235 08               [12] 6633 	inc	r0
      002236 36               [12] 6634 	addc	a,@r0
      002237 FE               [12] 6635 	mov	r6,a
      002238 08               [12] 6636 	inc	r0
      002239 86 07            [24] 6637 	mov	ar7,@r0
      00223B A8*00            [24] 6638 	mov	r0,_bp
      00223D 08               [12] 6639 	inc	r0
      00223E 74 02            [12] 6640 	mov	a,#0x02
      002240 26               [12] 6641 	add	a,@r0
      002241 FA               [12] 6642 	mov	r2,a
      002242 E4               [12] 6643 	clr	a
      002243 08               [12] 6644 	inc	r0
      002244 36               [12] 6645 	addc	a,@r0
      002245 FB               [12] 6646 	mov	r3,a
      002246 08               [12] 6647 	inc	r0
      002247 86 04            [24] 6648 	mov	ar4,@r0
      002249 8A 82            [24] 6649 	mov	dpl,r2
      00224B 8B 83            [24] 6650 	mov	dph,r3
      00224D 8C F0            [24] 6651 	mov	b,r4
      00224F 12r00r00         [24] 6652 	lcall	__gptrget
      002252 FA               [12] 6653 	mov	r2,a
      002253 8D 82            [24] 6654 	mov	dpl,r5
      002255 8E 83            [24] 6655 	mov	dph,r6
      002257 8F F0            [24] 6656 	mov	b,r7
      002259 12r00r00         [24] 6657 	lcall	__gptrput
                                   6658 ;	vt100.c:741: term->state = _st_idle;
      00225C A8*00            [24] 6659 	mov	r0,_bp
      00225E 08               [12] 6660 	inc	r0
      00225F 74 16            [12] 6661 	mov	a,#0x16
      002261 26               [12] 6662 	add	a,@r0
      002262 FD               [12] 6663 	mov	r5,a
      002263 E4               [12] 6664 	clr	a
      002264 08               [12] 6665 	inc	r0
      002265 36               [12] 6666 	addc	a,@r0
      002266 FE               [12] 6667 	mov	r6,a
      002267 08               [12] 6668 	inc	r0
      002268 86 07            [24] 6669 	mov	ar7,@r0
      00226A 8D 82            [24] 6670 	mov	dpl,r5
      00226C 8E 83            [24] 6671 	mov	dph,r6
      00226E 8F F0            [24] 6672 	mov	b,r7
      002270 74r23            [12] 6673 	mov	a,#__st_idle
      002272 12r00r00         [24] 6674 	lcall	__gptrput
      002275 A3               [24] 6675 	inc	dptr
      002276 74s24            [12] 6676 	mov	a,#(__st_idle >> 8)
      002278 12r00r00         [24] 6677 	lcall	__gptrput
                                   6678 ;	vt100.c:742: break;  
      00227B 02r24r1D         [24] 6679 	ljmp	00143$
                                   6680 ;	vt100.c:744: case 'u': 
      00227E                       6681 00117$:
                                   6682 ;	vt100.c:745: term->cursor_x = term->saved_cursor_x;
      00227E A8*00            [24] 6683 	mov	r0,_bp
      002280 08               [12] 6684 	inc	r0
      002281 74 01            [12] 6685 	mov	a,#0x01
      002283 26               [12] 6686 	add	a,@r0
      002284 FD               [12] 6687 	mov	r5,a
      002285 E4               [12] 6688 	clr	a
      002286 08               [12] 6689 	inc	r0
      002287 36               [12] 6690 	addc	a,@r0
      002288 FE               [12] 6691 	mov	r6,a
      002289 08               [12] 6692 	inc	r0
      00228A 86 07            [24] 6693 	mov	ar7,@r0
      00228C A8*00            [24] 6694 	mov	r0,_bp
      00228E 08               [12] 6695 	inc	r0
      00228F 74 03            [12] 6696 	mov	a,#0x03
      002291 26               [12] 6697 	add	a,@r0
      002292 FA               [12] 6698 	mov	r2,a
      002293 E4               [12] 6699 	clr	a
      002294 08               [12] 6700 	inc	r0
      002295 36               [12] 6701 	addc	a,@r0
      002296 FB               [12] 6702 	mov	r3,a
      002297 08               [12] 6703 	inc	r0
      002298 86 04            [24] 6704 	mov	ar4,@r0
      00229A 8A 82            [24] 6705 	mov	dpl,r2
      00229C 8B 83            [24] 6706 	mov	dph,r3
      00229E 8C F0            [24] 6707 	mov	b,r4
      0022A0 12r00r00         [24] 6708 	lcall	__gptrget
      0022A3 8D 82            [24] 6709 	mov	dpl,r5
      0022A5 8E 83            [24] 6710 	mov	dph,r6
      0022A7 8F F0            [24] 6711 	mov	b,r7
      0022A9 12r00r00         [24] 6712 	lcall	__gptrput
                                   6713 ;	vt100.c:746: term->cursor_y = term->saved_cursor_y; 
      0022AC A8*00            [24] 6714 	mov	r0,_bp
      0022AE 08               [12] 6715 	inc	r0
      0022AF 74 02            [12] 6716 	mov	a,#0x02
      0022B1 26               [12] 6717 	add	a,@r0
      0022B2 FD               [12] 6718 	mov	r5,a
      0022B3 E4               [12] 6719 	clr	a
      0022B4 08               [12] 6720 	inc	r0
      0022B5 36               [12] 6721 	addc	a,@r0
      0022B6 FE               [12] 6722 	mov	r6,a
      0022B7 08               [12] 6723 	inc	r0
      0022B8 86 07            [24] 6724 	mov	ar7,@r0
      0022BA A8*00            [24] 6725 	mov	r0,_bp
      0022BC 08               [12] 6726 	inc	r0
      0022BD 74 04            [12] 6727 	mov	a,#0x04
      0022BF 26               [12] 6728 	add	a,@r0
      0022C0 FA               [12] 6729 	mov	r2,a
      0022C1 E4               [12] 6730 	clr	a
      0022C2 08               [12] 6731 	inc	r0
      0022C3 36               [12] 6732 	addc	a,@r0
      0022C4 FB               [12] 6733 	mov	r3,a
      0022C5 08               [12] 6734 	inc	r0
      0022C6 86 04            [24] 6735 	mov	ar4,@r0
      0022C8 8A 82            [24] 6736 	mov	dpl,r2
      0022CA 8B 83            [24] 6737 	mov	dph,r3
      0022CC 8C F0            [24] 6738 	mov	b,r4
      0022CE 12r00r00         [24] 6739 	lcall	__gptrget
      0022D1 FA               [12] 6740 	mov	r2,a
      0022D2 8D 82            [24] 6741 	mov	dpl,r5
      0022D4 8E 83            [24] 6742 	mov	dph,r6
      0022D6 8F F0            [24] 6743 	mov	b,r7
      0022D8 12r00r00         [24] 6744 	lcall	__gptrput
                                   6745 ;	vt100.c:747: term->state = _st_idle;
      0022DB A8*00            [24] 6746 	mov	r0,_bp
      0022DD 08               [12] 6747 	inc	r0
      0022DE 74 16            [12] 6748 	mov	a,#0x16
      0022E0 26               [12] 6749 	add	a,@r0
      0022E1 FD               [12] 6750 	mov	r5,a
      0022E2 E4               [12] 6751 	clr	a
      0022E3 08               [12] 6752 	inc	r0
      0022E4 36               [12] 6753 	addc	a,@r0
      0022E5 FE               [12] 6754 	mov	r6,a
      0022E6 08               [12] 6755 	inc	r0
      0022E7 86 07            [24] 6756 	mov	ar7,@r0
      0022E9 8D 82            [24] 6757 	mov	dpl,r5
      0022EB 8E 83            [24] 6758 	mov	dph,r6
      0022ED 8F F0            [24] 6759 	mov	b,r7
      0022EF 74r23            [12] 6760 	mov	a,#__st_idle
      0022F1 12r00r00         [24] 6761 	lcall	__gptrput
      0022F4 A3               [24] 6762 	inc	dptr
      0022F5 74s24            [12] 6763 	mov	a,#(__st_idle >> 8)
      0022F7 12r00r00         [24] 6764 	lcall	__gptrput
                                   6765 ;	vt100.c:748: break; 
      0022FA 02r24r1D         [24] 6766 	ljmp	00143$
                                   6767 ;	vt100.c:749: case '=': // Keypad into applications mode 
      0022FD                       6768 00118$:
                                   6769 ;	vt100.c:750: term->state = _st_idle;
      0022FD A8*00            [24] 6770 	mov	r0,_bp
      0022FF 08               [12] 6771 	inc	r0
      002300 74 16            [12] 6772 	mov	a,#0x16
      002302 26               [12] 6773 	add	a,@r0
      002303 FD               [12] 6774 	mov	r5,a
      002304 E4               [12] 6775 	clr	a
      002305 08               [12] 6776 	inc	r0
      002306 36               [12] 6777 	addc	a,@r0
      002307 FE               [12] 6778 	mov	r6,a
      002308 08               [12] 6779 	inc	r0
      002309 86 07            [24] 6780 	mov	ar7,@r0
      00230B 8D 82            [24] 6781 	mov	dpl,r5
      00230D 8E 83            [24] 6782 	mov	dph,r6
      00230F 8F F0            [24] 6783 	mov	b,r7
      002311 74r23            [12] 6784 	mov	a,#__st_idle
      002313 12r00r00         [24] 6785 	lcall	__gptrput
      002316 A3               [24] 6786 	inc	dptr
      002317 74s24            [12] 6787 	mov	a,#(__st_idle >> 8)
      002319 12r00r00         [24] 6788 	lcall	__gptrput
                                   6789 ;	vt100.c:751: break; 
      00231C 02r24r1D         [24] 6790 	ljmp	00143$
                                   6791 ;	vt100.c:752: case '>': // Keypad into numeric mode   
      00231F                       6792 00119$:
                                   6793 ;	vt100.c:753: term->state = _st_idle;
      00231F A8*00            [24] 6794 	mov	r0,_bp
      002321 08               [12] 6795 	inc	r0
      002322 74 16            [12] 6796 	mov	a,#0x16
      002324 26               [12] 6797 	add	a,@r0
      002325 FD               [12] 6798 	mov	r5,a
      002326 E4               [12] 6799 	clr	a
      002327 08               [12] 6800 	inc	r0
      002328 36               [12] 6801 	addc	a,@r0
      002329 FE               [12] 6802 	mov	r6,a
      00232A 08               [12] 6803 	inc	r0
      00232B 86 07            [24] 6804 	mov	ar7,@r0
      00232D 8D 82            [24] 6805 	mov	dpl,r5
      00232F 8E 83            [24] 6806 	mov	dph,r6
      002331 8F F0            [24] 6807 	mov	b,r7
      002333 74r23            [12] 6808 	mov	a,#__st_idle
      002335 12r00r00         [24] 6809 	lcall	__gptrput
      002338 A3               [24] 6810 	inc	dptr
      002339 74s24            [12] 6811 	mov	a,#(__st_idle >> 8)
      00233B 12r00r00         [24] 6812 	lcall	__gptrput
                                   6813 ;	vt100.c:754: break;  
      00233E 02r24r1D         [24] 6814 	ljmp	00143$
                                   6815 ;	vt100.c:755: case 'Z': // Report terminal type 
      002341                       6816 00120$:
                                   6817 ;	vt100.c:757: term->send_response("\033[?1;0c");  
      002341 A8*00            [24] 6818 	mov	r0,_bp
      002343 08               [12] 6819 	inc	r0
      002344 74 18            [12] 6820 	mov	a,#0x18
      002346 26               [12] 6821 	add	a,@r0
      002347 FD               [12] 6822 	mov	r5,a
      002348 E4               [12] 6823 	clr	a
      002349 08               [12] 6824 	inc	r0
      00234A 36               [12] 6825 	addc	a,@r0
      00234B FE               [12] 6826 	mov	r6,a
      00234C 08               [12] 6827 	inc	r0
      00234D 86 07            [24] 6828 	mov	ar7,@r0
      00234F 8D 82            [24] 6829 	mov	dpl,r5
      002351 8E 83            [24] 6830 	mov	dph,r6
      002353 8F F0            [24] 6831 	mov	b,r7
      002355 12r00r00         [24] 6832 	lcall	__gptrget
      002358 FD               [12] 6833 	mov	r5,a
      002359 A3               [24] 6834 	inc	dptr
      00235A 12r00r00         [24] 6835 	lcall	__gptrget
      00235D FE               [12] 6836 	mov	r6,a
      00235E C0 06            [24] 6837 	push	ar6
      002360 C0 05            [24] 6838 	push	ar5
      002362 12r23r67         [24] 6839 	lcall	00300$
      002365 80 0B            [24] 6840 	sjmp	00301$
      002367                       6841 00300$:
      002367 C0 05            [24] 6842 	push	ar5
      002369 C0 06            [24] 6843 	push	ar6
      00236B 90r00r19         [24] 6844 	mov	dptr,#___str_1
      00236E 75 F0 80         [24] 6845 	mov	b,#0x80
      002371 22               [24] 6846 	ret
      002372                       6847 00301$:
      002372 D0 05            [24] 6848 	pop	ar5
      002374 D0 06            [24] 6849 	pop	ar6
                                   6850 ;	vt100.c:760: term->state = _st_idle;
      002376 A8*00            [24] 6851 	mov	r0,_bp
      002378 08               [12] 6852 	inc	r0
      002379 74 16            [12] 6853 	mov	a,#0x16
      00237B 26               [12] 6854 	add	a,@r0
      00237C FD               [12] 6855 	mov	r5,a
      00237D E4               [12] 6856 	clr	a
      00237E 08               [12] 6857 	inc	r0
      00237F 36               [12] 6858 	addc	a,@r0
      002380 FE               [12] 6859 	mov	r6,a
      002381 08               [12] 6860 	inc	r0
      002382 86 07            [24] 6861 	mov	ar7,@r0
      002384 8D 82            [24] 6862 	mov	dpl,r5
      002386 8E 83            [24] 6863 	mov	dph,r6
      002388 8F F0            [24] 6864 	mov	b,r7
      00238A 74r23            [12] 6865 	mov	a,#__st_idle
      00238C 12r00r00         [24] 6866 	lcall	__gptrput
      00238F A3               [24] 6867 	inc	dptr
      002390 74s24            [12] 6868 	mov	a,#(__st_idle >> 8)
      002392 12r00r00         [24] 6869 	lcall	__gptrput
                                   6870 ;	vt100.c:761: break;    
      002395 02r24r1D         [24] 6871 	ljmp	00143$
                                   6872 ;	vt100.c:762: case 'c': // Reset terminal to initial state 
      002398                       6873 00121$:
                                   6874 ;	vt100.c:763: _vt100_reset();
      002398 12r01r74         [24] 6875 	lcall	__vt100_reset
                                   6876 ;	vt100.c:764: term->state = _st_idle;
      00239B A8*00            [24] 6877 	mov	r0,_bp
      00239D 08               [12] 6878 	inc	r0
      00239E 74 16            [12] 6879 	mov	a,#0x16
      0023A0 26               [12] 6880 	add	a,@r0
      0023A1 FD               [12] 6881 	mov	r5,a
      0023A2 E4               [12] 6882 	clr	a
      0023A3 08               [12] 6883 	inc	r0
      0023A4 36               [12] 6884 	addc	a,@r0
      0023A5 FE               [12] 6885 	mov	r6,a
      0023A6 08               [12] 6886 	inc	r0
      0023A7 86 07            [24] 6887 	mov	ar7,@r0
      0023A9 8D 82            [24] 6888 	mov	dpl,r5
      0023AB 8E 83            [24] 6889 	mov	dph,r6
      0023AD 8F F0            [24] 6890 	mov	b,r7
      0023AF 74r23            [12] 6891 	mov	a,#__st_idle
      0023B1 12r00r00         [24] 6892 	lcall	__gptrput
      0023B4 A3               [24] 6893 	inc	dptr
      0023B5 74s24            [12] 6894 	mov	a,#(__st_idle >> 8)
      0023B7 12r00r00         [24] 6895 	lcall	__gptrput
                                   6896 ;	vt100.c:765: break;  
                                   6897 ;	vt100.c:769: case '<': // Exit vt52 mode
      0023BA 80 61            [24] 6898 	sjmp	00143$
      0023BC                       6899 00125$:
                                   6900 ;	vt100.c:771: term->state = _st_idle;
      0023BC A8*00            [24] 6901 	mov	r0,_bp
      0023BE 08               [12] 6902 	inc	r0
      0023BF 74 16            [12] 6903 	mov	a,#0x16
      0023C1 26               [12] 6904 	add	a,@r0
      0023C2 FD               [12] 6905 	mov	r5,a
      0023C3 E4               [12] 6906 	clr	a
      0023C4 08               [12] 6907 	inc	r0
      0023C5 36               [12] 6908 	addc	a,@r0
      0023C6 FE               [12] 6909 	mov	r6,a
      0023C7 08               [12] 6910 	inc	r0
      0023C8 86 07            [24] 6911 	mov	ar7,@r0
      0023CA 8D 82            [24] 6912 	mov	dpl,r5
      0023CC 8E 83            [24] 6913 	mov	dph,r6
      0023CE 8F F0            [24] 6914 	mov	b,r7
      0023D0 74r23            [12] 6915 	mov	a,#__st_idle
      0023D2 12r00r00         [24] 6916 	lcall	__gptrput
      0023D5 A3               [24] 6917 	inc	dptr
      0023D6 74s24            [12] 6918 	mov	a,#(__st_idle >> 8)
      0023D8 12r00r00         [24] 6919 	lcall	__gptrput
                                   6920 ;	vt100.c:772: break; 
                                   6921 ;	vt100.c:777: default: { // unknown sequence - return to normal mode
      0023DB 80 40            [24] 6922 	sjmp	00143$
      0023DD                       6923 00127$:
                                   6924 ;	vt100.c:778: term->state = _st_idle;
      0023DD A8*00            [24] 6925 	mov	r0,_bp
      0023DF 08               [12] 6926 	inc	r0
      0023E0 74 16            [12] 6927 	mov	a,#0x16
      0023E2 26               [12] 6928 	add	a,@r0
      0023E3 FD               [12] 6929 	mov	r5,a
      0023E4 E4               [12] 6930 	clr	a
      0023E5 08               [12] 6931 	inc	r0
      0023E6 36               [12] 6932 	addc	a,@r0
      0023E7 FE               [12] 6933 	mov	r6,a
      0023E8 08               [12] 6934 	inc	r0
      0023E9 86 07            [24] 6935 	mov	ar7,@r0
      0023EB 8D 82            [24] 6936 	mov	dpl,r5
      0023ED 8E 83            [24] 6937 	mov	dph,r6
      0023EF 8F F0            [24] 6938 	mov	b,r7
      0023F1 74r23            [12] 6939 	mov	a,#__st_idle
      0023F3 12r00r00         [24] 6940 	lcall	__gptrput
      0023F6 A3               [24] 6941 	inc	dptr
      0023F7 74s24            [12] 6942 	mov	a,#(__st_idle >> 8)
      0023F9 12r00r00         [24] 6943 	lcall	__gptrput
                                   6944 ;	vt100.c:783: break;
                                   6945 ;	vt100.c:785: default: {
      0023FC 80 1F            [24] 6946 	sjmp	00143$
      0023FE                       6947 00129$:
                                   6948 ;	vt100.c:787: term->state = _st_idle; 
      0023FE A8*00            [24] 6949 	mov	r0,_bp
      002400 08               [12] 6950 	inc	r0
      002401 74 16            [12] 6951 	mov	a,#0x16
      002403 26               [12] 6952 	add	a,@r0
      002404 FD               [12] 6953 	mov	r5,a
      002405 E4               [12] 6954 	clr	a
      002406 08               [12] 6955 	inc	r0
      002407 36               [12] 6956 	addc	a,@r0
      002408 FE               [12] 6957 	mov	r6,a
      002409 08               [12] 6958 	inc	r0
      00240A 86 07            [24] 6959 	mov	ar7,@r0
      00240C 8D 82            [24] 6960 	mov	dpl,r5
      00240E 8E 83            [24] 6961 	mov	dph,r6
      002410 8F F0            [24] 6962 	mov	b,r7
      002412 74r23            [12] 6963 	mov	a,#__st_idle
      002414 12r00r00         [24] 6964 	lcall	__gptrput
      002417 A3               [24] 6965 	inc	dptr
      002418 74s24            [12] 6966 	mov	a,#(__st_idle >> 8)
      00241A 12r00r00         [24] 6967 	lcall	__gptrput
                                   6968 ;	vt100.c:789: }
      00241D                       6969 00143$:
                                   6970 ;	vt100.c:790: }
      00241D 85*00 81         [24] 6971 	mov	sp,_bp
      002420 D0*00            [24] 6972 	pop	_bp
      002422 22               [24] 6973 	ret
                                   6974 ;------------------------------------------------------------
                                   6975 ;Allocation info for local variables in function '_st_idle'
                                   6976 ;------------------------------------------------------------
                                   6977 ;ev                        Allocated to stack - _bp -3
                                   6978 ;arg                       Allocated to stack - _bp -4
                                   6979 ;term                      Allocated to stack - _bp +1
                                   6980 ;tab_stop                  Allocated to registers 
                                   6981 ;to_put                    Allocated to registers 
                                   6982 ;------------------------------------------------------------
                                   6983 ;	vt100.c:793: STATE(_st_idle, term, ev, arg) {
                                   6984 ;	-----------------------------------------
                                   6985 ;	 function _st_idle
                                   6986 ;	-----------------------------------------
      002423                       6987 __st_idle:
      002423 C0*00            [24] 6988 	push	_bp
      002425 85 81*00         [24] 6989 	mov	_bp,sp
      002428 C0 82            [24] 6990 	push	dpl
      00242A C0 83            [24] 6991 	push	dph
      00242C C0 F0            [24] 6992 	push	b
                                   6993 ;	vt100.c:796: switch(ev){
      00242E E5*00            [12] 6994 	mov	a,_bp
      002430 24 FD            [12] 6995 	add	a,#0xfd
      002432 F8               [12] 6996 	mov	r0,a
      002433 B6 01 02         [24] 6997 	cjne	@r0,#0x01,00164$
      002436 80 03            [24] 6998 	sjmp	00165$
      002438                       6999 00164$:
      002438 02r26r15         [24] 7000 	ljmp	00117$
      00243B                       7001 00165$:
                                   7002 ;	vt100.c:798: switch(arg){
      00243B E5*00            [12] 7003 	mov	a,_bp
      00243D 24 FC            [12] 7004 	add	a,#0xfc
      00243F F8               [12] 7005 	mov	r0,a
      002440 B6 05 02         [24] 7006 	cjne	@r0,#0x05,00166$
      002443 80 4F            [24] 7007 	sjmp	00102$
      002445                       7008 00166$:
      002445 E5*00            [12] 7009 	mov	a,_bp
      002447 24 FC            [12] 7010 	add	a,#0xfc
      002449 F8               [12] 7011 	mov	r0,a
      00244A B6 07 03         [24] 7012 	cjne	@r0,#0x07,00167$
      00244D 02r26r15         [24] 7013 	ljmp	00117$
      002450                       7014 00167$:
      002450 E5*00            [12] 7015 	mov	a,_bp
      002452 24 FC            [12] 7016 	add	a,#0xfc
      002454 F8               [12] 7017 	mov	r0,a
      002455 B6 08 03         [24] 7018 	cjne	@r0,#0x08,00168$
      002458 02r25r21         [24] 7019 	ljmp	00105$
      00245B                       7020 00168$:
      00245B E5*00            [12] 7021 	mov	a,_bp
      00245D 24 FC            [12] 7022 	add	a,#0xfc
      00245F F8               [12] 7023 	mov	r0,a
      002460 B6 09 03         [24] 7024 	cjne	@r0,#0x09,00169$
      002463 02r25r77         [24] 7025 	ljmp	00107$
      002466                       7026 00169$:
      002466 E5*00            [12] 7027 	mov	a,_bp
      002468 24 FC            [12] 7028 	add	a,#0xfc
      00246A F8               [12] 7029 	mov	r0,a
      00246B B6 0A 02         [24] 7030 	cjne	@r0,#0x0a,00170$
      00246E 80 5C            [24] 7031 	sjmp	00103$
      002470                       7032 00170$:
      002470 E5*00            [12] 7033 	mov	a,_bp
      002472 24 FC            [12] 7034 	add	a,#0xfc
      002474 F8               [12] 7035 	mov	r0,a
      002475 B6 0D 03         [24] 7036 	cjne	@r0,#0x0d,00171$
      002478 02r25r06         [24] 7037 	ljmp	00104$
      00247B                       7038 00171$:
      00247B E5*00            [12] 7039 	mov	a,_bp
      00247D 24 FC            [12] 7040 	add	a,#0xfc
      00247F F8               [12] 7041 	mov	r0,a
      002480 B6 1B 03         [24] 7042 	cjne	@r0,#0x1b,00172$
      002483 02r25rDC         [24] 7043 	ljmp	00112$
      002486                       7044 00172$:
      002486 E5*00            [12] 7045 	mov	a,_bp
      002488 24 FC            [12] 7046 	add	a,#0xfc
      00248A F8               [12] 7047 	mov	r0,a
      00248B B6 7F 03         [24] 7048 	cjne	@r0,#0x7f,00173$
      00248E 02r25r42         [24] 7049 	ljmp	00106$
      002491                       7050 00173$:
      002491 02r25rFD         [24] 7051 	ljmp	00113$
                                   7052 ;	vt100.c:800: case 5: // AnswerBack for vt100's  
      002494                       7053 00102$:
                                   7054 ;	vt100.c:801: term->send_response("X"); // should send SCCS_ID?
      002494 A8*00            [24] 7055 	mov	r0,_bp
      002496 08               [12] 7056 	inc	r0
      002497 74 18            [12] 7057 	mov	a,#0x18
      002499 26               [12] 7058 	add	a,@r0
      00249A FA               [12] 7059 	mov	r2,a
      00249B E4               [12] 7060 	clr	a
      00249C 08               [12] 7061 	inc	r0
      00249D 36               [12] 7062 	addc	a,@r0
      00249E FB               [12] 7063 	mov	r3,a
      00249F 08               [12] 7064 	inc	r0
      0024A0 86 04            [24] 7065 	mov	ar4,@r0
      0024A2 8A 82            [24] 7066 	mov	dpl,r2
      0024A4 8B 83            [24] 7067 	mov	dph,r3
      0024A6 8C F0            [24] 7068 	mov	b,r4
      0024A8 12r00r00         [24] 7069 	lcall	__gptrget
      0024AB FA               [12] 7070 	mov	r2,a
      0024AC A3               [24] 7071 	inc	dptr
      0024AD 12r00r00         [24] 7072 	lcall	__gptrget
      0024B0 FB               [12] 7073 	mov	r3,a
      0024B1 C0 03            [24] 7074 	push	ar3
      0024B3 C0 02            [24] 7075 	push	ar2
      0024B5 12r24rBA         [24] 7076 	lcall	00174$
      0024B8 80 0B            [24] 7077 	sjmp	00175$
      0024BA                       7078 00174$:
      0024BA C0 02            [24] 7079 	push	ar2
      0024BC C0 03            [24] 7080 	push	ar3
      0024BE 90r00r21         [24] 7081 	mov	dptr,#___str_2
      0024C1 75 F0 80         [24] 7082 	mov	b,#0x80
      0024C4 22               [24] 7083 	ret
      0024C5                       7084 00175$:
      0024C5 D0 02            [24] 7085 	pop	ar2
      0024C7 D0 03            [24] 7086 	pop	ar3
                                   7087 ;	vt100.c:802: break;  
      0024C9 02r26r15         [24] 7088 	ljmp	00117$
                                   7089 ;	vt100.c:803: case '\n': { // new line
      0024CC                       7090 00103$:
                                   7091 ;	vt100.c:804: _vt100_move(term, 0, 1);
      0024CC 74 01            [12] 7092 	mov	a,#0x01
      0024CE C0 E0            [24] 7093 	push	acc
      0024D0 E4               [12] 7094 	clr	a
      0024D1 C0 E0            [24] 7095 	push	acc
      0024D3 C0 E0            [24] 7096 	push	acc
      0024D5 C0 E0            [24] 7097 	push	acc
      0024D7 A8*00            [24] 7098 	mov	r0,_bp
      0024D9 08               [12] 7099 	inc	r0
      0024DA 86 82            [24] 7100 	mov	dpl,@r0
      0024DC 08               [12] 7101 	inc	r0
      0024DD 86 83            [24] 7102 	mov	dph,@r0
      0024DF 08               [12] 7103 	inc	r0
      0024E0 86 F0            [24] 7104 	mov	b,@r0
      0024E2 12r05rA5         [24] 7105 	lcall	__vt100_move
      0024E5 E5 81            [12] 7106 	mov	a,sp
      0024E7 24 FC            [12] 7107 	add	a,#0xfc
      0024E9 F5 81            [12] 7108 	mov	sp,a
                                   7109 ;	vt100.c:805: term->cursor_x = 0; 
      0024EB A8*00            [24] 7110 	mov	r0,_bp
      0024ED 08               [12] 7111 	inc	r0
      0024EE 74 01            [12] 7112 	mov	a,#0x01
      0024F0 26               [12] 7113 	add	a,@r0
      0024F1 FA               [12] 7114 	mov	r2,a
      0024F2 E4               [12] 7115 	clr	a
      0024F3 08               [12] 7116 	inc	r0
      0024F4 36               [12] 7117 	addc	a,@r0
      0024F5 FB               [12] 7118 	mov	r3,a
      0024F6 08               [12] 7119 	inc	r0
      0024F7 86 04            [24] 7120 	mov	ar4,@r0
      0024F9 8A 82            [24] 7121 	mov	dpl,r2
      0024FB 8B 83            [24] 7122 	mov	dph,r3
      0024FD 8C F0            [24] 7123 	mov	b,r4
      0024FF E4               [12] 7124 	clr	a
      002500 12r00r00         [24] 7125 	lcall	__gptrput
                                   7126 ;	vt100.c:808: break;
      002503 02r26r15         [24] 7127 	ljmp	00117$
                                   7128 ;	vt100.c:810: case '\r': { // carrage return (0x0d)
      002506                       7129 00104$:
                                   7130 ;	vt100.c:811: term->cursor_x = 0; 
      002506 A8*00            [24] 7131 	mov	r0,_bp
      002508 08               [12] 7132 	inc	r0
      002509 74 01            [12] 7133 	mov	a,#0x01
      00250B 26               [12] 7134 	add	a,@r0
      00250C FA               [12] 7135 	mov	r2,a
      00250D E4               [12] 7136 	clr	a
      00250E 08               [12] 7137 	inc	r0
      00250F 36               [12] 7138 	addc	a,@r0
      002510 FB               [12] 7139 	mov	r3,a
      002511 08               [12] 7140 	inc	r0
      002512 86 04            [24] 7141 	mov	ar4,@r0
      002514 8A 82            [24] 7142 	mov	dpl,r2
      002516 8B 83            [24] 7143 	mov	dph,r3
      002518 8C F0            [24] 7144 	mov	b,r4
      00251A E4               [12] 7145 	clr	a
      00251B 12r00r00         [24] 7146 	lcall	__gptrput
                                   7147 ;	vt100.c:814: break;
      00251E 02r26r15         [24] 7148 	ljmp	00117$
                                   7149 ;	vt100.c:816: case '\b': { // backspace 0x08
      002521                       7150 00105$:
                                   7151 ;	vt100.c:817: _vt100_move(term, -1, 0); 
      002521 E4               [12] 7152 	clr	a
      002522 C0 E0            [24] 7153 	push	acc
      002524 C0 E0            [24] 7154 	push	acc
      002526 14               [12] 7155 	dec	a
      002527 C0 E0            [24] 7156 	push	acc
      002529 C0 E0            [24] 7157 	push	acc
      00252B A8*00            [24] 7158 	mov	r0,_bp
      00252D 08               [12] 7159 	inc	r0
      00252E 86 82            [24] 7160 	mov	dpl,@r0
      002530 08               [12] 7161 	inc	r0
      002531 86 83            [24] 7162 	mov	dph,@r0
      002533 08               [12] 7163 	inc	r0
      002534 86 F0            [24] 7164 	mov	b,@r0
      002536 12r05rA5         [24] 7165 	lcall	__vt100_move
      002539 E5 81            [12] 7166 	mov	a,sp
      00253B 24 FC            [12] 7167 	add	a,#0xfc
      00253D F5 81            [12] 7168 	mov	sp,a
                                   7169 ;	vt100.c:821: break;
      00253F 02r26r15         [24] 7170 	ljmp	00117$
                                   7171 ;	vt100.c:823: case KEY_DEL: { // del - delete character under cursor
      002542                       7172 00106$:
                                   7173 ;	vt100.c:827: _vt100_putc(term, ' ');
      002542 74 20            [12] 7174 	mov	a,#0x20
      002544 C0 E0            [24] 7175 	push	acc
      002546 A8*00            [24] 7176 	mov	r0,_bp
      002548 08               [12] 7177 	inc	r0
      002549 86 82            [24] 7178 	mov	dpl,@r0
      00254B 08               [12] 7179 	inc	r0
      00254C 86 83            [24] 7180 	mov	dph,@r0
      00254E 08               [12] 7181 	inc	r0
      00254F 86 F0            [24] 7182 	mov	b,@r0
      002551 12r08r4A         [24] 7183 	lcall	__vt100_putc
      002554 15 81            [12] 7184 	dec	sp
                                   7185 ;	vt100.c:828: _vt100_move(term, -1, 0);
      002556 E4               [12] 7186 	clr	a
      002557 C0 E0            [24] 7187 	push	acc
      002559 C0 E0            [24] 7188 	push	acc
      00255B 14               [12] 7189 	dec	a
      00255C C0 E0            [24] 7190 	push	acc
      00255E C0 E0            [24] 7191 	push	acc
      002560 A8*00            [24] 7192 	mov	r0,_bp
      002562 08               [12] 7193 	inc	r0
      002563 86 82            [24] 7194 	mov	dpl,@r0
      002565 08               [12] 7195 	inc	r0
      002566 86 83            [24] 7196 	mov	dph,@r0
      002568 08               [12] 7197 	inc	r0
      002569 86 F0            [24] 7198 	mov	b,@r0
      00256B 12r05rA5         [24] 7199 	lcall	__vt100_move
      00256E E5 81            [12] 7200 	mov	a,sp
      002570 24 FC            [12] 7201 	add	a,#0xfc
      002572 F5 81            [12] 7202 	mov	sp,a
                                   7203 ;	vt100.c:830: break;
      002574 02r26r15         [24] 7204 	ljmp	00117$
                                   7205 ;	vt100.c:832: case '\t': { // tab
      002577                       7206 00107$:
                                   7207 ;	vt100.c:835: int to_put = tab_stop - (term->cursor_x % tab_stop); 
      002577 A8*00            [24] 7208 	mov	r0,_bp
      002579 08               [12] 7209 	inc	r0
      00257A 74 01            [12] 7210 	mov	a,#0x01
      00257C 26               [12] 7211 	add	a,@r0
      00257D FA               [12] 7212 	mov	r2,a
      00257E E4               [12] 7213 	clr	a
      00257F 08               [12] 7214 	inc	r0
      002580 36               [12] 7215 	addc	a,@r0
      002581 FB               [12] 7216 	mov	r3,a
      002582 08               [12] 7217 	inc	r0
      002583 86 04            [24] 7218 	mov	ar4,@r0
      002585 8A 82            [24] 7219 	mov	dpl,r2
      002587 8B 83            [24] 7220 	mov	dph,r3
      002589 8C F0            [24] 7221 	mov	b,r4
      00258B 12r00r00         [24] 7222 	lcall	__gptrget
      00258E FA               [12] 7223 	mov	r2,a
      00258F 33               [12] 7224 	rlc	a
      002590 95 E0            [12] 7225 	subb	a,acc
      002592 FC               [12] 7226 	mov	r4,a
      002593 74 04            [12] 7227 	mov	a,#0x04
      002595 C0 E0            [24] 7228 	push	acc
      002597 E4               [12] 7229 	clr	a
      002598 C0 E0            [24] 7230 	push	acc
      00259A 8A 82            [24] 7231 	mov	dpl,r2
      00259C 8C 83            [24] 7232 	mov	dph,r4
      00259E 12r00r00         [24] 7233 	lcall	__modsint
      0025A1 AB 82            [24] 7234 	mov	r3,dpl
      0025A3 AC 83            [24] 7235 	mov	r4,dph
      0025A5 15 81            [12] 7236 	dec	sp
      0025A7 15 81            [12] 7237 	dec	sp
      0025A9 74 04            [12] 7238 	mov	a,#0x04
      0025AB C3               [12] 7239 	clr	c
      0025AC 9B               [12] 7240 	subb	a,r3
      0025AD FB               [12] 7241 	mov	r3,a
      0025AE E4               [12] 7242 	clr	a
      0025AF 9C               [12] 7243 	subb	a,r4
      0025B0 FC               [12] 7244 	mov	r4,a
                                   7245 ;	vt100.c:836: while(to_put--) _vt100_putc(term, ' ');
      0025B1                       7246 00108$:
      0025B1 8B 02            [24] 7247 	mov	ar2,r3
      0025B3 8C 07            [24] 7248 	mov	ar7,r4
      0025B5 1B               [12] 7249 	dec	r3
      0025B6 BB FF 01         [24] 7250 	cjne	r3,#0xff,00176$
      0025B9 1C               [12] 7251 	dec	r4
      0025BA                       7252 00176$:
      0025BA EA               [12] 7253 	mov	a,r2
      0025BB 4F               [12] 7254 	orl	a,r7
      0025BC 60 57            [24] 7255 	jz	00117$
      0025BE C0 04            [24] 7256 	push	ar4
      0025C0 C0 03            [24] 7257 	push	ar3
      0025C2 74 20            [12] 7258 	mov	a,#0x20
      0025C4 C0 E0            [24] 7259 	push	acc
      0025C6 A8*00            [24] 7260 	mov	r0,_bp
      0025C8 08               [12] 7261 	inc	r0
      0025C9 86 82            [24] 7262 	mov	dpl,@r0
      0025CB 08               [12] 7263 	inc	r0
      0025CC 86 83            [24] 7264 	mov	dph,@r0
      0025CE 08               [12] 7265 	inc	r0
      0025CF 86 F0            [24] 7266 	mov	b,@r0
      0025D1 12r08r4A         [24] 7267 	lcall	__vt100_putc
      0025D4 15 81            [12] 7268 	dec	sp
      0025D6 D0 03            [24] 7269 	pop	ar3
      0025D8 D0 04            [24] 7270 	pop	ar4
                                   7271 ;	vt100.c:844: case KEY_ESC: {// escape
      0025DA 80 D5            [24] 7272 	sjmp	00108$
      0025DC                       7273 00112$:
                                   7274 ;	vt100.c:845: term->state = _st_escape;
      0025DC A8*00            [24] 7275 	mov	r0,_bp
      0025DE 08               [12] 7276 	inc	r0
      0025DF 74 16            [12] 7277 	mov	a,#0x16
      0025E1 26               [12] 7278 	add	a,@r0
      0025E2 FD               [12] 7279 	mov	r5,a
      0025E3 E4               [12] 7280 	clr	a
      0025E4 08               [12] 7281 	inc	r0
      0025E5 36               [12] 7282 	addc	a,@r0
      0025E6 FE               [12] 7283 	mov	r6,a
      0025E7 08               [12] 7284 	inc	r0
      0025E8 86 07            [24] 7285 	mov	ar7,@r0
      0025EA 8D 82            [24] 7286 	mov	dpl,r5
      0025EC 8E 83            [24] 7287 	mov	dph,r6
      0025EE 8F F0            [24] 7288 	mov	b,r7
      0025F0 74rB9            [12] 7289 	mov	a,#__st_escape
      0025F2 12r00r00         [24] 7290 	lcall	__gptrput
      0025F5 A3               [24] 7291 	inc	dptr
      0025F6 74s1D            [12] 7292 	mov	a,#(__st_escape >> 8)
      0025F8 12r00r00         [24] 7293 	lcall	__gptrput
                                   7294 ;	vt100.c:846: break;
                                   7295 ;	vt100.c:848: default: {
      0025FB 80 18            [24] 7296 	sjmp	00117$
      0025FD                       7297 00113$:
                                   7298 ;	vt100.c:849: _vt100_putc(term, arg);
      0025FD E5*00            [12] 7299 	mov	a,_bp
      0025FF 24 FC            [12] 7300 	add	a,#0xfc
      002601 F8               [12] 7301 	mov	r0,a
      002602 E6               [12] 7302 	mov	a,@r0
      002603 C0 E0            [24] 7303 	push	acc
      002605 A8*00            [24] 7304 	mov	r0,_bp
      002607 08               [12] 7305 	inc	r0
      002608 86 82            [24] 7306 	mov	dpl,@r0
      00260A 08               [12] 7307 	inc	r0
      00260B 86 83            [24] 7308 	mov	dph,@r0
      00260D 08               [12] 7309 	inc	r0
      00260E 86 F0            [24] 7310 	mov	b,@r0
      002610 12r08r4A         [24] 7311 	lcall	__vt100_putc
      002613 15 81            [12] 7312 	dec	sp
                                   7313 ;	vt100.c:856: }
      002615                       7314 00117$:
                                   7315 ;	vt100.c:857: }
      002615 85*00 81         [24] 7316 	mov	sp,_bp
      002618 D0*00            [24] 7317 	pop	_bp
      00261A 22               [24] 7318 	ret
                                   7319 ;------------------------------------------------------------
                                   7320 ;Allocation info for local variables in function 'vt100_init'
                                   7321 ;------------------------------------------------------------
                                   7322 ;send_response             Allocated to registers r6 r7 
                                   7323 ;------------------------------------------------------------
                                   7324 ;	vt100.c:860: void vt100_init(void (*send_response)(char *str)){
                                   7325 ;	-----------------------------------------
                                   7326 ;	 function vt100_init
                                   7327 ;	-----------------------------------------
      00261B                       7328 _vt100_init:
      00261B AE 82            [24] 7329 	mov	r6,dpl
      00261D AF 83            [24] 7330 	mov	r7,dph
                                   7331 ;	vt100.c:861: term.send_response = send_response; 
      00261F 8E*1C            [24] 7332 	mov	((_term + 0x0018) + 0),r6
      002621 8F*1D            [24] 7333 	mov	((_term + 0x0018) + 1),r7
                                   7334 ;	vt100.c:862: _vt100_reset(); 
                                   7335 ;	vt100.c:863: }
      002623 02r01r74         [24] 7336 	ljmp	__vt100_reset
                                   7337 ;------------------------------------------------------------
                                   7338 ;Allocation info for local variables in function 'vt100_putc'
                                   7339 ;------------------------------------------------------------
                                   7340 ;c                         Allocated to registers r7 
                                   7341 ;------------------------------------------------------------
                                   7342 ;	vt100.c:866: void vt100_putc(uint8_t c){
                                   7343 ;	-----------------------------------------
                                   7344 ;	 function vt100_putc
                                   7345 ;	-----------------------------------------
      002626                       7346 _vt100_putc:
                                   7347 ;	vt100.c:900: putchar(c);
      002626 7E 00            [12] 7348 	mov	r6,#0x00
      002628 8E 83            [24] 7349 	mov	dph,r6
                                   7350 ;	vt100.c:902: }
      00262A 02r01r43         [24] 7351 	ljmp	_putchar
                                   7352 ;------------------------------------------------------------
                                   7353 ;Allocation info for local variables in function 'vt100_puts'
                                   7354 ;------------------------------------------------------------
                                   7355 ;str                       Allocated to registers 
                                   7356 ;------------------------------------------------------------
                                   7357 ;	vt100.c:904: void vt100_puts(const char *str){
                                   7358 ;	-----------------------------------------
                                   7359 ;	 function vt100_puts
                                   7360 ;	-----------------------------------------
      00262D                       7361 _vt100_puts:
      00262D AD 82            [24] 7362 	mov	r5,dpl
      00262F AE 83            [24] 7363 	mov	r6,dph
      002631 AF F0            [24] 7364 	mov	r7,b
                                   7365 ;	vt100.c:905: while(*str){
      002633                       7366 00101$:
      002633 8D 82            [24] 7367 	mov	dpl,r5
      002635 8E 83            [24] 7368 	mov	dph,r6
      002637 8F F0            [24] 7369 	mov	b,r7
      002639 12r00r00         [24] 7370 	lcall	__gptrget
      00263C FC               [12] 7371 	mov	r4,a
      00263D 60 18            [24] 7372 	jz	00104$
                                   7373 ;	vt100.c:906: vt100_putc(*str++);
      00263F 0D               [12] 7374 	inc	r5
      002640 BD 00 01         [24] 7375 	cjne	r5,#0x00,00116$
      002643 0E               [12] 7376 	inc	r6
      002644                       7377 00116$:
      002644 8C 82            [24] 7378 	mov	dpl,r4
      002646 C0 07            [24] 7379 	push	ar7
      002648 C0 06            [24] 7380 	push	ar6
      00264A C0 05            [24] 7381 	push	ar5
      00264C 12r26r26         [24] 7382 	lcall	_vt100_putc
      00264F D0 05            [24] 7383 	pop	ar5
      002651 D0 06            [24] 7384 	pop	ar6
      002653 D0 07            [24] 7385 	pop	ar7
      002655 80 DC            [24] 7386 	sjmp	00101$
      002657                       7387 00104$:
                                   7388 ;	vt100.c:908: }
      002657 22               [24] 7389 	ret
                                   7390 ;------------------------------------------------------------
                                   7391 ;Allocation info for local variables in function 'spf'
                                   7392 ;------------------------------------------------------------
                                   7393 ;s                         Allocated to stack - _bp -5
                                   7394 ;args                      Allocated to stack - _bp +2
                                   7395 ;fmt                       Allocated to registers r7 
                                   7396 ;c                         Allocated to registers r5 
                                   7397 ;d                         Allocated to registers r4 
                                   7398 ;b                         Allocated to registers r7 
                                   7399 ;sloc0                     Allocated to stack - _bp +1
                                   7400 ;------------------------------------------------------------
                                   7401 ;	vt100.c:912: void spf(uint8_t *s, ...) {
                                   7402 ;	-----------------------------------------
                                   7403 ;	 function spf
                                   7404 ;	-----------------------------------------
      002658                       7405 _spf:
      002658 C0*00            [24] 7406 	push	_bp
      00265A 85 81*00         [24] 7407 	mov	_bp,sp
      00265D 05 81            [12] 7408 	inc	sp
      00265F 05 81            [12] 7409 	inc	sp
                                   7410 ;	vt100.c:914: uint8_t fmt = 0, c, d, b = 0;
                                   7411 ;	vt100.c:916: va_start(args, s);
      002661 E4               [12] 7412 	clr	a
      002662 FF               [12] 7413 	mov	r7,a
      002663 FE               [12] 7414 	mov	r6,a
      002664 E5*00            [12] 7415 	mov	a,_bp
      002666 24 FB            [12] 7416 	add	a,#0xfb
      002668 FD               [12] 7417 	mov	r5,a
      002669 A8*00            [24] 7418 	mov	r0,_bp
      00266B 08               [12] 7419 	inc	r0
      00266C 08               [12] 7420 	inc	r0
      00266D A6 05            [24] 7421 	mov	@r0,ar5
      00266F E5*00            [12] 7422 	mov	a,_bp
      002671 24 FB            [12] 7423 	add	a,#0xfb
      002673 F8               [12] 7424 	mov	r0,a
      002674 86 02            [24] 7425 	mov	ar2,@r0
      002676 08               [12] 7426 	inc	r0
      002677 86 03            [24] 7427 	mov	ar3,@r0
      002679 08               [12] 7428 	inc	r0
      00267A 86 04            [24] 7429 	mov	ar4,@r0
      00267C 7D 00            [12] 7430 	mov	r5,#0x00
      00267E                       7431 00111$:
                                   7432 ;	vt100.c:918: for(; *s; ) {
      00267E 8A 82            [24] 7433 	mov	dpl,r2
      002680 8B 83            [24] 7434 	mov	dph,r3
      002682 8C F0            [24] 7435 	mov	b,r4
      002684 A8*00            [24] 7436 	mov	r0,_bp
      002686 08               [12] 7437 	inc	r0
      002687 12r00r00         [24] 7438 	lcall	__gptrget
      00268A F6               [12] 7439 	mov	@r0,a
      00268B A8*00            [24] 7440 	mov	r0,_bp
      00268D 08               [12] 7441 	inc	r0
      00268E E6               [12] 7442 	mov	a,@r0
      00268F 70 03            [24] 7443 	jnz	00145$
      002691 02r27r69         [24] 7444 	ljmp	00120$
      002694                       7445 00145$:
                                   7446 ;	vt100.c:920: switch (fmt) {
      002694 BF 00 02         [24] 7447 	cjne	r7,#0x00,00146$
      002697 80 0D            [24] 7448 	sjmp	00101$
      002699                       7449 00146$:
      002699 BF 25 02         [24] 7450 	cjne	r7,#0x25,00147$
      00269C 80 2F            [24] 7451 	sjmp	00105$
      00269E                       7452 00147$:
      00269E BF 64 02         [24] 7453 	cjne	r7,#0x64,00148$
      0026A1 80 51            [24] 7454 	sjmp	00106$
      0026A3                       7455 00148$:
      0026A3 02r27r54         [24] 7456 	ljmp	00107$
                                   7457 ;	vt100.c:921: case 0:
      0026A6                       7458 00101$:
                                   7459 ;	vt100.c:922: if (*s == '%') fmt = *s;
      0026A6 A8*00            [24] 7460 	mov	r0,_bp
      0026A8 08               [12] 7461 	inc	r0
      0026A9 B6 25 0E         [24] 7462 	cjne	@r0,#0x25,00103$
      0026AC C0 05            [24] 7463 	push	ar5
      0026AE A8*00            [24] 7464 	mov	r0,_bp
      0026B0 08               [12] 7465 	inc	r0
      0026B1 86 05            [24] 7466 	mov	ar5,@r0
      0026B3 8D 07            [24] 7467 	mov	ar7,r5
      0026B5 D0 05            [24] 7468 	pop	ar5
      0026B7 02r27r54         [24] 7469 	ljmp	00107$
      0026BA                       7470 00103$:
                                   7471 ;	vt100.c:923: else buf[b++] = *s;
      0026BA C0 05            [24] 7472 	push	ar5
      0026BC 8E 05            [24] 7473 	mov	ar5,r6
      0026BE 0E               [12] 7474 	inc	r6
      0026BF ED               [12] 7475 	mov	a,r5
      0026C0 24r20            [12] 7476 	add	a,#_buf
      0026C2 F8               [12] 7477 	mov	r0,a
      0026C3 A9*00            [24] 7478 	mov	r1,_bp
      0026C5 09               [12] 7479 	inc	r1
      0026C6 E7               [12] 7480 	mov	a,@r1
      0026C7 F6               [12] 7481 	mov	@r0,a
                                   7482 ;	vt100.c:924: break;
      0026C8 D0 05            [24] 7483 	pop	ar5
      0026CA 02r27r54         [24] 7484 	ljmp	00107$
                                   7485 ;	vt100.c:925: case '%':
      0026CD                       7486 00105$:
                                   7487 ;	vt100.c:926: fmt = *s;
      0026CD C0 02            [24] 7488 	push	ar2
      0026CF C0 03            [24] 7489 	push	ar3
      0026D1 C0 04            [24] 7490 	push	ar4
      0026D3 A8*00            [24] 7491 	mov	r0,_bp
      0026D5 08               [12] 7492 	inc	r0
      0026D6 86 04            [24] 7493 	mov	ar4,@r0
      0026D8 8C 07            [24] 7494 	mov	ar7,r4
                                   7495 ;	vt100.c:927: c = (uint8_t)va_arg(args, uint16_t);
      0026DA A8*00            [24] 7496 	mov	r0,_bp
      0026DC 08               [12] 7497 	inc	r0
      0026DD 08               [12] 7498 	inc	r0
      0026DE E6               [12] 7499 	mov	a,@r0
      0026DF 24 FE            [12] 7500 	add	a,#0xfe
      0026E1 FC               [12] 7501 	mov	r4,a
      0026E2 A8*00            [24] 7502 	mov	r0,_bp
      0026E4 08               [12] 7503 	inc	r0
      0026E5 08               [12] 7504 	inc	r0
      0026E6 A6 04            [24] 7505 	mov	@r0,ar4
      0026E8 8C 01            [24] 7506 	mov	ar1,r4
      0026EA 87 05            [24] 7507 	mov	ar5,@r1
                                   7508 ;	vt100.c:929: break;
      0026EC D0 04            [24] 7509 	pop	ar4
      0026EE D0 03            [24] 7510 	pop	ar3
      0026F0 D0 02            [24] 7511 	pop	ar2
                                   7512 ;	vt100.c:930: case 'd':
      0026F2 80 60            [24] 7513 	sjmp	00107$
      0026F4                       7514 00106$:
                                   7515 ;	vt100.c:932: buf[b++] = (d = c / 10) + '0';
      0026F4 C0 02            [24] 7516 	push	ar2
      0026F6 C0 03            [24] 7517 	push	ar3
      0026F8 C0 04            [24] 7518 	push	ar4
      0026FA EE               [12] 7519 	mov	a,r6
      0026FB 04               [12] 7520 	inc	a
      0026FC FF               [12] 7521 	mov	r7,a
      0026FD EE               [12] 7522 	mov	a,r6
      0026FE 24r20            [12] 7523 	add	a,#_buf
      002700 F9               [12] 7524 	mov	r1,a
      002701 8D 03            [24] 7525 	mov	ar3,r5
      002703 7C 00            [12] 7526 	mov	r4,#0x00
      002705 C0 07            [24] 7527 	push	ar7
      002707 C0 05            [24] 7528 	push	ar5
      002709 C0 02            [24] 7529 	push	ar2
      00270B C0 01            [24] 7530 	push	ar1
      00270D 74 0A            [12] 7531 	mov	a,#0x0a
      00270F C0 E0            [24] 7532 	push	acc
      002711 E4               [12] 7533 	clr	a
      002712 C0 E0            [24] 7534 	push	acc
      002714 8B 82            [24] 7535 	mov	dpl,r3
      002716 8C 83            [24] 7536 	mov	dph,r4
      002718 12r00r00         [24] 7537 	lcall	__divsint
      00271B AB 82            [24] 7538 	mov	r3,dpl
      00271D 15 81            [12] 7539 	dec	sp
      00271F 15 81            [12] 7540 	dec	sp
      002721 D0 01            [24] 7541 	pop	ar1
      002723 D0 02            [24] 7542 	pop	ar2
      002725 D0 05            [24] 7543 	pop	ar5
      002727 D0 07            [24] 7544 	pop	ar7
      002729 8B 04            [24] 7545 	mov	ar4,r3
      00272B 74 30            [12] 7546 	mov	a,#0x30
      00272D 2B               [12] 7547 	add	a,r3
      00272E F7               [12] 7548 	mov	@r1,a
                                   7549 ;	vt100.c:933: c -= d * 10;
      00272F EC               [12] 7550 	mov	a,r4
      002730 75 F0 0A         [24] 7551 	mov	b,#0x0a
      002733 A4               [48] 7552 	mul	ab
      002734 FC               [12] 7553 	mov	r4,a
      002735 8D 03            [24] 7554 	mov	ar3,r5
      002737 EB               [12] 7555 	mov	a,r3
      002738 C3               [12] 7556 	clr	c
      002739 9C               [12] 7557 	subb	a,r4
      00273A FD               [12] 7558 	mov	r5,a
                                   7559 ;	vt100.c:934: buf[b++] = c + '0';	
      00273B EF               [12] 7560 	mov	a,r7
      00273C FC               [12] 7561 	mov	r4,a
      00273D 04               [12] 7562 	inc	a
      00273E FE               [12] 7563 	mov	r6,a
      00273F EC               [12] 7564 	mov	a,r4
      002740 24r20            [12] 7565 	add	a,#_buf
      002742 F9               [12] 7566 	mov	r1,a
      002743 8D 04            [24] 7567 	mov	ar4,r5
      002745 74 30            [12] 7568 	mov	a,#0x30
      002747 2C               [12] 7569 	add	a,r4
      002748 F7               [12] 7570 	mov	@r1,a
                                   7571 ;	vt100.c:935: fmt = 0;
      002749 7F 00            [12] 7572 	mov	r7,#0x00
                                   7573 ;	vt100.c:936: continue;
      00274B D0 04            [24] 7574 	pop	ar4
      00274D D0 03            [24] 7575 	pop	ar3
      00274F D0 02            [24] 7576 	pop	ar2
      002751 02r26r7E         [24] 7577 	ljmp	00111$
                                   7578 ;	vt100.c:937: }
      002754                       7579 00107$:
                                   7580 ;	vt100.c:938: s++;
      002754 0A               [12] 7581 	inc	r2
      002755 BA 00 01         [24] 7582 	cjne	r2,#0x00,00151$
      002758 0B               [12] 7583 	inc	r3
      002759                       7584 00151$:
      002759 E5*00            [12] 7585 	mov	a,_bp
      00275B 24 FB            [12] 7586 	add	a,#0xfb
      00275D F8               [12] 7587 	mov	r0,a
      00275E A6 02            [24] 7588 	mov	@r0,ar2
      002760 08               [12] 7589 	inc	r0
      002761 A6 03            [24] 7590 	mov	@r0,ar3
      002763 08               [12] 7591 	inc	r0
      002764 A6 04            [24] 7592 	mov	@r0,ar4
      002766 02r26r7E         [24] 7593 	ljmp	00111$
      002769                       7594 00120$:
      002769 E5*00            [12] 7595 	mov	a,_bp
      00276B 24 FB            [12] 7596 	add	a,#0xfb
      00276D F8               [12] 7597 	mov	r0,a
      00276E A6 02            [24] 7598 	mov	@r0,ar2
      002770 08               [12] 7599 	inc	r0
      002771 A6 03            [24] 7600 	mov	@r0,ar3
      002773 08               [12] 7601 	inc	r0
      002774 A6 04            [24] 7602 	mov	@r0,ar4
                                   7603 ;	vt100.c:940: buf[b] = 0;
      002776 EE               [12] 7604 	mov	a,r6
      002777 24r20            [12] 7605 	add	a,#_buf
      002779 F8               [12] 7606 	mov	r0,a
      00277A 76 00            [12] 7607 	mov	@r0,#0x00
                                   7608 ;	vt100.c:942: va_end(args);
                                   7609 ;	vt100.c:943: }
      00277C 85*00 81         [24] 7610 	mov	sp,_bp
      00277F D0*00            [24] 7611 	pop	_bp
      002781 22               [24] 7612 	ret
                                   7613 ;------------------------------------------------------------
                                   7614 ;Allocation info for local variables in function 'main'
                                   7615 ;------------------------------------------------------------
                                   7616 ;c                         Allocated to registers r7 
                                   7617 ;c                         Allocated to registers r6 r7 
                                   7618 ;c                         Allocated to registers r6 r7 
                                   7619 ;text                      Allocated to stack - _bp +1
                                   7620 ;c                         Allocated to stack - _bp +10
                                   7621 ;c                         Allocated to registers r6 r7 
                                   7622 ;c                         Allocated to registers r6 r7 
                                   7623 ;c                         Allocated to registers r6 r7 
                                   7624 ;c                         Allocated to registers r6 r7 
                                   7625 ;c                         Allocated to registers r6 r7 
                                   7626 ;c                         Allocated to registers r6 r7 
                                   7627 ;------------------------------------------------------------
                                   7628 ;	vt100.c:945: void main(void) {
                                   7629 ;	-----------------------------------------
                                   7630 ;	 function main
                                   7631 ;	-----------------------------------------
      002782                       7632 _main:
      002782 C0*00            [24] 7633 	push	_bp
      002784 E5 81            [12] 7634 	mov	a,sp
      002786 F5*00            [12] 7635 	mov	_bp,a
      002788 24 0B            [12] 7636 	add	a,#0x0b
      00278A F5 81            [12] 7637 	mov	sp,a
                                   7638 ;	vt100.c:949: vga_init();
      00278C 12r00r00         [24] 7639 	lcall	_vga_init
                                   7640 ;	vt100.c:951: vt100_init(NULL);
      00278F 90 00 00         [24] 7641 	mov	dptr,#0x0000
      002792 12r26r1B         [24] 7642 	lcall	_vt100_init
                                   7643 ;	vt100.c:975: vt100_puts("\033[c\033[2J\033[m\033[r\033[?6l\033[1;1H");
      002795 90r00r74         [24] 7644 	mov	dptr,#___str_6
      002798 75 F0 80         [24] 7645 	mov	b,#0x80
      00279B 12r26r2D         [24] 7646 	lcall	_vt100_puts
                                   7647 ;	vt100.c:979: for(c = 0; c < VT100_WIDTH; c++){
      00279E 7F 00            [12] 7648 	mov	r7,#0x00
      0027A0                       7649 00118$:
                                   7650 ;	vt100.c:980: vt100_putc('*'); 
      0027A0 75 82 2A         [24] 7651 	mov	dpl,#0x2a
      0027A3 C0 07            [24] 7652 	push	ar7
      0027A5 12r26r26         [24] 7653 	lcall	_vt100_putc
      0027A8 D0 07            [24] 7654 	pop	ar7
                                   7655 ;	vt100.c:979: for(c = 0; c < VT100_WIDTH; c++){
      0027AA 0F               [12] 7656 	inc	r7
      0027AB BF 50 00         [24] 7657 	cjne	r7,#0x50,00314$
      0027AE                       7658 00314$:
      0027AE 40 F0            [24] 7659 	jc	00118$
                                   7660 ;	vt100.c:984: for(c = 0; c < VT100_HEIGHT; c++){
      0027B0 7F 00            [12] 7661 	mov	r7,#0x00
      0027B2                       7662 00120$:
                                   7663 ;	vt100.c:985: spf("\033[%d;1H*\033[%d;%dH*", c + 1, c + 1, VT100_WIDTH);
      0027B2 8F 05            [24] 7664 	mov	ar5,r7
      0027B4 7E 00            [12] 7665 	mov	r6,#0x00
      0027B6 0D               [12] 7666 	inc	r5
      0027B7 BD 00 01         [24] 7667 	cjne	r5,#0x00,00316$
      0027BA 0E               [12] 7668 	inc	r6
      0027BB                       7669 00316$:
      0027BB C0 07            [24] 7670 	push	ar7
      0027BD 74 50            [12] 7671 	mov	a,#0x50
      0027BF C0 E0            [24] 7672 	push	acc
      0027C1 E4               [12] 7673 	clr	a
      0027C2 C0 E0            [24] 7674 	push	acc
      0027C4 C0 05            [24] 7675 	push	ar5
      0027C6 C0 06            [24] 7676 	push	ar6
      0027C8 C0 05            [24] 7677 	push	ar5
      0027CA C0 06            [24] 7678 	push	ar6
      0027CC 74r8D            [12] 7679 	mov	a,#___str_7
      0027CE C0 E0            [24] 7680 	push	acc
      0027D0 74s00            [12] 7681 	mov	a,#(___str_7 >> 8)
      0027D2 C0 E0            [24] 7682 	push	acc
      0027D4 74 80            [12] 7683 	mov	a,#0x80
      0027D6 C0 E0            [24] 7684 	push	acc
      0027D8 12r26r58         [24] 7685 	lcall	_spf
      0027DB E5 81            [12] 7686 	mov	a,sp
      0027DD 24 F7            [12] 7687 	add	a,#0xf7
      0027DF F5 81            [12] 7688 	mov	sp,a
                                   7689 ;	vt100.c:986: vt100_puts(buf);
      0027E1 90r00r20         [24] 7690 	mov	dptr,#_buf
      0027E4 75 F0 40         [24] 7691 	mov	b,#0x40
      0027E7 12r26r2D         [24] 7692 	lcall	_vt100_puts
      0027EA D0 07            [24] 7693 	pop	ar7
                                   7694 ;	vt100.c:984: for(c = 0; c < VT100_HEIGHT; c++){
      0027EC 0F               [12] 7695 	inc	r7
      0027ED BF 18 00         [24] 7696 	cjne	r7,#0x18,00317$
      0027F0                       7697 00317$:
      0027F0 40 C0            [24] 7698 	jc	00120$
                                   7699 ;	vt100.c:990: spf("\033[%d;1H", VT100_HEIGHT);
      0027F2 74 18            [12] 7700 	mov	a,#0x18
      0027F4 C0 E0            [24] 7701 	push	acc
      0027F6 E4               [12] 7702 	clr	a
      0027F7 C0 E0            [24] 7703 	push	acc
      0027F9 74r9F            [12] 7704 	mov	a,#___str_8
      0027FB C0 E0            [24] 7705 	push	acc
      0027FD 74s00            [12] 7706 	mov	a,#(___str_8 >> 8)
      0027FF C0 E0            [24] 7707 	push	acc
      002801 74 80            [12] 7708 	mov	a,#0x80
      002803 C0 E0            [24] 7709 	push	acc
      002805 12r26r58         [24] 7710 	lcall	_spf
      002808 E5 81            [12] 7711 	mov	a,sp
      00280A 24 FB            [12] 7712 	add	a,#0xfb
      00280C F5 81            [12] 7713 	mov	sp,a
                                   7714 ;	vt100.c:991: vt100_puts(buf); 
      00280E 90r00r20         [24] 7715 	mov	dptr,#_buf
      002811 75 F0 40         [24] 7716 	mov	b,#0x40
      002814 12r26r2D         [24] 7717 	lcall	_vt100_puts
                                   7718 ;	vt100.c:992: for(c = 0; c < VT100_WIDTH; c++){
      002817 7F 00            [12] 7719 	mov	r7,#0x00
      002819                       7720 00122$:
                                   7721 ;	vt100.c:993: vt100_putc('*');
      002819 75 82 2A         [24] 7722 	mov	dpl,#0x2a
      00281C C0 07            [24] 7723 	push	ar7
      00281E 12r26r26         [24] 7724 	lcall	_vt100_putc
      002821 D0 07            [24] 7725 	pop	ar7
                                   7726 ;	vt100.c:992: for(c = 0; c < VT100_WIDTH; c++){
      002823 0F               [12] 7727 	inc	r7
      002824 BF 50 00         [24] 7728 	cjne	r7,#0x50,00319$
      002827                       7729 00319$:
      002827 40 F0            [24] 7730 	jc	00122$
                                   7731 ;	vt100.c:996: vt100_puts("\033[2;2H");
      002829 90r00rA7         [24] 7732 	mov	dptr,#___str_9
      00282C 75 F0 80         [24] 7733 	mov	b,#0x80
      00282F 12r26r2D         [24] 7734 	lcall	_vt100_puts
                                   7735 ;	vt100.c:998: for(c = 0; c < VT100_WIDTH - 2; c++){
      002832 7F 00            [12] 7736 	mov	r7,#0x00
      002834                       7737 00124$:
                                   7738 ;	vt100.c:999: vt100_putc('+'); 
      002834 75 82 2B         [24] 7739 	mov	dpl,#0x2b
      002837 C0 07            [24] 7740 	push	ar7
      002839 12r26r26         [24] 7741 	lcall	_vt100_putc
      00283C D0 07            [24] 7742 	pop	ar7
                                   7743 ;	vt100.c:998: for(c = 0; c < VT100_WIDTH - 2; c++){
      00283E 0F               [12] 7744 	inc	r7
      00283F BF 4E 00         [24] 7745 	cjne	r7,#0x4e,00321$
      002842                       7746 00321$:
      002842 40 F0            [24] 7747 	jc	00124$
                                   7748 ;	vt100.c:1002: for(c = 1; c < VT100_HEIGHT - 1; c++){
      002844 7F 01            [12] 7749 	mov	r7,#0x01
      002846                       7750 00126$:
                                   7751 ;	vt100.c:1003: spf("\033[%d;2H+\033[%d;%dH+", c + 1, c + 1, VT100_WIDTH - 1);
      002846 8F 05            [24] 7752 	mov	ar5,r7
      002848 7E 00            [12] 7753 	mov	r6,#0x00
      00284A 0D               [12] 7754 	inc	r5
      00284B BD 00 01         [24] 7755 	cjne	r5,#0x00,00323$
      00284E 0E               [12] 7756 	inc	r6
      00284F                       7757 00323$:
      00284F C0 07            [24] 7758 	push	ar7
      002851 74 4F            [12] 7759 	mov	a,#0x4f
      002853 C0 E0            [24] 7760 	push	acc
      002855 E4               [12] 7761 	clr	a
      002856 C0 E0            [24] 7762 	push	acc
      002858 C0 05            [24] 7763 	push	ar5
      00285A C0 06            [24] 7764 	push	ar6
      00285C C0 05            [24] 7765 	push	ar5
      00285E C0 06            [24] 7766 	push	ar6
      002860 74rAE            [12] 7767 	mov	a,#___str_10
      002862 C0 E0            [24] 7768 	push	acc
      002864 74s00            [12] 7769 	mov	a,#(___str_10 >> 8)
      002866 C0 E0            [24] 7770 	push	acc
      002868 74 80            [12] 7771 	mov	a,#0x80
      00286A C0 E0            [24] 7772 	push	acc
      00286C 12r26r58         [24] 7773 	lcall	_spf
      00286F E5 81            [12] 7774 	mov	a,sp
      002871 24 F7            [12] 7775 	add	a,#0xf7
      002873 F5 81            [12] 7776 	mov	sp,a
                                   7777 ;	vt100.c:1004: vt100_puts(buf);
      002875 90r00r20         [24] 7778 	mov	dptr,#_buf
      002878 75 F0 40         [24] 7779 	mov	b,#0x40
      00287B 12r26r2D         [24] 7780 	lcall	_vt100_puts
      00287E D0 07            [24] 7781 	pop	ar7
                                   7782 ;	vt100.c:1002: for(c = 1; c < VT100_HEIGHT - 1; c++){
      002880 0F               [12] 7783 	inc	r7
      002881 BF 17 00         [24] 7784 	cjne	r7,#0x17,00324$
      002884                       7785 00324$:
      002884 40 C0            [24] 7786 	jc	00126$
                                   7787 ;	vt100.c:1007: spf("\033[%d;2H", VT100_HEIGHT - 1);
      002886 74 17            [12] 7788 	mov	a,#0x17
      002888 C0 E0            [24] 7789 	push	acc
      00288A E4               [12] 7790 	clr	a
      00288B C0 E0            [24] 7791 	push	acc
      00288D 74rC0            [12] 7792 	mov	a,#___str_11
      00288F C0 E0            [24] 7793 	push	acc
      002891 74s00            [12] 7794 	mov	a,#(___str_11 >> 8)
      002893 C0 E0            [24] 7795 	push	acc
      002895 74 80            [12] 7796 	mov	a,#0x80
      002897 C0 E0            [24] 7797 	push	acc
      002899 12r26r58         [24] 7798 	lcall	_spf
      00289C E5 81            [12] 7799 	mov	a,sp
      00289E 24 FB            [12] 7800 	add	a,#0xfb
      0028A0 F5 81            [12] 7801 	mov	sp,a
                                   7802 ;	vt100.c:1008: vt100_puts(buf); 
      0028A2 90r00r20         [24] 7803 	mov	dptr,#_buf
      0028A5 75 F0 40         [24] 7804 	mov	b,#0x40
      0028A8 12r26r2D         [24] 7805 	lcall	_vt100_puts
                                   7806 ;	vt100.c:1009: for(c = 0; c < VT100_WIDTH - 2; c++){
      0028AB 7F 00            [12] 7807 	mov	r7,#0x00
      0028AD                       7808 00128$:
                                   7809 ;	vt100.c:1010: vt100_putc('+');
      0028AD 75 82 2B         [24] 7810 	mov	dpl,#0x2b
      0028B0 C0 07            [24] 7811 	push	ar7
      0028B2 12r26r26         [24] 7812 	lcall	_vt100_putc
      0028B5 D0 07            [24] 7813 	pop	ar7
                                   7814 ;	vt100.c:1009: for(c = 0; c < VT100_WIDTH - 2; c++){
      0028B7 0F               [12] 7815 	inc	r7
      0028B8 BF 4E 00         [24] 7816 	cjne	r7,#0x4e,00326$
      0028BB                       7817 00326$:
      0028BB 40 F0            [24] 7818 	jc	00128$
                                   7819 ;	vt100.c:1021: vt100_puts("\033[10;6H");
      0028BD 90r00rC8         [24] 7820 	mov	dptr,#___str_12
      0028C0 75 F0 80         [24] 7821 	mov	b,#0x80
      0028C3 12r26r2D         [24] 7822 	lcall	_vt100_puts
                                   7823 ;	vt100.c:1022: for(int c = 0; c < 30; c++){
      0028C6 7E 00            [12] 7824 	mov	r6,#0x00
      0028C8 7F 00            [12] 7825 	mov	r7,#0x00
      0028CA                       7826 00131$:
      0028CA C3               [12] 7827 	clr	c
      0028CB EE               [12] 7828 	mov	a,r6
      0028CC 94 1E            [12] 7829 	subb	a,#0x1e
      0028CE EF               [12] 7830 	mov	a,r7
      0028CF 64 80            [12] 7831 	xrl	a,#0x80
      0028D1 94 80            [12] 7832 	subb	a,#0x80
      0028D3 50 15            [24] 7833 	jnc	00107$
                                   7834 ;	vt100.c:1023: vt100_putc('E');
      0028D5 75 82 45         [24] 7835 	mov	dpl,#0x45
      0028D8 C0 07            [24] 7836 	push	ar7
      0028DA C0 06            [24] 7837 	push	ar6
      0028DC 12r26r26         [24] 7838 	lcall	_vt100_putc
      0028DF D0 06            [24] 7839 	pop	ar6
      0028E1 D0 07            [24] 7840 	pop	ar7
                                   7841 ;	vt100.c:1022: for(int c = 0; c < 30; c++){
      0028E3 0E               [12] 7842 	inc	r6
      0028E4 BE 00 E3         [24] 7843 	cjne	r6,#0x00,00131$
      0028E7 0F               [12] 7844 	inc	r7
      0028E8 80 E0            [24] 7845 	sjmp	00131$
      0028EA                       7846 00107$:
                                   7847 ;	vt100.c:1026: vt100_puts("\033[11;6H");
      0028EA 90r00rD0         [24] 7848 	mov	dptr,#___str_13
      0028ED 75 F0 80         [24] 7849 	mov	b,#0x80
      0028F0 12r26r2D         [24] 7850 	lcall	_vt100_puts
                                   7851 ;	vt100.c:1028: vt100_puts("\0337\033[35;10H\0338");
      0028F3 90r00rD8         [24] 7852 	mov	dptr,#___str_14
      0028F6 75 F0 80         [24] 7853 	mov	b,#0x80
      0028F9 12r26r2D         [24] 7854 	lcall	_vt100_puts
                                   7855 ;	vt100.c:1029: vt100_puts("E\033[11;35HE");
      0028FC 90r00rE5         [24] 7856 	mov	dptr,#___str_15
      0028FF 75 F0 80         [24] 7857 	mov	b,#0x80
      002902 12r26r2D         [24] 7858 	lcall	_vt100_puts
                                   7859 ;	vt100.c:1031: vt100_puts("\033[12;6HE\033[28CE");
      002905 90r00rF0         [24] 7860 	mov	dptr,#___str_16
      002908 75 F0 80         [24] 7861 	mov	b,#0x80
      00290B 12r26r2D         [24] 7862 	lcall	_vt100_puts
                                   7863 ;	vt100.c:1033: vt100_puts("\033[30D\033[BE\033[28CE");
      00290E 90r00rFF         [24] 7864 	mov	dptr,#___str_17
      002911 75 F0 80         [24] 7865 	mov	b,#0x80
      002914 12r26r2D         [24] 7866 	lcall	_vt100_puts
                                   7867 ;	vt100.c:1034: vt100_puts("\033[15;6H\033[AE\033[28CE");
      002917 90r01r0F         [24] 7868 	mov	dptr,#___str_18
      00291A 75 F0 80         [24] 7869 	mov	b,#0x80
      00291D 12r26r2D         [24] 7870 	lcall	_vt100_puts
                                   7871 ;	vt100.c:1035: vt100_puts("\033[15;6HE\033[15;35HE"); 
      002920 90r01r21         [24] 7872 	mov	dptr,#___str_19
      002923 75 F0 80         [24] 7873 	mov	b,#0x80
      002926 12r26r2D         [24] 7874 	lcall	_vt100_puts
                                   7875 ;	vt100.c:1037: vt100_puts("\033[16;6H");
      002929 90r01r33         [24] 7876 	mov	dptr,#___str_20
      00292C 75 F0 80         [24] 7877 	mov	b,#0x80
      00292F 12r26r2D         [24] 7878 	lcall	_vt100_puts
                                   7879 ;	vt100.c:1038: for(int c = 0; c < 30; c++){
      002932 7E 00            [12] 7880 	mov	r6,#0x00
      002934 7F 00            [12] 7881 	mov	r7,#0x00
      002936                       7882 00134$:
      002936 C3               [12] 7883 	clr	c
      002937 EE               [12] 7884 	mov	a,r6
      002938 94 1E            [12] 7885 	subb	a,#0x1e
      00293A EF               [12] 7886 	mov	a,r7
      00293B 64 80            [12] 7887 	xrl	a,#0x80
      00293D 94 80            [12] 7888 	subb	a,#0x80
      00293F 50 15            [24] 7889 	jnc	00108$
                                   7890 ;	vt100.c:1039: vt100_putc('E');
      002941 75 82 45         [24] 7891 	mov	dpl,#0x45
      002944 C0 07            [24] 7892 	push	ar7
      002946 C0 06            [24] 7893 	push	ar6
      002948 12r26r26         [24] 7894 	lcall	_vt100_putc
      00294B D0 06            [24] 7895 	pop	ar6
      00294D D0 07            [24] 7896 	pop	ar7
                                   7897 ;	vt100.c:1038: for(int c = 0; c < 30; c++){
      00294F 0E               [12] 7898 	inc	r6
      002950 BE 00 E3         [24] 7899 	cjne	r6,#0x00,00134$
      002953 0F               [12] 7900 	inc	r7
      002954 80 E0            [24] 7901 	sjmp	00134$
      002956                       7902 00108$:
                                   7903 ;	vt100.c:1042: const char *text[] = {"This must be an unbroken a", "rea of text with 1 free bo", "rder around the text.     "};
      002956 A9*00            [24] 7904 	mov	r1,_bp
      002958 09               [12] 7905 	inc	r1
      002959 77r23            [12] 7906 	mov	@r1,#___str_3
      00295B 09               [12] 7907 	inc	r1
      00295C 77s00            [12] 7908 	mov	@r1,#(___str_3 >> 8)
      00295E 09               [12] 7909 	inc	r1
      00295F 77 80            [12] 7910 	mov	@r1,#0x80
      002961 19               [12] 7911 	dec	r1
      002962 19               [12] 7912 	dec	r1
      002963 74 03            [12] 7913 	mov	a,#0x03
      002965 29               [12] 7914 	add	a,r1
      002966 F8               [12] 7915 	mov	r0,a
      002967 76r3E            [12] 7916 	mov	@r0,#___str_4
      002969 08               [12] 7917 	inc	r0
      00296A 76s00            [12] 7918 	mov	@r0,#(___str_4 >> 8)
      00296C 08               [12] 7919 	inc	r0
      00296D 76 80            [12] 7920 	mov	@r0,#0x80
      00296F 74 06            [12] 7921 	mov	a,#0x06
      002971 29               [12] 7922 	add	a,r1
      002972 F8               [12] 7923 	mov	r0,a
      002973 76r59            [12] 7924 	mov	@r0,#___str_5
      002975 08               [12] 7925 	inc	r0
      002976 76s00            [12] 7926 	mov	@r0,#(___str_5 >> 8)
      002978 08               [12] 7927 	inc	r0
      002979 76 80            [12] 7928 	mov	@r0,#0x80
                                   7929 ;	vt100.c:1043: for(int c = 0; c < 3; c++){
      00297B E5*00            [12] 7930 	mov	a,_bp
      00297D 24 0A            [12] 7931 	add	a,#0x0a
      00297F F8               [12] 7932 	mov	r0,a
      002980 E4               [12] 7933 	clr	a
      002981 F6               [12] 7934 	mov	@r0,a
      002982 08               [12] 7935 	inc	r0
      002983 F6               [12] 7936 	mov	@r0,a
      002984 FC               [12] 7937 	mov	r4,a
      002985 FD               [12] 7938 	mov	r5,a
      002986                       7939 00137$:
      002986 E5*00            [12] 7940 	mov	a,_bp
      002988 24 0A            [12] 7941 	add	a,#0x0a
      00298A F8               [12] 7942 	mov	r0,a
      00298B C3               [12] 7943 	clr	c
      00298C E6               [12] 7944 	mov	a,@r0
      00298D 94 03            [12] 7945 	subb	a,#0x03
      00298F 08               [12] 7946 	inc	r0
      002990 E6               [12] 7947 	mov	a,@r0
      002991 64 80            [12] 7948 	xrl	a,#0x80
      002993 94 80            [12] 7949 	subb	a,#0x80
      002995 50 76            [24] 7950 	jnc	00109$
                                   7951 ;	vt100.c:1044: spf("\033[%d;8H", c + 12);
      002997 E5*00            [12] 7952 	mov	a,_bp
      002999 24 0A            [12] 7953 	add	a,#0x0a
      00299B F8               [12] 7954 	mov	r0,a
      00299C 74 0C            [12] 7955 	mov	a,#0x0c
      00299E 26               [12] 7956 	add	a,@r0
      00299F FA               [12] 7957 	mov	r2,a
      0029A0 E4               [12] 7958 	clr	a
      0029A1 08               [12] 7959 	inc	r0
      0029A2 36               [12] 7960 	addc	a,@r0
      0029A3 FB               [12] 7961 	mov	r3,a
      0029A4 C0 05            [24] 7962 	push	ar5
      0029A6 C0 04            [24] 7963 	push	ar4
      0029A8 C0 01            [24] 7964 	push	ar1
      0029AA C0 02            [24] 7965 	push	ar2
      0029AC C0 03            [24] 7966 	push	ar3
      0029AE 74r3B            [12] 7967 	mov	a,#___str_21
      0029B0 C0 E0            [24] 7968 	push	acc
      0029B2 74s01            [12] 7969 	mov	a,#(___str_21 >> 8)
      0029B4 C0 E0            [24] 7970 	push	acc
      0029B6 74 80            [12] 7971 	mov	a,#0x80
      0029B8 C0 E0            [24] 7972 	push	acc
      0029BA 12r26r58         [24] 7973 	lcall	_spf
      0029BD E5 81            [12] 7974 	mov	a,sp
      0029BF 24 FB            [12] 7975 	add	a,#0xfb
      0029C1 F5 81            [12] 7976 	mov	sp,a
                                   7977 ;	vt100.c:1045: vt100_puts(buf);
      0029C3 90r00r20         [24] 7978 	mov	dptr,#_buf
      0029C6 75 F0 40         [24] 7979 	mov	b,#0x40
      0029C9 12r26r2D         [24] 7980 	lcall	_vt100_puts
      0029CC D0 01            [24] 7981 	pop	ar1
      0029CE D0 04            [24] 7982 	pop	ar4
      0029D0 D0 05            [24] 7983 	pop	ar5
                                   7984 ;	vt100.c:1046: vt100_puts(text[c]);
      0029D2 EC               [12] 7985 	mov	a,r4
      0029D3 29               [12] 7986 	add	a,r1
      0029D4 F8               [12] 7987 	mov	r0,a
      0029D5 C0 01            [24] 7988 	push	ar1
      0029D7 86 02            [24] 7989 	mov	ar2,@r0
      0029D9 08               [12] 7990 	inc	r0
      0029DA 86 03            [24] 7991 	mov	ar3,@r0
      0029DC 08               [12] 7992 	inc	r0
      0029DD 86 07            [24] 7993 	mov	ar7,@r0
      0029DF 18               [12] 7994 	dec	r0
      0029E0 18               [12] 7995 	dec	r0
      0029E1 8A 82            [24] 7996 	mov	dpl,r2
      0029E3 8B 83            [24] 7997 	mov	dph,r3
      0029E5 8F F0            [24] 7998 	mov	b,r7
      0029E7 C0 05            [24] 7999 	push	ar5
      0029E9 C0 04            [24] 8000 	push	ar4
      0029EB C0 01            [24] 8001 	push	ar1
      0029ED 12r26r2D         [24] 8002 	lcall	_vt100_puts
      0029F0 D0 01            [24] 8003 	pop	ar1
      0029F2 D0 04            [24] 8004 	pop	ar4
      0029F4 D0 05            [24] 8005 	pop	ar5
                                   8006 ;	vt100.c:1043: for(int c = 0; c < 3; c++){
      0029F6 74 03            [12] 8007 	mov	a,#0x03
      0029F8 2C               [12] 8008 	add	a,r4
      0029F9 FC               [12] 8009 	mov	r4,a
      0029FA E4               [12] 8010 	clr	a
      0029FB 3D               [12] 8011 	addc	a,r5
      0029FC FD               [12] 8012 	mov	r5,a
      0029FD E5*00            [12] 8013 	mov	a,_bp
      0029FF 24 0A            [12] 8014 	add	a,#0x0a
      002A01 F8               [12] 8015 	mov	r0,a
      002A02 06               [12] 8016 	inc	@r0
      002A03 B6 00 02         [24] 8017 	cjne	@r0,#0x00,00333$
      002A06 08               [12] 8018 	inc	r0
      002A07 06               [12] 8019 	inc	@r0
      002A08                       8020 00333$:
      002A08 D0 01            [24] 8021 	pop	ar1
      002A0A 02r29r86         [24] 8022 	ljmp	00137$
      002A0D                       8023 00109$:
                                   8024 ;	vt100.c:1051: vt100_puts("\033[10;40H"); 
      002A0D 90r01r43         [24] 8025 	mov	dptr,#___str_22
      002A10 75 F0 80         [24] 8026 	mov	b,#0x80
      002A13 12r26r2D         [24] 8027 	lcall	_vt100_puts
                                   8028 ;	vt100.c:1052: for(int c = 0; c < 10; c++){
      002A16 7E 00            [12] 8029 	mov	r6,#0x00
      002A18 7F 00            [12] 8030 	mov	r7,#0x00
      002A1A                       8031 00140$:
      002A1A C3               [12] 8032 	clr	c
      002A1B EE               [12] 8033 	mov	a,r6
      002A1C 94 0A            [12] 8034 	subb	a,#0x0a
      002A1E EF               [12] 8035 	mov	a,r7
      002A1F 64 80            [12] 8036 	xrl	a,#0x80
      002A21 94 80            [12] 8037 	subb	a,#0x80
      002A23 50 18            [24] 8038 	jnc	00110$
                                   8039 ;	vt100.c:1054: vt100_puts("E\033[1CF\033[3D\033[B");
      002A25 90r01r4C         [24] 8040 	mov	dptr,#___str_23
      002A28 75 F0 80         [24] 8041 	mov	b,#0x80
      002A2B C0 07            [24] 8042 	push	ar7
      002A2D C0 06            [24] 8043 	push	ar6
      002A2F 12r26r2D         [24] 8044 	lcall	_vt100_puts
      002A32 D0 06            [24] 8045 	pop	ar6
      002A34 D0 07            [24] 8046 	pop	ar7
                                   8047 ;	vt100.c:1052: for(int c = 0; c < 10; c++){
      002A36 0E               [12] 8048 	inc	r6
      002A37 BE 00 E0         [24] 8049 	cjne	r6,#0x00,00140$
      002A3A 0F               [12] 8050 	inc	r7
      002A3B 80 DD            [24] 8051 	sjmp	00140$
      002A3D                       8052 00110$:
                                   8053 ;	vt100.c:1064: vt100_puts("\033[24;1H");
      002A3D 90r01r5A         [24] 8054 	mov	dptr,#___str_24
      002A40 75 F0 80         [24] 8055 	mov	b,#0x80
      002A43 12r26r2D         [24] 8056 	lcall	_vt100_puts
                                   8057 ;	vt100.c:1065: for(int c = 0; c < 7; c++){
      002A46 7E 00            [12] 8058 	mov	r6,#0x00
      002A48 7F 00            [12] 8059 	mov	r7,#0x00
      002A4A                       8060 00143$:
      002A4A C3               [12] 8061 	clr	c
      002A4B EE               [12] 8062 	mov	a,r6
      002A4C 94 07            [12] 8063 	subb	a,#0x07
      002A4E EF               [12] 8064 	mov	a,r7
      002A4F 64 80            [12] 8065 	xrl	a,#0x80
      002A51 94 80            [12] 8066 	subb	a,#0x80
      002A53 50 18            [24] 8067 	jnc	00111$
                                   8068 ;	vt100.c:1066: vt100_puts("\033D");
      002A55 90r01r62         [24] 8069 	mov	dptr,#___str_25
      002A58 75 F0 80         [24] 8070 	mov	b,#0x80
      002A5B C0 07            [24] 8071 	push	ar7
      002A5D C0 06            [24] 8072 	push	ar6
      002A5F 12r26r2D         [24] 8073 	lcall	_vt100_puts
      002A62 D0 06            [24] 8074 	pop	ar6
      002A64 D0 07            [24] 8075 	pop	ar7
                                   8076 ;	vt100.c:1065: for(int c = 0; c < 7; c++){
      002A66 0E               [12] 8077 	inc	r6
      002A67 BE 00 E0         [24] 8078 	cjne	r6,#0x00,00143$
      002A6A 0F               [12] 8079 	inc	r7
      002A6B 80 DD            [24] 8080 	sjmp	00143$
      002A6D                       8081 00111$:
                                   8082 ;	vt100.c:1069: getchar();
      002A6D 12r01r66         [24] 8083 	lcall	_getchar
                                   8084 ;	vt100.c:1070: getchar();
      002A70 12r01r66         [24] 8085 	lcall	_getchar
                                   8086 ;	vt100.c:1075: vt100_puts("\033[1;1H");
      002A73 90r01r65         [24] 8087 	mov	dptr,#___str_26
      002A76 75 F0 80         [24] 8088 	mov	b,#0x80
      002A79 12r26r2D         [24] 8089 	lcall	_vt100_puts
                                   8090 ;	vt100.c:1076: for(int c = 0; c < 7; c++){
      002A7C 7E 00            [12] 8091 	mov	r6,#0x00
      002A7E 7F 00            [12] 8092 	mov	r7,#0x00
      002A80                       8093 00146$:
      002A80 C3               [12] 8094 	clr	c
      002A81 EE               [12] 8095 	mov	a,r6
      002A82 94 07            [12] 8096 	subb	a,#0x07
      002A84 EF               [12] 8097 	mov	a,r7
      002A85 64 80            [12] 8098 	xrl	a,#0x80
      002A87 94 80            [12] 8099 	subb	a,#0x80
      002A89 50 18            [24] 8100 	jnc	00112$
                                   8101 ;	vt100.c:1077: vt100_puts("\033M");
      002A8B 90r01r6C         [24] 8102 	mov	dptr,#___str_27
      002A8E 75 F0 80         [24] 8103 	mov	b,#0x80
      002A91 C0 07            [24] 8104 	push	ar7
      002A93 C0 06            [24] 8105 	push	ar6
      002A95 12r26r2D         [24] 8106 	lcall	_vt100_puts
      002A98 D0 06            [24] 8107 	pop	ar6
      002A9A D0 07            [24] 8108 	pop	ar7
                                   8109 ;	vt100.c:1076: for(int c = 0; c < 7; c++){
      002A9C 0E               [12] 8110 	inc	r6
      002A9D BE 00 E0         [24] 8111 	cjne	r6,#0x00,00146$
      002AA0 0F               [12] 8112 	inc	r7
      002AA1 80 DD            [24] 8113 	sjmp	00146$
      002AA3                       8114 00112$:
                                   8115 ;	vt100.c:1080: getchar();
      002AA3 12r01r66         [24] 8116 	lcall	_getchar
                                   8117 ;	vt100.c:1082: vt100_puts("\033[24;1H");
      002AA6 90r01r5A         [24] 8118 	mov	dptr,#___str_24
      002AA9 75 F0 80         [24] 8119 	mov	b,#0x80
      002AAC 12r26r2D         [24] 8120 	lcall	_vt100_puts
                                   8121 ;	vt100.c:1083: for(int c = 0; c < 7; c++){
      002AAF 7E 00            [12] 8122 	mov	r6,#0x00
      002AB1 7F 00            [12] 8123 	mov	r7,#0x00
      002AB3                       8124 00149$:
      002AB3 C3               [12] 8125 	clr	c
      002AB4 EE               [12] 8126 	mov	a,r6
      002AB5 94 07            [12] 8127 	subb	a,#0x07
      002AB7 EF               [12] 8128 	mov	a,r7
      002AB8 64 80            [12] 8129 	xrl	a,#0x80
      002ABA 94 80            [12] 8130 	subb	a,#0x80
      002ABC 50 18            [24] 8131 	jnc	00113$
                                   8132 ;	vt100.c:1084: vt100_puts("\033D");
      002ABE 90r01r62         [24] 8133 	mov	dptr,#___str_25
      002AC1 75 F0 80         [24] 8134 	mov	b,#0x80
      002AC4 C0 07            [24] 8135 	push	ar7
      002AC6 C0 06            [24] 8136 	push	ar6
      002AC8 12r26r2D         [24] 8137 	lcall	_vt100_puts
      002ACB D0 06            [24] 8138 	pop	ar6
      002ACD D0 07            [24] 8139 	pop	ar7
                                   8140 ;	vt100.c:1083: for(int c = 0; c < 7; c++){
      002ACF 0E               [12] 8141 	inc	r6
      002AD0 BE 00 E0         [24] 8142 	cjne	r6,#0x00,00149$
      002AD3 0F               [12] 8143 	inc	r7
      002AD4 80 DD            [24] 8144 	sjmp	00149$
      002AD6                       8145 00113$:
                                   8146 ;	vt100.c:1089: for(c = 1; c < VT100_WIDTH - 1; c++){
      002AD6 7F 01            [12] 8147 	mov	r7,#0x01
      002AD8                       8148 00151$:
                                   8149 ;	vt100.c:1092: spf("\033[1;%dH*\033[B\033[D+\033[A", c + 1); 
      002AD8 8F 05            [24] 8150 	mov	ar5,r7
      002ADA 7E 00            [12] 8151 	mov	r6,#0x00
      002ADC 0D               [12] 8152 	inc	r5
      002ADD BD 00 01         [24] 8153 	cjne	r5,#0x00,00342$
      002AE0 0E               [12] 8154 	inc	r6
      002AE1                       8155 00342$:
      002AE1 C0 07            [24] 8156 	push	ar7
      002AE3 C0 05            [24] 8157 	push	ar5
      002AE5 C0 06            [24] 8158 	push	ar6
      002AE7 74r6F            [12] 8159 	mov	a,#___str_28
      002AE9 C0 E0            [24] 8160 	push	acc
      002AEB 74s01            [12] 8161 	mov	a,#(___str_28 >> 8)
      002AED C0 E0            [24] 8162 	push	acc
      002AEF 74 80            [12] 8163 	mov	a,#0x80
      002AF1 C0 E0            [24] 8164 	push	acc
      002AF3 12r26r58         [24] 8165 	lcall	_spf
      002AF6 E5 81            [12] 8166 	mov	a,sp
      002AF8 24 FB            [12] 8167 	add	a,#0xfb
      002AFA F5 81            [12] 8168 	mov	sp,a
                                   8169 ;	vt100.c:1093: vt100_puts(buf);
      002AFC 90r00r20         [24] 8170 	mov	dptr,#_buf
      002AFF 75 F0 40         [24] 8171 	mov	b,#0x40
      002B02 12r26r2D         [24] 8172 	lcall	_vt100_puts
      002B05 D0 07            [24] 8173 	pop	ar7
                                   8174 ;	vt100.c:1089: for(c = 1; c < VT100_WIDTH - 1; c++){
      002B07 0F               [12] 8175 	inc	r7
      002B08 BF 4F 00         [24] 8176 	cjne	r7,#0x4f,00343$
      002B0B                       8177 00343$:
      002B0B 40 CB            [24] 8178 	jc	00151$
                                   8179 ;	vt100.c:1096: for(c = 2; c < VT100_WIDTH - 2; c++){
      002B0D 7F 02            [12] 8180 	mov	r7,#0x02
      002B0F                       8181 00153$:
                                   8182 ;	vt100.c:1098: spf("\033[32;%dH \033[B\033[D \033[A", c + 1); 
      002B0F 8F 05            [24] 8183 	mov	ar5,r7
      002B11 7E 00            [12] 8184 	mov	r6,#0x00
      002B13 0D               [12] 8185 	inc	r5
      002B14 BD 00 01         [24] 8186 	cjne	r5,#0x00,00345$
      002B17 0E               [12] 8187 	inc	r6
      002B18                       8188 00345$:
      002B18 C0 07            [24] 8189 	push	ar7
      002B1A C0 05            [24] 8190 	push	ar5
      002B1C C0 06            [24] 8191 	push	ar6
      002B1E 74r82            [12] 8192 	mov	a,#___str_29
      002B20 C0 E0            [24] 8193 	push	acc
      002B22 74s01            [12] 8194 	mov	a,#(___str_29 >> 8)
      002B24 C0 E0            [24] 8195 	push	acc
      002B26 74 80            [12] 8196 	mov	a,#0x80
      002B28 C0 E0            [24] 8197 	push	acc
      002B2A 12r26r58         [24] 8198 	lcall	_spf
      002B2D E5 81            [12] 8199 	mov	a,sp
      002B2F 24 FB            [12] 8200 	add	a,#0xfb
      002B31 F5 81            [12] 8201 	mov	sp,a
                                   8202 ;	vt100.c:1099: vt100_puts(buf);
      002B33 90r00r20         [24] 8203 	mov	dptr,#_buf
      002B36 75 F0 40         [24] 8204 	mov	b,#0x40
      002B39 12r26r2D         [24] 8205 	lcall	_vt100_puts
      002B3C D0 07            [24] 8206 	pop	ar7
                                   8207 ;	vt100.c:1096: for(c = 2; c < VT100_WIDTH - 2; c++){
      002B3E 0F               [12] 8208 	inc	r7
      002B3F BF 4E 00         [24] 8209 	cjne	r7,#0x4e,00346$
      002B42                       8210 00346$:
      002B42 40 CB            [24] 8211 	jc	00153$
                                   8212 ;	vt100.c:1103: for(int c = 1; c < VT100_HEIGHT; c++){
      002B44 7E 01            [12] 8213 	mov	r6,#0x01
      002B46 7F 00            [12] 8214 	mov	r7,#0x00
      002B48                       8215 00156$:
      002B48 C3               [12] 8216 	clr	c
      002B49 EE               [12] 8217 	mov	a,r6
      002B4A 94 18            [12] 8218 	subb	a,#0x18
      002B4C EF               [12] 8219 	mov	a,r7
      002B4D 64 80            [12] 8220 	xrl	a,#0x80
      002B4F 94 80            [12] 8221 	subb	a,#0x80
      002B51 50 42            [24] 8222 	jnc	00116$
                                   8223 ;	vt100.c:1104: spf("\033[%d;1H*+\033[%d;%dH+*", c + 1, c + 1, VT100_WIDTH - 1);
      002B53 74 01            [12] 8224 	mov	a,#0x01
      002B55 2E               [12] 8225 	add	a,r6
      002B56 FC               [12] 8226 	mov	r4,a
      002B57 E4               [12] 8227 	clr	a
      002B58 3F               [12] 8228 	addc	a,r7
      002B59 FD               [12] 8229 	mov	r5,a
      002B5A C0 05            [24] 8230 	push	ar5
      002B5C C0 04            [24] 8231 	push	ar4
      002B5E 74 4F            [12] 8232 	mov	a,#0x4f
      002B60 C0 E0            [24] 8233 	push	acc
      002B62 E4               [12] 8234 	clr	a
      002B63 C0 E0            [24] 8235 	push	acc
      002B65 C0 04            [24] 8236 	push	ar4
      002B67 C0 05            [24] 8237 	push	ar5
      002B69 C0 04            [24] 8238 	push	ar4
      002B6B C0 05            [24] 8239 	push	ar5
      002B6D 74r96            [12] 8240 	mov	a,#___str_30
      002B6F C0 E0            [24] 8241 	push	acc
      002B71 74s01            [12] 8242 	mov	a,#(___str_30 >> 8)
      002B73 C0 E0            [24] 8243 	push	acc
      002B75 74 80            [12] 8244 	mov	a,#0x80
      002B77 C0 E0            [24] 8245 	push	acc
      002B79 12r26r58         [24] 8246 	lcall	_spf
      002B7C E5 81            [12] 8247 	mov	a,sp
      002B7E 24 F7            [12] 8248 	add	a,#0xf7
      002B80 F5 81            [12] 8249 	mov	sp,a
                                   8250 ;	vt100.c:1105: vt100_puts(buf);
      002B82 90r00r20         [24] 8251 	mov	dptr,#_buf
      002B85 75 F0 40         [24] 8252 	mov	b,#0x40
      002B88 12r26r2D         [24] 8253 	lcall	_vt100_puts
      002B8B D0 04            [24] 8254 	pop	ar4
      002B8D D0 05            [24] 8255 	pop	ar5
                                   8256 ;	vt100.c:1103: for(int c = 1; c < VT100_HEIGHT; c++){
      002B8F 8C 06            [24] 8257 	mov	ar6,r4
      002B91 8D 07            [24] 8258 	mov	ar7,r5
      002B93 80 B3            [24] 8259 	sjmp	00156$
      002B95                       8260 00116$:
                                   8261 ;	vt100.c:1109: for(int c = 1; c < VT100_WIDTH - 1; c++){
      002B95 7E 01            [12] 8262 	mov	r6,#0x01
      002B97 7F 00            [12] 8263 	mov	r7,#0x00
      002B99                       8264 00159$:
      002B99 C3               [12] 8265 	clr	c
      002B9A EE               [12] 8266 	mov	a,r6
      002B9B 94 4F            [12] 8267 	subb	a,#0x4f
      002B9D EF               [12] 8268 	mov	a,r7
      002B9E 64 80            [12] 8269 	xrl	a,#0x80
      002BA0 94 80            [12] 8270 	subb	a,#0x80
      002BA2 50 37            [24] 8271 	jnc	00117$
                                   8272 ;	vt100.c:1110: spf("\033[23;%dH+\033[B\033[D*\033[A", c + 1); 
      002BA4 74 01            [12] 8273 	mov	a,#0x01
      002BA6 2E               [12] 8274 	add	a,r6
      002BA7 FC               [12] 8275 	mov	r4,a
      002BA8 E4               [12] 8276 	clr	a
      002BA9 3F               [12] 8277 	addc	a,r7
      002BAA FD               [12] 8278 	mov	r5,a
      002BAB C0 05            [24] 8279 	push	ar5
      002BAD C0 04            [24] 8280 	push	ar4
      002BAF C0 04            [24] 8281 	push	ar4
      002BB1 C0 05            [24] 8282 	push	ar5
      002BB3 74rAA            [12] 8283 	mov	a,#___str_31
      002BB5 C0 E0            [24] 8284 	push	acc
      002BB7 74s01            [12] 8285 	mov	a,#(___str_31 >> 8)
      002BB9 C0 E0            [24] 8286 	push	acc
      002BBB 74 80            [12] 8287 	mov	a,#0x80
      002BBD C0 E0            [24] 8288 	push	acc
      002BBF 12r26r58         [24] 8289 	lcall	_spf
      002BC2 E5 81            [12] 8290 	mov	a,sp
      002BC4 24 FB            [12] 8291 	add	a,#0xfb
      002BC6 F5 81            [12] 8292 	mov	sp,a
                                   8293 ;	vt100.c:1111: vt100_puts(buf);
      002BC8 90r00r20         [24] 8294 	mov	dptr,#_buf
      002BCB 75 F0 40         [24] 8295 	mov	b,#0x40
      002BCE 12r26r2D         [24] 8296 	lcall	_vt100_puts
      002BD1 D0 04            [24] 8297 	pop	ar4
      002BD3 D0 05            [24] 8298 	pop	ar5
                                   8299 ;	vt100.c:1109: for(int c = 1; c < VT100_WIDTH - 1; c++){
      002BD5 8C 06            [24] 8300 	mov	ar6,r4
      002BD7 8D 07            [24] 8301 	mov	ar7,r5
      002BD9 80 BE            [24] 8302 	sjmp	00159$
      002BDB                       8303 00117$:
                                   8304 ;	vt100.c:1114: vt100_puts("\033[13;6HShould see two columns of E F"); 
      002BDB 90r01rBE         [24] 8305 	mov	dptr,#___str_32
      002BDE 75 F0 80         [24] 8306 	mov	b,#0x80
      002BE1 12r26r2D         [24] 8307 	lcall	_vt100_puts
                                   8308 ;	vt100.c:1115: vt100_puts("\033[14;6HText box must start at line 3"); 
      002BE4 90r01rE3         [24] 8309 	mov	dptr,#___str_33
      002BE7 75 F0 80         [24] 8310 	mov	b,#0x80
      002BEA 12r26r2D         [24] 8311 	lcall	_vt100_puts
                                   8312 ;	vt100.c:1118: getchar();
      002BED 12r01r66         [24] 8313 	lcall	_getchar
                                   8314 ;	vt100.c:1141: }
      002BF0 85*00 81         [24] 8315 	mov	sp,_bp
      002BF3 D0*00            [24] 8316 	pop	_bp
      002BF5 22               [24] 8317 	ret
                                   8318 	.area CSEG    (CODE)
                                   8319 	.area CONST   (CODE)
      000000                       8320 __vt100_putc_hex_131072_135:
      000000 30 31 32 33 34 35 36  8321 	.ascii "0123456789abcdef"
             37 38 39 61 62 63 64
             65 66
      000010 00                    8322 	.db 0x00
      000011                       8323 __st_esc_sq_bracket_colors_458753_206:
      000011 00                    8324 	.db #0x00	; 0
      000012 01                    8325 	.db #0x01	; 1
      000013 02                    8326 	.db #0x02	; 2
      000014 04                    8327 	.db #0x04	; 4
      000015 03                    8328 	.db #0x03	; 3
      000016 05                    8329 	.db #0x05	; 5
      000017 06                    8330 	.db #0x06	; 6
      000018 07                    8331 	.db #0x07	; 7
                                   8332 	.area CONST   (CODE)
      000019                       8333 ___str_1:
      000019 1B                    8334 	.db 0x1b
      00001A 5B 3F 31 3B 30 63     8335 	.ascii "[?1;0c"
      000020 00                    8336 	.db 0x00
                                   8337 	.area CSEG    (CODE)
                                   8338 	.area CONST   (CODE)
      000021                       8339 ___str_2:
      000021 58                    8340 	.ascii "X"
      000022 00                    8341 	.db 0x00
                                   8342 	.area CSEG    (CODE)
                                   8343 	.area CONST   (CODE)
      000023                       8344 ___str_3:
      000023 54 68 69 73 20 6D 75  8345 	.ascii "This must be an unbroken a"
             73 74 20 62 65 20 61
             6E 20 75 6E 62 72 6F
             6B 65 6E 20 61
      00003D 00                    8346 	.db 0x00
                                   8347 	.area CSEG    (CODE)
                                   8348 	.area CONST   (CODE)
      00003E                       8349 ___str_4:
      00003E 72 65 61 20 6F 66 20  8350 	.ascii "rea of text with 1 free bo"
             74 65 78 74 20 77 69
             74 68 20 31 20 66 72
             65 65 20 62 6F
      000058 00                    8351 	.db 0x00
                                   8352 	.area CSEG    (CODE)
                                   8353 	.area CONST   (CODE)
      000059                       8354 ___str_5:
      000059 72 64 65 72 20 61 72  8355 	.ascii "rder around the text.     "
             6F 75 6E 64 20 74 68
             65 20 74 65 78 74 2E
             20 20 20 20 20
      000073 00                    8356 	.db 0x00
                                   8357 	.area CSEG    (CODE)
                                   8358 	.area CONST   (CODE)
      000074                       8359 ___str_6:
      000074 1B                    8360 	.db 0x1b
      000075 5B 63                 8361 	.ascii "[c"
      000077 1B                    8362 	.db 0x1b
      000078 5B 32 4A              8363 	.ascii "[2J"
      00007B 1B                    8364 	.db 0x1b
      00007C 5B 6D                 8365 	.ascii "[m"
      00007E 1B                    8366 	.db 0x1b
      00007F 5B 72                 8367 	.ascii "[r"
      000081 1B                    8368 	.db 0x1b
      000082 5B 3F 36 6C           8369 	.ascii "[?6l"
      000086 1B                    8370 	.db 0x1b
      000087 5B 31 3B 31 48        8371 	.ascii "[1;1H"
      00008C 00                    8372 	.db 0x00
                                   8373 	.area CSEG    (CODE)
                                   8374 	.area CONST   (CODE)
      00008D                       8375 ___str_7:
      00008D 1B                    8376 	.db 0x1b
      00008E 5B 25 64 3B 31 48 2A  8377 	.ascii "[%d;1H*"
      000095 1B                    8378 	.db 0x1b
      000096 5B 25 64 3B 25 64 48  8379 	.ascii "[%d;%dH*"
             2A
      00009E 00                    8380 	.db 0x00
                                   8381 	.area CSEG    (CODE)
                                   8382 	.area CONST   (CODE)
      00009F                       8383 ___str_8:
      00009F 1B                    8384 	.db 0x1b
      0000A0 5B 25 64 3B 31 48     8385 	.ascii "[%d;1H"
      0000A6 00                    8386 	.db 0x00
                                   8387 	.area CSEG    (CODE)
                                   8388 	.area CONST   (CODE)
      0000A7                       8389 ___str_9:
      0000A7 1B                    8390 	.db 0x1b
      0000A8 5B 32 3B 32 48        8391 	.ascii "[2;2H"
      0000AD 00                    8392 	.db 0x00
                                   8393 	.area CSEG    (CODE)
                                   8394 	.area CONST   (CODE)
      0000AE                       8395 ___str_10:
      0000AE 1B                    8396 	.db 0x1b
      0000AF 5B 25 64 3B 32 48 2B  8397 	.ascii "[%d;2H+"
      0000B6 1B                    8398 	.db 0x1b
      0000B7 5B 25 64 3B 25 64 48  8399 	.ascii "[%d;%dH+"
             2B
      0000BF 00                    8400 	.db 0x00
                                   8401 	.area CSEG    (CODE)
                                   8402 	.area CONST   (CODE)
      0000C0                       8403 ___str_11:
      0000C0 1B                    8404 	.db 0x1b
      0000C1 5B 25 64 3B 32 48     8405 	.ascii "[%d;2H"
      0000C7 00                    8406 	.db 0x00
                                   8407 	.area CSEG    (CODE)
                                   8408 	.area CONST   (CODE)
      0000C8                       8409 ___str_12:
      0000C8 1B                    8410 	.db 0x1b
      0000C9 5B 31 30 3B 36 48     8411 	.ascii "[10;6H"
      0000CF 00                    8412 	.db 0x00
                                   8413 	.area CSEG    (CODE)
                                   8414 	.area CONST   (CODE)
      0000D0                       8415 ___str_13:
      0000D0 1B                    8416 	.db 0x1b
      0000D1 5B 31 31 3B 36 48     8417 	.ascii "[11;6H"
      0000D7 00                    8418 	.db 0x00
                                   8419 	.area CSEG    (CODE)
                                   8420 	.area CONST   (CODE)
      0000D8                       8421 ___str_14:
      0000D8 1B                    8422 	.db 0x1b
      0000D9 37                    8423 	.ascii "7"
      0000DA 1B                    8424 	.db 0x1b
      0000DB 5B 33 35 3B 31 30 48  8425 	.ascii "[35;10H"
      0000E2 1B                    8426 	.db 0x1b
      0000E3 38                    8427 	.ascii "8"
      0000E4 00                    8428 	.db 0x00
                                   8429 	.area CSEG    (CODE)
                                   8430 	.area CONST   (CODE)
      0000E5                       8431 ___str_15:
      0000E5 45                    8432 	.ascii "E"
      0000E6 1B                    8433 	.db 0x1b
      0000E7 5B 31 31 3B 33 35 48  8434 	.ascii "[11;35HE"
             45
      0000EF 00                    8435 	.db 0x00
                                   8436 	.area CSEG    (CODE)
                                   8437 	.area CONST   (CODE)
      0000F0                       8438 ___str_16:
      0000F0 1B                    8439 	.db 0x1b
      0000F1 5B 31 32 3B 36 48 45  8440 	.ascii "[12;6HE"
      0000F8 1B                    8441 	.db 0x1b
      0000F9 5B 32 38 43 45        8442 	.ascii "[28CE"
      0000FE 00                    8443 	.db 0x00
                                   8444 	.area CSEG    (CODE)
                                   8445 	.area CONST   (CODE)
      0000FF                       8446 ___str_17:
      0000FF 1B                    8447 	.db 0x1b
      000100 5B 33 30 44           8448 	.ascii "[30D"
      000104 1B                    8449 	.db 0x1b
      000105 5B 42 45              8450 	.ascii "[BE"
      000108 1B                    8451 	.db 0x1b
      000109 5B 32 38 43 45        8452 	.ascii "[28CE"
      00010E 00                    8453 	.db 0x00
                                   8454 	.area CSEG    (CODE)
                                   8455 	.area CONST   (CODE)
      00010F                       8456 ___str_18:
      00010F 1B                    8457 	.db 0x1b
      000110 5B 31 35 3B 36 48     8458 	.ascii "[15;6H"
      000116 1B                    8459 	.db 0x1b
      000117 5B 41 45              8460 	.ascii "[AE"
      00011A 1B                    8461 	.db 0x1b
      00011B 5B 32 38 43 45        8462 	.ascii "[28CE"
      000120 00                    8463 	.db 0x00
                                   8464 	.area CSEG    (CODE)
                                   8465 	.area CONST   (CODE)
      000121                       8466 ___str_19:
      000121 1B                    8467 	.db 0x1b
      000122 5B 31 35 3B 36 48 45  8468 	.ascii "[15;6HE"
      000129 1B                    8469 	.db 0x1b
      00012A 5B 31 35 3B 33 35 48  8470 	.ascii "[15;35HE"
             45
      000132 00                    8471 	.db 0x00
                                   8472 	.area CSEG    (CODE)
                                   8473 	.area CONST   (CODE)
      000133                       8474 ___str_20:
      000133 1B                    8475 	.db 0x1b
      000134 5B 31 36 3B 36 48     8476 	.ascii "[16;6H"
      00013A 00                    8477 	.db 0x00
                                   8478 	.area CSEG    (CODE)
                                   8479 	.area CONST   (CODE)
      00013B                       8480 ___str_21:
      00013B 1B                    8481 	.db 0x1b
      00013C 5B 25 64 3B 38 48     8482 	.ascii "[%d;8H"
      000142 00                    8483 	.db 0x00
                                   8484 	.area CSEG    (CODE)
                                   8485 	.area CONST   (CODE)
      000143                       8486 ___str_22:
      000143 1B                    8487 	.db 0x1b
      000144 5B 31 30 3B 34 30 48  8488 	.ascii "[10;40H"
      00014B 00                    8489 	.db 0x00
                                   8490 	.area CSEG    (CODE)
                                   8491 	.area CONST   (CODE)
      00014C                       8492 ___str_23:
      00014C 45                    8493 	.ascii "E"
      00014D 1B                    8494 	.db 0x1b
      00014E 5B 31 43 46           8495 	.ascii "[1CF"
      000152 1B                    8496 	.db 0x1b
      000153 5B 33 44              8497 	.ascii "[3D"
      000156 1B                    8498 	.db 0x1b
      000157 5B 42                 8499 	.ascii "[B"
      000159 00                    8500 	.db 0x00
                                   8501 	.area CSEG    (CODE)
                                   8502 	.area CONST   (CODE)
      00015A                       8503 ___str_24:
      00015A 1B                    8504 	.db 0x1b
      00015B 5B 32 34 3B 31 48     8505 	.ascii "[24;1H"
      000161 00                    8506 	.db 0x00
                                   8507 	.area CSEG    (CODE)
                                   8508 	.area CONST   (CODE)
      000162                       8509 ___str_25:
      000162 1B                    8510 	.db 0x1b
      000163 44                    8511 	.ascii "D"
      000164 00                    8512 	.db 0x00
                                   8513 	.area CSEG    (CODE)
                                   8514 	.area CONST   (CODE)
      000165                       8515 ___str_26:
      000165 1B                    8516 	.db 0x1b
      000166 5B 31 3B 31 48        8517 	.ascii "[1;1H"
      00016B 00                    8518 	.db 0x00
                                   8519 	.area CSEG    (CODE)
                                   8520 	.area CONST   (CODE)
      00016C                       8521 ___str_27:
      00016C 1B                    8522 	.db 0x1b
      00016D 4D                    8523 	.ascii "M"
      00016E 00                    8524 	.db 0x00
                                   8525 	.area CSEG    (CODE)
                                   8526 	.area CONST   (CODE)
      00016F                       8527 ___str_28:
      00016F 1B                    8528 	.db 0x1b
      000170 5B 31 3B 25 64 48 2A  8529 	.ascii "[1;%dH*"
      000177 1B                    8530 	.db 0x1b
      000178 5B 42                 8531 	.ascii "[B"
      00017A 1B                    8532 	.db 0x1b
      00017B 5B 44 2B              8533 	.ascii "[D+"
      00017E 1B                    8534 	.db 0x1b
      00017F 5B 41                 8535 	.ascii "[A"
      000181 00                    8536 	.db 0x00
                                   8537 	.area CSEG    (CODE)
                                   8538 	.area CONST   (CODE)
      000182                       8539 ___str_29:
      000182 1B                    8540 	.db 0x1b
      000183 5B 33 32 3B 25 64 48  8541 	.ascii "[32;%dH "
             20
      00018B 1B                    8542 	.db 0x1b
      00018C 5B 42                 8543 	.ascii "[B"
      00018E 1B                    8544 	.db 0x1b
      00018F 5B 44 20              8545 	.ascii "[D "
      000192 1B                    8546 	.db 0x1b
      000193 5B 41                 8547 	.ascii "[A"
      000195 00                    8548 	.db 0x00
                                   8549 	.area CSEG    (CODE)
                                   8550 	.area CONST   (CODE)
      000196                       8551 ___str_30:
      000196 1B                    8552 	.db 0x1b
      000197 5B 25 64 3B 31 48 2A  8553 	.ascii "[%d;1H*+"
             2B
      00019F 1B                    8554 	.db 0x1b
      0001A0 5B 25 64 3B 25 64 48  8555 	.ascii "[%d;%dH+*"
             2B 2A
      0001A9 00                    8556 	.db 0x00
                                   8557 	.area CSEG    (CODE)
                                   8558 	.area CONST   (CODE)
      0001AA                       8559 ___str_31:
      0001AA 1B                    8560 	.db 0x1b
      0001AB 5B 32 33 3B 25 64 48  8561 	.ascii "[23;%dH+"
             2B
      0001B3 1B                    8562 	.db 0x1b
      0001B4 5B 42                 8563 	.ascii "[B"
      0001B6 1B                    8564 	.db 0x1b
      0001B7 5B 44 2A              8565 	.ascii "[D*"
      0001BA 1B                    8566 	.db 0x1b
      0001BB 5B 41                 8567 	.ascii "[A"
      0001BD 00                    8568 	.db 0x00
                                   8569 	.area CSEG    (CODE)
                                   8570 	.area CONST   (CODE)
      0001BE                       8571 ___str_32:
      0001BE 1B                    8572 	.db 0x1b
      0001BF 5B 31 33 3B 36 48 53  8573 	.ascii "[13;6HShould see two columns of E F"
             68 6F 75 6C 64 20 73
             65 65 20 74 77 6F 20
             63 6F 6C 75 6D 6E 73
             20 6F 66 20 45 20 46
      0001E2 00                    8574 	.db 0x00
                                   8575 	.area CSEG    (CODE)
                                   8576 	.area CONST   (CODE)
      0001E3                       8577 ___str_33:
      0001E3 1B                    8578 	.db 0x1b
      0001E4 5B 31 34 3B 36 48 54  8579 	.ascii "[14;6HText box must start at line 3"
             65 78 74 20 62 6F 78
             20 6D 75 73 74 20 73
             74 61 72 74 20 61 74
             20 6C 69 6E 65 20 33
      000207 00                    8580 	.db 0x00
                                   8581 	.area CSEG    (CODE)
                                   8582 	.area XINIT   (CODE)
                                   8583 	.area CABS    (ABS,CODE)
