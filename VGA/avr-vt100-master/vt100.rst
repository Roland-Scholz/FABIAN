                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module vt100
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _spf
                                     13 	.globl __st_escape
                                     14 	.globl __st_esc_right_br
                                     15 	.globl __st_esc_left_br
                                     16 	.globl __st_command_arg
                                     17 	.globl __vt100_putc
                                     18 	.globl __vt100_drawCursor
                                     19 	.globl __vt100_move
                                     20 	.globl _abs
                                     21 	.globl __vt100_scroll
                                     22 	.globl __vt100_clearLines
                                     23 	.globl _VT100_CURSOR_Y
                                     24 	.globl __vt100_resetScroll
                                     25 	.globl __vt100_reset
                                     26 	.globl _CY
                                     27 	.globl _AC
                                     28 	.globl _F0
                                     29 	.globl _RS1
                                     30 	.globl _RS0
                                     31 	.globl _OV
                                     32 	.globl _FL
                                     33 	.globl _P
                                     34 	.globl _TF2
                                     35 	.globl _EXF2
                                     36 	.globl _RCLK
                                     37 	.globl _TCLK
                                     38 	.globl _EXEN2
                                     39 	.globl _TR2
                                     40 	.globl _C_T2
                                     41 	.globl _CP_RL2
                                     42 	.globl _T2CON_7
                                     43 	.globl _T2CON_6
                                     44 	.globl _T2CON_5
                                     45 	.globl _T2CON_4
                                     46 	.globl _T2CON_3
                                     47 	.globl _T2CON_2
                                     48 	.globl _T2CON_1
                                     49 	.globl _T2CON_0
                                     50 	.globl _PT2
                                     51 	.globl _PS
                                     52 	.globl _PT1
                                     53 	.globl _PX1
                                     54 	.globl _PT0
                                     55 	.globl _PX0
                                     56 	.globl _RD
                                     57 	.globl _WR
                                     58 	.globl _T1
                                     59 	.globl _T0
                                     60 	.globl _INT1
                                     61 	.globl _INT0
                                     62 	.globl _TXD
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _EA
                                     73 	.globl _ET2
                                     74 	.globl _ES
                                     75 	.globl _ET1
                                     76 	.globl _EX1
                                     77 	.globl _ET0
                                     78 	.globl _EX0
                                     79 	.globl _P2_7
                                     80 	.globl _P2_6
                                     81 	.globl _P2_5
                                     82 	.globl _P2_4
                                     83 	.globl _P2_3
                                     84 	.globl _P2_2
                                     85 	.globl _P2_1
                                     86 	.globl _P2_0
                                     87 	.globl _SM0
                                     88 	.globl _SM1
                                     89 	.globl _SM2
                                     90 	.globl _REN
                                     91 	.globl _TB8
                                     92 	.globl _RB8
                                     93 	.globl _TI
                                     94 	.globl _RI
                                     95 	.globl _T2EX
                                     96 	.globl _T2
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _TF1
                                    106 	.globl _TR1
                                    107 	.globl _TF0
                                    108 	.globl _TR0
                                    109 	.globl _IE1
                                    110 	.globl _IT1
                                    111 	.globl _IE0
                                    112 	.globl _IT0
                                    113 	.globl _P0_7
                                    114 	.globl _P0_6
                                    115 	.globl _P0_5
                                    116 	.globl _P0_4
                                    117 	.globl _P0_3
                                    118 	.globl _P0_2
                                    119 	.globl _P0_1
                                    120 	.globl _P0_0
                                    121 	.globl _B
                                    122 	.globl _A
                                    123 	.globl _ACC
                                    124 	.globl _PSW
                                    125 	.globl _TH2
                                    126 	.globl _TL2
                                    127 	.globl _RCAP2H
                                    128 	.globl _RCAP2L
                                    129 	.globl _T2MOD
                                    130 	.globl _T2CON
                                    131 	.globl _IP
                                    132 	.globl _P3
                                    133 	.globl _IE
                                    134 	.globl _P2
                                    135 	.globl _SBUF
                                    136 	.globl _SCON
                                    137 	.globl _P1
                                    138 	.globl _TH1
                                    139 	.globl _TH0
                                    140 	.globl _TL1
                                    141 	.globl _TL0
                                    142 	.globl _TMOD
                                    143 	.globl _TCON
                                    144 	.globl _PCON
                                    145 	.globl _DPH
                                    146 	.globl _DPL
                                    147 	.globl _SP
                                    148 	.globl _P0
                                    149 	.globl _vga_init
                                    150 	.globl _vga_drawChar
                                    151 	.globl _vga_setBackColor
                                    152 	.globl _vga_setFrontColor
                                    153 	.globl _vga_fillRect
                                    154 	.globl _vga_setScrollStart
                                    155 	.globl _vga_setScrollMargins
                                    156 	.globl _putchar
                                    157 	.globl _getchar
                                    158 	.globl __st_esc_question
                                    159 	.globl __st_esc_sq_bracket
                                    160 	.globl __st_esc_hash
                                    161 	.globl __st_idle
                                    162 	.globl _vt100_init
                                    163 	.globl _vt100_putc
                                    164 	.globl _vt100_puts
                                    165 ;--------------------------------------------------------
                                    166 ; special function registers
                                    167 ;--------------------------------------------------------
                                    168 	.area RSEG    (ABS,DATA)
      000000                        169 	.org 0x0000
                           000080   170 _P0	=	0x0080
                           000081   171 _SP	=	0x0081
                           000082   172 _DPL	=	0x0082
                           000083   173 _DPH	=	0x0083
                           000087   174 _PCON	=	0x0087
                           000088   175 _TCON	=	0x0088
                           000089   176 _TMOD	=	0x0089
                           00008A   177 _TL0	=	0x008a
                           00008B   178 _TL1	=	0x008b
                           00008C   179 _TH0	=	0x008c
                           00008D   180 _TH1	=	0x008d
                           000090   181 _P1	=	0x0090
                           000098   182 _SCON	=	0x0098
                           000099   183 _SBUF	=	0x0099
                           0000A0   184 _P2	=	0x00a0
                           0000A8   185 _IE	=	0x00a8
                           0000B0   186 _P3	=	0x00b0
                           0000B8   187 _IP	=	0x00b8
                           0000C8   188 _T2CON	=	0x00c8
                           0000C9   189 _T2MOD	=	0x00c9
                           0000CA   190 _RCAP2L	=	0x00ca
                           0000CB   191 _RCAP2H	=	0x00cb
                           0000CC   192 _TL2	=	0x00cc
                           0000CD   193 _TH2	=	0x00cd
                           0000D0   194 _PSW	=	0x00d0
                           0000E0   195 _ACC	=	0x00e0
                           0000E0   196 _A	=	0x00e0
                           0000F0   197 _B	=	0x00f0
                                    198 ;--------------------------------------------------------
                                    199 ; special function bits
                                    200 ;--------------------------------------------------------
                                    201 	.area RSEG    (ABS,DATA)
      000000                        202 	.org 0x0000
                           000080   203 _P0_0	=	0x0080
                           000081   204 _P0_1	=	0x0081
                           000082   205 _P0_2	=	0x0082
                           000083   206 _P0_3	=	0x0083
                           000084   207 _P0_4	=	0x0084
                           000085   208 _P0_5	=	0x0085
                           000086   209 _P0_6	=	0x0086
                           000087   210 _P0_7	=	0x0087
                           000088   211 _IT0	=	0x0088
                           000089   212 _IE0	=	0x0089
                           00008A   213 _IT1	=	0x008a
                           00008B   214 _IE1	=	0x008b
                           00008C   215 _TR0	=	0x008c
                           00008D   216 _TF0	=	0x008d
                           00008E   217 _TR1	=	0x008e
                           00008F   218 _TF1	=	0x008f
                           000090   219 _P1_0	=	0x0090
                           000091   220 _P1_1	=	0x0091
                           000092   221 _P1_2	=	0x0092
                           000093   222 _P1_3	=	0x0093
                           000094   223 _P1_4	=	0x0094
                           000095   224 _P1_5	=	0x0095
                           000096   225 _P1_6	=	0x0096
                           000097   226 _P1_7	=	0x0097
                           000090   227 _T2	=	0x0090
                           000091   228 _T2EX	=	0x0091
                           000098   229 _RI	=	0x0098
                           000099   230 _TI	=	0x0099
                           00009A   231 _RB8	=	0x009a
                           00009B   232 _TB8	=	0x009b
                           00009C   233 _REN	=	0x009c
                           00009D   234 _SM2	=	0x009d
                           00009E   235 _SM1	=	0x009e
                           00009F   236 _SM0	=	0x009f
                           0000A0   237 _P2_0	=	0x00a0
                           0000A1   238 _P2_1	=	0x00a1
                           0000A2   239 _P2_2	=	0x00a2
                           0000A3   240 _P2_3	=	0x00a3
                           0000A4   241 _P2_4	=	0x00a4
                           0000A5   242 _P2_5	=	0x00a5
                           0000A6   243 _P2_6	=	0x00a6
                           0000A7   244 _P2_7	=	0x00a7
                           0000A8   245 _EX0	=	0x00a8
                           0000A9   246 _ET0	=	0x00a9
                           0000AA   247 _EX1	=	0x00aa
                           0000AB   248 _ET1	=	0x00ab
                           0000AC   249 _ES	=	0x00ac
                           0000AD   250 _ET2	=	0x00ad
                           0000AF   251 _EA	=	0x00af
                           0000B0   252 _P3_0	=	0x00b0
                           0000B1   253 _P3_1	=	0x00b1
                           0000B2   254 _P3_2	=	0x00b2
                           0000B3   255 _P3_3	=	0x00b3
                           0000B4   256 _P3_4	=	0x00b4
                           0000B5   257 _P3_5	=	0x00b5
                           0000B6   258 _P3_6	=	0x00b6
                           0000B7   259 _P3_7	=	0x00b7
                           0000B0   260 _RXD	=	0x00b0
                           0000B1   261 _TXD	=	0x00b1
                           0000B2   262 _INT0	=	0x00b2
                           0000B3   263 _INT1	=	0x00b3
                           0000B4   264 _T0	=	0x00b4
                           0000B5   265 _T1	=	0x00b5
                           0000B6   266 _WR	=	0x00b6
                           0000B7   267 _RD	=	0x00b7
                           0000B8   268 _PX0	=	0x00b8
                           0000B9   269 _PT0	=	0x00b9
                           0000BA   270 _PX1	=	0x00ba
                           0000BB   271 _PT1	=	0x00bb
                           0000BC   272 _PS	=	0x00bc
                           0000BD   273 _PT2	=	0x00bd
                           0000C8   274 _T2CON_0	=	0x00c8
                           0000C9   275 _T2CON_1	=	0x00c9
                           0000CA   276 _T2CON_2	=	0x00ca
                           0000CB   277 _T2CON_3	=	0x00cb
                           0000CC   278 _T2CON_4	=	0x00cc
                           0000CD   279 _T2CON_5	=	0x00cd
                           0000CE   280 _T2CON_6	=	0x00ce
                           0000CF   281 _T2CON_7	=	0x00cf
                           0000C8   282 _CP_RL2	=	0x00c8
                           0000C9   283 _C_T2	=	0x00c9
                           0000CA   284 _TR2	=	0x00ca
                           0000CB   285 _EXEN2	=	0x00cb
                           0000CC   286 _TCLK	=	0x00cc
                           0000CD   287 _RCLK	=	0x00cd
                           0000CE   288 _EXF2	=	0x00ce
                           0000CF   289 _TF2	=	0x00cf
                           0000D0   290 _P	=	0x00d0
                           0000D1   291 _FL	=	0x00d1
                           0000D2   292 _OV	=	0x00d2
                           0000D3   293 _RS0	=	0x00d3
                           0000D4   294 _RS1	=	0x00d4
                           0000D5   295 _F0	=	0x00d5
                           0000D6   296 _AC	=	0x00d6
                           0000D7   297 _CY	=	0x00d7
                                    298 ;--------------------------------------------------------
                                    299 ; overlayable register banks
                                    300 ;--------------------------------------------------------
                                    301 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        302 	.ds 8
                                    303 ;--------------------------------------------------------
                                    304 ; overlayable bit register bank
                                    305 ;--------------------------------------------------------
                                    306 	.area BIT_BANK	(REL,OVR,DATA)
      000020                        307 bits:
      000020                        308 	.ds 1
                           008000   309 	b0 = bits[0]
                           008100   310 	b1 = bits[1]
                           008200   311 	b2 = bits[2]
                           008300   312 	b3 = bits[3]
                           008400   313 	b4 = bits[4]
                           008500   314 	b5 = bits[5]
                           008600   315 	b6 = bits[6]
                           008700   316 	b7 = bits[7]
                                    317 ;--------------------------------------------------------
                                    318 ; internal ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area DSEG    (DATA)
      000021                        321 _vga_color:
      000021                        322 	.ds 1
      000022                        323 _scroll_start:
      000022                        324 	.ds 1
      000023                        325 _scroll_top:
      000023                        326 	.ds 1
      000024                        327 _scroll_bottom:
      000024                        328 	.ds 1
      000025                        329 _term:
      000025                        330 	.ds 28
      000041                        331 _buf:
      000041                        332 	.ds 32
                                    333 ;--------------------------------------------------------
                                    334 ; overlayable items in internal ram
                                    335 ;--------------------------------------------------------
                                    336 ;--------------------------------------------------------
                                    337 ; Stack segment in internal ram
                                    338 ;--------------------------------------------------------
                                    339 	.area SSEG
      000061                        340 __start__stack:
      000061                        341 	.ds	1
                                    342 
                                    343 ;--------------------------------------------------------
                                    344 ; indirectly addressable internal ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area ISEG    (DATA)
                                    347 ;--------------------------------------------------------
                                    348 ; absolute internal ram data
                                    349 ;--------------------------------------------------------
                                    350 	.area IABS    (ABS,DATA)
                                    351 	.area IABS    (ABS,DATA)
                                    352 ;--------------------------------------------------------
                                    353 ; bit data
                                    354 ;--------------------------------------------------------
                                    355 	.area BSEG    (BIT)
                                    356 ;--------------------------------------------------------
                                    357 ; paged external ram data
                                    358 ;--------------------------------------------------------
                                    359 	.area PSEG    (PAG,XDATA)
                                    360 ;--------------------------------------------------------
                                    361 ; uninitialized external ram data
                                    362 ;--------------------------------------------------------
                                    363 	.area XSEG    (XDATA)
                                    364 ;--------------------------------------------------------
                                    365 ; absolute external ram data
                                    366 ;--------------------------------------------------------
                                    367 	.area XABS    (ABS,XDATA)
                                    368 ;--------------------------------------------------------
                                    369 ; initialized external ram data
                                    370 ;--------------------------------------------------------
                                    371 	.area XISEG   (XDATA)
                                    372 	.area HOME    (CODE)
                                    373 	.area GSINIT0 (CODE)
                                    374 	.area GSINIT1 (CODE)
                                    375 	.area GSINIT2 (CODE)
                                    376 	.area GSINIT3 (CODE)
                                    377 	.area GSINIT4 (CODE)
                                    378 	.area GSINIT5 (CODE)
                                    379 	.area GSINIT  (CODE)
                                    380 	.area GSFINAL (CODE)
                                    381 	.area CSEG    (CODE)
                                    382 ;--------------------------------------------------------
                                    383 ; interrupt vector
                                    384 ;--------------------------------------------------------
                                    385 	.area HOME    (CODE)
      002000                        386 __interrupt_vect:
      002000 02 20 06         [24]  387 	ljmp	__sdcc_gsinit_startup
                                    388 ;--------------------------------------------------------
                                    389 ; global & static initialisations
                                    390 ;--------------------------------------------------------
                                    391 	.area HOME    (CODE)
                                    392 	.area GSINIT  (CODE)
                                    393 	.area GSFINAL (CODE)
                                    394 	.area GSINIT  (CODE)
                                    395 	.globl __sdcc_gsinit_startup
                                    396 	.globl __sdcc_program_startup
                                    397 	.globl __start__stack
                                    398 	.globl __mcs51_genXINIT
                                    399 	.globl __mcs51_genXRAMCLEAR
                                    400 	.globl __mcs51_genRAMCLEAR
                                    401 	.area GSFINAL (CODE)
      00205F 02 20 03         [24]  402 	ljmp	__sdcc_program_startup
                                    403 ;--------------------------------------------------------
                                    404 ; Home
                                    405 ;--------------------------------------------------------
                                    406 	.area HOME    (CODE)
                                    407 	.area HOME    (CODE)
      002003                        408 __sdcc_program_startup:
      002003 02 47 E4         [24]  409 	ljmp	_main
                                    410 ;	return from main will return to caller
                                    411 ;--------------------------------------------------------
                                    412 ; code
                                    413 ;--------------------------------------------------------
                                    414 	.area CSEG    (CODE)
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'vga_init'
                                    417 ;------------------------------------------------------------
                                    418 ;	vga.h:37: void vga_init(void) {
                                    419 ;	-----------------------------------------
                                    420 ;	 function vga_init
                                    421 ;	-----------------------------------------
      002062                        422 _vga_init:
                           000007   423 	ar7 = 0x07
                           000006   424 	ar6 = 0x06
                           000005   425 	ar5 = 0x05
                           000004   426 	ar4 = 0x04
                           000003   427 	ar3 = 0x03
                           000002   428 	ar2 = 0x02
                           000001   429 	ar1 = 0x01
                           000000   430 	ar0 = 0x00
                                    431 ;	vga.h:39: }
      002062 22               [24]  432 	ret
                                    433 ;------------------------------------------------------------
                                    434 ;Allocation info for local variables in function 'vga_drawChar'
                                    435 ;------------------------------------------------------------
                                    436 ;y                         Allocated to stack - _bp -3
                                    437 ;c                         Allocated to stack - _bp -4
                                    438 ;x                         Allocated to registers r7 
                                    439 ;mem                       Allocated to registers r7 r6 r5 
                                    440 ;------------------------------------------------------------
                                    441 ;	vga.h:42: void vga_drawChar(uint8_t x, uint8_t y, uint8_t c) {
                                    442 ;	-----------------------------------------
                                    443 ;	 function vga_drawChar
                                    444 ;	-----------------------------------------
      002063                        445 _vga_drawChar:
      002063 C0 08            [24]  446 	push	_bp
      002065 85 81 08         [24]  447 	mov	_bp,sp
      002068 AF 82            [24]  448 	mov	r7,dpl
                                    449 ;	vga.h:46: mem += (x + y * VGA_WIDTH) << 1;
      00206A 7E 00            [12]  450 	mov	r6,#0x00
      00206C E5 08            [12]  451 	mov	a,_bp
      00206E 24 FD            [12]  452 	add	a,#0xfd
      002070 F8               [12]  453 	mov	r0,a
      002071 86 04            [24]  454 	mov	ar4,@r0
      002073 7D 00            [12]  455 	mov	r5,#0x00
      002075 C0 07            [24]  456 	push	ar7
      002077 C0 06            [24]  457 	push	ar6
      002079 C0 04            [24]  458 	push	ar4
      00207B C0 05            [24]  459 	push	ar5
      00207D 90 00 50         [24]  460 	mov	dptr,#0x0050
      002080 12 4C 73         [24]  461 	lcall	__mulint
      002083 AC 82            [24]  462 	mov	r4,dpl
      002085 AD 83            [24]  463 	mov	r5,dph
      002087 15 81            [12]  464 	dec	sp
      002089 15 81            [12]  465 	dec	sp
      00208B D0 06            [24]  466 	pop	ar6
      00208D D0 07            [24]  467 	pop	ar7
      00208F EC               [12]  468 	mov	a,r4
      002090 2F               [12]  469 	add	a,r7
      002091 FF               [12]  470 	mov	r7,a
      002092 ED               [12]  471 	mov	a,r5
      002093 3E               [12]  472 	addc	a,r6
      002094 FE               [12]  473 	mov	r6,a
      002095 EF               [12]  474 	mov	a,r7
      002096 2F               [12]  475 	add	a,r7
      002097 FF               [12]  476 	mov	r7,a
      002098 EE               [12]  477 	mov	a,r6
      002099 33               [12]  478 	rlc	a
      00209A 24 80            [12]  479 	add	a,#0x80
      00209C FE               [12]  480 	mov	r6,a
      00209D 7D 00            [12]  481 	mov	r5,#0x00
                                    482 ;	vga.h:48: *(mem) = c;
      00209F 8F 82            [24]  483 	mov	dpl,r7
      0020A1 8E 83            [24]  484 	mov	dph,r6
      0020A3 8D F0            [24]  485 	mov	b,r5
      0020A5 E5 08            [12]  486 	mov	a,_bp
      0020A7 24 FC            [12]  487 	add	a,#0xfc
      0020A9 F8               [12]  488 	mov	r0,a
      0020AA E6               [12]  489 	mov	a,@r0
      0020AB 12 4C 58         [24]  490 	lcall	__gptrput
                                    491 ;	vga.h:49: mem++;
      0020AE 0F               [12]  492 	inc	r7
      0020AF BF 00 01         [24]  493 	cjne	r7,#0x00,00103$
      0020B2 0E               [12]  494 	inc	r6
      0020B3                        495 00103$:
                                    496 ;	vga.h:50: *(mem) = vga_color;
      0020B3 8F 82            [24]  497 	mov	dpl,r7
      0020B5 8E 83            [24]  498 	mov	dph,r6
      0020B7 8D F0            [24]  499 	mov	b,r5
      0020B9 E5 21            [12]  500 	mov	a,_vga_color
      0020BB 12 4C 58         [24]  501 	lcall	__gptrput
                                    502 ;	vga.h:51: }
      0020BE D0 08            [24]  503 	pop	_bp
      0020C0 22               [24]  504 	ret
                                    505 ;------------------------------------------------------------
                                    506 ;Allocation info for local variables in function 'vga_setBackColor'
                                    507 ;------------------------------------------------------------
                                    508 ;col                       Allocated to registers r7 
                                    509 ;------------------------------------------------------------
                                    510 ;	vga.h:53: void vga_setBackColor(uint8_t col) {
                                    511 ;	-----------------------------------------
                                    512 ;	 function vga_setBackColor
                                    513 ;	-----------------------------------------
      0020C1                        514 _vga_setBackColor:
      0020C1 AF 82            [24]  515 	mov	r7,dpl
                                    516 ;	vga.h:56: vga_color &= 0xf0;
      0020C3 53 21 F0         [24]  517 	anl	_vga_color,#0xf0
                                    518 ;	vga.h:57: vga_color |= (col & 0x0f);
      0020C6 53 07 0F         [24]  519 	anl	ar7,#0x0f
      0020C9 EF               [12]  520 	mov	a,r7
      0020CA 42 21            [12]  521 	orl	_vga_color,a
                                    522 ;	vga.h:59: }
      0020CC 22               [24]  523 	ret
                                    524 ;------------------------------------------------------------
                                    525 ;Allocation info for local variables in function 'vga_setFrontColor'
                                    526 ;------------------------------------------------------------
                                    527 ;col                       Allocated to registers r7 
                                    528 ;------------------------------------------------------------
                                    529 ;	vga.h:61: void vga_setFrontColor(uint8_t col) {
                                    530 ;	-----------------------------------------
                                    531 ;	 function vga_setFrontColor
                                    532 ;	-----------------------------------------
      0020CD                        533 _vga_setFrontColor:
      0020CD AF 82            [24]  534 	mov	r7,dpl
                                    535 ;	vga.h:63: vga_color &= 0x0f;
      0020CF 53 21 0F         [24]  536 	anl	_vga_color,#0x0f
                                    537 ;	vga.h:64: vga_color |= (col & 0xf0);
      0020D2 53 07 F0         [24]  538 	anl	ar7,#0xf0
      0020D5 EF               [12]  539 	mov	a,r7
      0020D6 42 21            [12]  540 	orl	_vga_color,a
                                    541 ;	vga.h:65: }
      0020D8 22               [24]  542 	ret
                                    543 ;------------------------------------------------------------
                                    544 ;Allocation info for local variables in function 'vga_fillRect'
                                    545 ;------------------------------------------------------------
                                    546 ;y                         Allocated to stack - _bp -3
                                    547 ;w                         Allocated to stack - _bp -4
                                    548 ;h                         Allocated to stack - _bp -5
                                    549 ;color                     Allocated to stack - _bp -6
                                    550 ;x                         Allocated to stack - _bp +1
                                    551 ;i                         Allocated to registers r6 
                                    552 ;j                         Allocated to registers r3 
                                    553 ;c                         Allocated to registers 
                                    554 ;i0                        Allocated to registers r5 
                                    555 ;j0                        Allocated to registers r4 
                                    556 ;mem                       Allocated to registers r2 r5 r7 
                                    557 ;sloc0                     Allocated to stack - _bp +2
                                    558 ;------------------------------------------------------------
                                    559 ;	vga.h:67: void vga_fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,
                                    560 ;	-----------------------------------------
                                    561 ;	 function vga_fillRect
                                    562 ;	-----------------------------------------
      0020D9                        563 _vga_fillRect:
      0020D9 C0 08            [24]  564 	push	_bp
      0020DB 85 81 08         [24]  565 	mov	_bp,sp
      0020DE C0 82            [24]  566 	push	dpl
      0020E0 05 81            [12]  567 	inc	sp
      0020E2 05 81            [12]  568 	inc	sp
      0020E4 05 81            [12]  569 	inc	sp
                                    570 ;	vga.h:77: for (i = y, i0 = y + h; i < i0; i++) {
      0020E6 E5 08            [12]  571 	mov	a,_bp
      0020E8 24 FD            [12]  572 	add	a,#0xfd
      0020EA F8               [12]  573 	mov	r0,a
      0020EB 86 06            [24]  574 	mov	ar6,@r0
      0020ED E5 08            [12]  575 	mov	a,_bp
      0020EF 24 FB            [12]  576 	add	a,#0xfb
      0020F1 F8               [12]  577 	mov	r0,a
      0020F2 E6               [12]  578 	mov	a,@r0
      0020F3 2E               [12]  579 	add	a,r6
      0020F4 FD               [12]  580 	mov	r5,a
      0020F5 A8 08            [24]  581 	mov	r0,_bp
      0020F7 08               [12]  582 	inc	r0
      0020F8 E5 08            [12]  583 	mov	a,_bp
      0020FA 24 FC            [12]  584 	add	a,#0xfc
      0020FC F9               [12]  585 	mov	r1,a
      0020FD E7               [12]  586 	mov	a,@r1
      0020FE 26               [12]  587 	add	a,@r0
      0020FF FC               [12]  588 	mov	r4,a
      002100                        589 00107$:
      002100 C3               [12]  590 	clr	c
      002101 EE               [12]  591 	mov	a,r6
      002102 9D               [12]  592 	subb	a,r5
      002103 40 03            [24]  593 	jc	00133$
      002105 02 21 89         [24]  594 	ljmp	00109$
      002108                        595 00133$:
                                    596 ;	vga.h:78: mem = 0x8000 + ((i * VGA_WIDTH) << 1);
      002108 8E 02            [24]  597 	mov	ar2,r6
      00210A 7B 00            [12]  598 	mov	r3,#0x00
      00210C C0 06            [24]  599 	push	ar6
      00210E C0 05            [24]  600 	push	ar5
      002110 C0 04            [24]  601 	push	ar4
      002112 C0 02            [24]  602 	push	ar2
      002114 C0 03            [24]  603 	push	ar3
      002116 90 00 50         [24]  604 	mov	dptr,#0x0050
      002119 12 4C 73         [24]  605 	lcall	__mulint
      00211C AA 82            [24]  606 	mov	r2,dpl
      00211E AB 83            [24]  607 	mov	r3,dph
      002120 15 81            [12]  608 	dec	sp
      002122 15 81            [12]  609 	dec	sp
      002124 D0 04            [24]  610 	pop	ar4
      002126 D0 05            [24]  611 	pop	ar5
      002128 D0 06            [24]  612 	pop	ar6
      00212A EA               [12]  613 	mov	a,r2
      00212B 2A               [12]  614 	add	a,r2
      00212C FA               [12]  615 	mov	r2,a
      00212D EB               [12]  616 	mov	a,r3
      00212E 33               [12]  617 	rlc	a
      00212F 24 80            [12]  618 	add	a,#0x80
      002131 FB               [12]  619 	mov	r3,a
      002132 A8 08            [24]  620 	mov	r0,_bp
      002134 08               [12]  621 	inc	r0
      002135 08               [12]  622 	inc	r0
      002136 A6 02            [24]  623 	mov	@r0,ar2
      002138 08               [12]  624 	inc	r0
      002139 A6 03            [24]  625 	mov	@r0,ar3
      00213B 08               [12]  626 	inc	r0
      00213C 76 00            [12]  627 	mov	@r0,#0x00
                                    628 ;	vga.h:79: for (j = x, j0 = x + w; j < j0; j++) {
      00213E A8 08            [24]  629 	mov	r0,_bp
      002140 08               [12]  630 	inc	r0
      002141 86 03            [24]  631 	mov	ar3,@r0
      002143                        632 00104$:
      002143 C3               [12]  633 	clr	c
      002144 EB               [12]  634 	mov	a,r3
      002145 9C               [12]  635 	subb	a,r4
      002146 50 3D            [24]  636 	jnc	00108$
                                    637 ;	vga.h:80: *mem = 1;
      002148 C0 05            [24]  638 	push	ar5
      00214A A8 08            [24]  639 	mov	r0,_bp
      00214C 08               [12]  640 	inc	r0
      00214D 08               [12]  641 	inc	r0
      00214E 86 82            [24]  642 	mov	dpl,@r0
      002150 08               [12]  643 	inc	r0
      002151 86 83            [24]  644 	mov	dph,@r0
      002153 08               [12]  645 	inc	r0
      002154 86 F0            [24]  646 	mov	b,@r0
      002156 74 01            [12]  647 	mov	a,#0x01
      002158 12 4C 58         [24]  648 	lcall	__gptrput
                                    649 ;	vga.h:81: mem++;
      00215B A8 08            [24]  650 	mov	r0,_bp
      00215D 08               [12]  651 	inc	r0
      00215E 08               [12]  652 	inc	r0
      00215F 26               [12]  653 	add	a,@r0
      002160 FA               [12]  654 	mov	r2,a
      002161 E4               [12]  655 	clr	a
      002162 08               [12]  656 	inc	r0
      002163 36               [12]  657 	addc	a,@r0
      002164 FD               [12]  658 	mov	r5,a
      002165 08               [12]  659 	inc	r0
      002166 86 07            [24]  660 	mov	ar7,@r0
                                    661 ;	vga.h:82: *mem = 1;
      002168 8A 82            [24]  662 	mov	dpl,r2
      00216A 8D 83            [24]  663 	mov	dph,r5
      00216C 8F F0            [24]  664 	mov	b,r7
      00216E 74 01            [12]  665 	mov	a,#0x01
      002170 12 4C 58         [24]  666 	lcall	__gptrput
                                    667 ;	vga.h:83: mem++;
      002173 A8 08            [24]  668 	mov	r0,_bp
      002175 08               [12]  669 	inc	r0
      002176 08               [12]  670 	inc	r0
      002177 2A               [12]  671 	add	a,r2
      002178 F6               [12]  672 	mov	@r0,a
      002179 E4               [12]  673 	clr	a
      00217A 3D               [12]  674 	addc	a,r5
      00217B 08               [12]  675 	inc	r0
      00217C F6               [12]  676 	mov	@r0,a
      00217D 08               [12]  677 	inc	r0
      00217E A6 07            [24]  678 	mov	@r0,ar7
                                    679 ;	vga.h:79: for (j = x, j0 = x + w; j < j0; j++) {
      002180 0B               [12]  680 	inc	r3
      002181 D0 05            [24]  681 	pop	ar5
      002183 80 BE            [24]  682 	sjmp	00104$
      002185                        683 00108$:
                                    684 ;	vga.h:77: for (i = y, i0 = y + h; i < i0; i++) {
      002185 0E               [12]  685 	inc	r6
      002186 02 21 00         [24]  686 	ljmp	00107$
      002189                        687 00109$:
                                    688 ;	vga.h:87: }
      002189 85 08 81         [24]  689 	mov	sp,_bp
      00218C D0 08            [24]  690 	pop	_bp
      00218E 22               [24]  691 	ret
                                    692 ;------------------------------------------------------------
                                    693 ;Allocation info for local variables in function 'vga_setScrollStart'
                                    694 ;------------------------------------------------------------
                                    695 ;start                     Allocated to registers 
                                    696 ;------------------------------------------------------------
                                    697 ;	vga.h:89: void vga_setScrollStart(uint8_t start) {
                                    698 ;	-----------------------------------------
                                    699 ;	 function vga_setScrollStart
                                    700 ;	-----------------------------------------
      00218F                        701 _vga_setScrollStart:
      00218F 85 82 22         [24]  702 	mov	_scroll_start,dpl
                                    703 ;	vga.h:91: scroll_start = start;
                                    704 ;	vga.h:92: }
      002192 22               [24]  705 	ret
                                    706 ;------------------------------------------------------------
                                    707 ;Allocation info for local variables in function 'vga_setScrollMargins'
                                    708 ;------------------------------------------------------------
                                    709 ;bottom                    Allocated to stack - _bp -3
                                    710 ;top                       Allocated to registers 
                                    711 ;------------------------------------------------------------
                                    712 ;	vga.h:94: void vga_setScrollMargins(uint8_t top, uint8_t bottom) {
                                    713 ;	-----------------------------------------
                                    714 ;	 function vga_setScrollMargins
                                    715 ;	-----------------------------------------
      002193                        716 _vga_setScrollMargins:
      002193 C0 08            [24]  717 	push	_bp
      002195 85 81 08         [24]  718 	mov	_bp,sp
      002198 85 82 23         [24]  719 	mov	_scroll_top,dpl
                                    720 ;	vga.h:97: scroll_bottom = bottom;
      00219B E5 08            [12]  721 	mov	a,_bp
      00219D 24 FD            [12]  722 	add	a,#0xfd
      00219F F8               [12]  723 	mov	r0,a
      0021A0 86 24            [24]  724 	mov	_scroll_bottom,@r0
                                    725 ;	vga.h:98: }
      0021A2 D0 08            [24]  726 	pop	_bp
      0021A4 22               [24]  727 	ret
                                    728 ;------------------------------------------------------------
                                    729 ;Allocation info for local variables in function 'putchar'
                                    730 ;------------------------------------------------------------
                                    731 ;c                         Allocated to registers r6 r7 
                                    732 ;------------------------------------------------------------
                                    733 ;	vt100.c:10: int putchar (int c) {
                                    734 ;	-----------------------------------------
                                    735 ;	 function putchar
                                    736 ;	-----------------------------------------
      0021A5                        737 _putchar:
      0021A5 AE 82            [24]  738 	mov	r6,dpl
      0021A7 AF 83            [24]  739 	mov	r7,dph
                                    740 ;	vt100.c:12: while (!TI) /* assumes UART is initialized */
      0021A9                        741 00101$:
                                    742 ;	vt100.c:14: TI = 0;
                                    743 ;	assignBit
      0021A9 10 99 02         [24]  744 	jbc	_TI,00120$
      0021AC 80 FB            [24]  745 	sjmp	00101$
      0021AE                        746 00120$:
                                    747 ;	vt100.c:15: SBUF = c;
      0021AE 8E 05            [24]  748 	mov	ar5,r6
      0021B0 8D 99            [24]  749 	mov	_SBUF,r5
                                    750 ;	vt100.c:17: if ((char)c == '\n') putchar('\r');
      0021B2 BD 0A 0E         [24]  751 	cjne	r5,#0x0a,00105$
      0021B5 90 00 0D         [24]  752 	mov	dptr,#0x000d
      0021B8 C0 07            [24]  753 	push	ar7
      0021BA C0 06            [24]  754 	push	ar6
      0021BC 12 21 A5         [24]  755 	lcall	_putchar
      0021BF D0 06            [24]  756 	pop	ar6
      0021C1 D0 07            [24]  757 	pop	ar7
      0021C3                        758 00105$:
                                    759 ;	vt100.c:18: return c;
      0021C3 8E 82            [24]  760 	mov	dpl,r6
      0021C5 8F 83            [24]  761 	mov	dph,r7
                                    762 ;	vt100.c:19: }
      0021C7 22               [24]  763 	ret
                                    764 ;------------------------------------------------------------
                                    765 ;Allocation info for local variables in function 'getchar'
                                    766 ;------------------------------------------------------------
                                    767 ;	vt100.c:21: int getchar(void) {
                                    768 ;	-----------------------------------------
                                    769 ;	 function getchar
                                    770 ;	-----------------------------------------
      0021C8                        771 _getchar:
                                    772 ;	vt100.c:22: while (!RI)
      0021C8                        773 00101$:
                                    774 ;	vt100.c:24: RI=0;
                                    775 ;	assignBit
      0021C8 10 98 02         [24]  776 	jbc	_RI,00114$
      0021CB 80 FB            [24]  777 	sjmp	00101$
      0021CD                        778 00114$:
                                    779 ;	vt100.c:26: return SBUF;
      0021CD AE 99            [24]  780 	mov	r6,_SBUF
      0021CF 7F 00            [12]  781 	mov	r7,#0x00
      0021D1 8E 82            [24]  782 	mov	dpl,r6
      0021D3 8F 83            [24]  783 	mov	dph,r7
                                    784 ;	vt100.c:28: }
      0021D5 22               [24]  785 	ret
                                    786 ;------------------------------------------------------------
                                    787 ;Allocation info for local variables in function '_vt100_reset'
                                    788 ;------------------------------------------------------------
                                    789 ;	vt100.c:86: void _vt100_reset(void){
                                    790 ;	-----------------------------------------
                                    791 ;	 function _vt100_reset
                                    792 ;	-----------------------------------------
      0021D6                        793 __vt100_reset:
                                    794 ;	vt100.c:89: term.char_height = 1;
      0021D6 75 2D 01         [24]  795 	mov	(_term + 0x0008),#0x01
                                    796 ;	vt100.c:90: term.char_width = 1;
      0021D9 75 2C 01         [24]  797 	mov	(_term + 0x0007),#0x01
                                    798 ;	vt100.c:91: term.back_color = 0x00;
      0021DC 75 2E 00         [24]  799 	mov	(_term + 0x0009),#0x00
                                    800 ;	vt100.c:92: term.front_color = 0xff;
      0021DF 75 2F FF         [24]  801 	mov	(_term + 0x000a),#0xff
                                    802 ;	vt100.c:93: term.cursor_x = term.cursor_y = term.saved_cursor_x = term.saved_cursor_y = 0;
      0021E2 75 29 00         [24]  803 	mov	(_term + 0x0004),#0x00
      0021E5 75 28 00         [24]  804 	mov	(_term + 0x0003),#0x00
      0021E8 75 27 00         [24]  805 	mov	(_term + 0x0002),#0x00
      0021EB 75 26 00         [24]  806 	mov	(_term + 0x0001),#0x00
                                    807 ;	vt100.c:94: term.narg = 0;
      0021EE 75 31 00         [24]  808 	mov	(_term + 0x000c),#0x00
                                    809 ;	vt100.c:95: term.state = _st_idle;
      0021F1 75 3B 85         [24]  810 	mov	((_term + 0x0016) + 0),#__st_idle
      0021F4 75 3C 44         [24]  811 	mov	((_term + 0x0016) + 1),#(__st_idle >> 8)
                                    812 ;	vt100.c:96: term.ret_state = 0;
      0021F7 E4               [12]  813 	clr	a
      0021F8 F5 3F            [12]  814 	mov	((_term + 0x001a) + 0),a
      0021FA F5 40            [12]  815 	mov	((_term + 0x001a) + 1),a
                                    816 ;	vt100.c:97: term.scroll_value = 0; 
      0021FC F5 30            [12]  817 	mov	(_term + 0x000b),a
                                    818 ;	vt100.c:98: term.scroll_start_row = 0;
      0021FE F5 2A            [12]  819 	mov	(_term + 0x0005),a
                                    820 ;	vt100.c:99: term.scroll_end_row = VT100_HEIGHT; // outside of screen = whole screen scrollable
      002200 75 2B 18         [24]  821 	mov	(_term + 0x0006),#0x18
                                    822 ;	vt100.c:100: term.flags.cursor_wrap = 0;
                                    823 ;	vt100.c:101: term.flags.origin_mode = 0; 
      002203 78 25            [12]  824 	mov	r0,#_term
      002205 E6               [12]  825 	mov	a,@r0
      002206 54 FA            [12]  826 	anl	a,#0xfe&0xfb
      002208 F6               [12]  827 	mov	@r0,a
                                    828 ;	vt100.c:102: vga_setFrontColor(term.front_color);
      002209 85 2F 82         [24]  829 	mov	dpl,(_term + 0x000a)
      00220C 12 20 CD         [24]  830 	lcall	_vga_setFrontColor
                                    831 ;	vt100.c:103: vga_setBackColor(term.back_color);
      00220F 85 2E 82         [24]  832 	mov	dpl,(_term + 0x0009)
      002212 12 20 C1         [24]  833 	lcall	_vga_setBackColor
                                    834 ;	vt100.c:104: vga_setScrollMargins(0, 0); 
      002215 E4               [12]  835 	clr	a
      002216 C0 E0            [24]  836 	push	acc
      002218 75 82 00         [24]  837 	mov	dpl,#0x00
      00221B 12 21 93         [24]  838 	lcall	_vga_setScrollMargins
      00221E 15 81            [12]  839 	dec	sp
                                    840 ;	vt100.c:105: vga_setScrollStart(0); 
      002220 75 82 00         [24]  841 	mov	dpl,#0x00
                                    842 ;	vt100.c:106: }
      002223 02 21 8F         [24]  843 	ljmp	_vga_setScrollStart
                                    844 ;------------------------------------------------------------
                                    845 ;Allocation info for local variables in function '_vt100_resetScroll'
                                    846 ;------------------------------------------------------------
                                    847 ;	vt100.c:108: void _vt100_resetScroll(void){
                                    848 ;	-----------------------------------------
                                    849 ;	 function _vt100_resetScroll
                                    850 ;	-----------------------------------------
      002226                        851 __vt100_resetScroll:
                                    852 ;	vt100.c:109: term.scroll_start_row = 0;
      002226 75 2A 00         [24]  853 	mov	(_term + 0x0005),#0x00
                                    854 ;	vt100.c:110: term.scroll_end_row = VT100_HEIGHT;
      002229 75 2B 18         [24]  855 	mov	(_term + 0x0006),#0x18
                                    856 ;	vt100.c:111: term.scroll_value = 0; 
                                    857 ;	vt100.c:112: vga_setScrollMargins(0, 0);
      00222C E4               [12]  858 	clr	a
      00222D F5 30            [12]  859 	mov	(_term + 0x000b),a
      00222F C0 E0            [24]  860 	push	acc
      002231 75 82 00         [24]  861 	mov	dpl,#0x00
      002234 12 21 93         [24]  862 	lcall	_vga_setScrollMargins
      002237 15 81            [12]  863 	dec	sp
                                    864 ;	vt100.c:113: vga_setScrollStart(0); 
      002239 75 82 00         [24]  865 	mov	dpl,#0x00
                                    866 ;	vt100.c:114: }
      00223C 02 21 8F         [24]  867 	ljmp	_vga_setScrollStart
                                    868 ;------------------------------------------------------------
                                    869 ;Allocation info for local variables in function 'VT100_CURSOR_Y'
                                    870 ;------------------------------------------------------------
                                    871 ;t                         Allocated to stack - _bp +1
                                    872 ;scroll_height             Allocated to stack - _bp +6
                                    873 ;row                       Allocated to registers r2 r4 
                                    874 ;sloc0                     Allocated to stack - _bp +4
                                    875 ;------------------------------------------------------------
                                    876 ;	vt100.c:118: uint16_t VT100_CURSOR_Y(struct vt100 *t){
                                    877 ;	-----------------------------------------
                                    878 ;	 function VT100_CURSOR_Y
                                    879 ;	-----------------------------------------
      00223F                        880 _VT100_CURSOR_Y:
      00223F C0 08            [24]  881 	push	_bp
      002241 85 81 08         [24]  882 	mov	_bp,sp
      002244 C0 82            [24]  883 	push	dpl
      002246 C0 83            [24]  884 	push	dph
      002248 C0 F0            [24]  885 	push	b
      00224A E5 81            [12]  886 	mov	a,sp
      00224C 24 04            [12]  887 	add	a,#0x04
      00224E F5 81            [12]  888 	mov	sp,a
                                    889 ;	vt100.c:120: if(t->cursor_y < t->scroll_start_row || t->cursor_y >= t->scroll_end_row){
      002250 A8 08            [24]  890 	mov	r0,_bp
      002252 08               [12]  891 	inc	r0
      002253 74 02            [12]  892 	mov	a,#0x02
      002255 26               [12]  893 	add	a,@r0
      002256 FA               [12]  894 	mov	r2,a
      002257 E4               [12]  895 	clr	a
      002258 08               [12]  896 	inc	r0
      002259 36               [12]  897 	addc	a,@r0
      00225A FB               [12]  898 	mov	r3,a
      00225B 08               [12]  899 	inc	r0
      00225C 86 04            [24]  900 	mov	ar4,@r0
      00225E 8A 82            [24]  901 	mov	dpl,r2
      002260 8B 83            [24]  902 	mov	dph,r3
      002262 8C F0            [24]  903 	mov	b,r4
      002264 12 4C 95         [24]  904 	lcall	__gptrget
      002267 FC               [12]  905 	mov	r4,a
      002268 A8 08            [24]  906 	mov	r0,_bp
      00226A 08               [12]  907 	inc	r0
      00226B 74 05            [12]  908 	mov	a,#0x05
      00226D 26               [12]  909 	add	a,@r0
      00226E FA               [12]  910 	mov	r2,a
      00226F E4               [12]  911 	clr	a
      002270 08               [12]  912 	inc	r0
      002271 36               [12]  913 	addc	a,@r0
      002272 FB               [12]  914 	mov	r3,a
      002273 08               [12]  915 	inc	r0
      002274 86 07            [24]  916 	mov	ar7,@r0
      002276 8A 82            [24]  917 	mov	dpl,r2
      002278 8B 83            [24]  918 	mov	dph,r3
      00227A 8F F0            [24]  919 	mov	b,r7
      00227C 12 4C 95         [24]  920 	lcall	__gptrget
      00227F FF               [12]  921 	mov	r7,a
      002280 C3               [12]  922 	clr	c
      002281 EC               [12]  923 	mov	a,r4
      002282 64 80            [12]  924 	xrl	a,#0x80
      002284 8F F0            [24]  925 	mov	b,r7
      002286 63 F0 80         [24]  926 	xrl	b,#0x80
      002289 95 F0            [12]  927 	subb	a,b
      00228B 40 25            [24]  928 	jc	00103$
      00228D A8 08            [24]  929 	mov	r0,_bp
      00228F 08               [12]  930 	inc	r0
      002290 74 06            [12]  931 	mov	a,#0x06
      002292 26               [12]  932 	add	a,@r0
      002293 FB               [12]  933 	mov	r3,a
      002294 E4               [12]  934 	clr	a
      002295 08               [12]  935 	inc	r0
      002296 36               [12]  936 	addc	a,@r0
      002297 FD               [12]  937 	mov	r5,a
      002298 08               [12]  938 	inc	r0
      002299 86 06            [24]  939 	mov	ar6,@r0
      00229B 8B 82            [24]  940 	mov	dpl,r3
      00229D 8D 83            [24]  941 	mov	dph,r5
      00229F 8E F0            [24]  942 	mov	b,r6
      0022A1 12 4C 95         [24]  943 	lcall	__gptrget
      0022A4 FE               [12]  944 	mov	r6,a
      0022A5 C3               [12]  945 	clr	c
      0022A6 EC               [12]  946 	mov	a,r4
      0022A7 64 80            [12]  947 	xrl	a,#0x80
      0022A9 8E F0            [24]  948 	mov	b,r6
      0022AB 63 F0 80         [24]  949 	xrl	b,#0x80
      0022AE 95 F0            [12]  950 	subb	a,b
      0022B0 40 0C            [24]  951 	jc	00104$
      0022B2                        952 00103$:
                                    953 ;	vt100.c:121: return t->cursor_y * VT100_CHAR_HEIGHT; 
      0022B2 EC               [12]  954 	mov	a,r4
      0022B3 FB               [12]  955 	mov	r3,a
      0022B4 33               [12]  956 	rlc	a
      0022B5 95 E0            [12]  957 	subb	a,acc
      0022B7 FD               [12]  958 	mov	r5,a
      0022B8 8B 82            [24]  959 	mov	dpl,r3
      0022BA 8D 83            [24]  960 	mov	dph,r5
      0022BC 80 74            [24]  961 	sjmp	00107$
      0022BE                        962 00104$:
                                    963 ;	vt100.c:124: uint16_t scroll_height = t->scroll_end_row - t->scroll_start_row;
      0022BE EE               [12]  964 	mov	a,r6
      0022BF 33               [12]  965 	rlc	a
      0022C0 95 E0            [12]  966 	subb	a,acc
      0022C2 FD               [12]  967 	mov	r5,a
      0022C3 EF               [12]  968 	mov	a,r7
      0022C4 33               [12]  969 	rlc	a
      0022C5 95 E0            [12]  970 	subb	a,acc
      0022C7 FB               [12]  971 	mov	r3,a
      0022C8 EE               [12]  972 	mov	a,r6
      0022C9 C3               [12]  973 	clr	c
      0022CA 9F               [12]  974 	subb	a,r7
      0022CB FF               [12]  975 	mov	r7,a
      0022CC ED               [12]  976 	mov	a,r5
      0022CD 9B               [12]  977 	subb	a,r3
      0022CE FB               [12]  978 	mov	r3,a
      0022CF E5 08            [12]  979 	mov	a,_bp
      0022D1 24 06            [12]  980 	add	a,#0x06
      0022D3 F8               [12]  981 	mov	r0,a
      0022D4 A6 07            [24]  982 	mov	@r0,ar7
      0022D6 08               [12]  983 	inc	r0
      0022D7 A6 03            [24]  984 	mov	@r0,ar3
                                    985 ;	vt100.c:125: uint16_t row = t->cursor_y + t->scroll_value; 
      0022D9 E5 08            [12]  986 	mov	a,_bp
      0022DB 24 04            [12]  987 	add	a,#0x04
      0022DD F8               [12]  988 	mov	r0,a
      0022DE A6 04            [24]  989 	mov	@r0,ar4
      0022E0 EC               [12]  990 	mov	a,r4
      0022E1 33               [12]  991 	rlc	a
      0022E2 95 E0            [12]  992 	subb	a,acc
      0022E4 08               [12]  993 	inc	r0
      0022E5 F6               [12]  994 	mov	@r0,a
      0022E6 A8 08            [24]  995 	mov	r0,_bp
      0022E8 08               [12]  996 	inc	r0
      0022E9 74 0B            [12]  997 	mov	a,#0x0b
      0022EB 26               [12]  998 	add	a,@r0
      0022EC FB               [12]  999 	mov	r3,a
      0022ED E4               [12] 1000 	clr	a
      0022EE 08               [12] 1001 	inc	r0
      0022EF 36               [12] 1002 	addc	a,@r0
      0022F0 FC               [12] 1003 	mov	r4,a
      0022F1 08               [12] 1004 	inc	r0
      0022F2 86 07            [24] 1005 	mov	ar7,@r0
      0022F4 8B 82            [24] 1006 	mov	dpl,r3
      0022F6 8C 83            [24] 1007 	mov	dph,r4
      0022F8 8F F0            [24] 1008 	mov	b,r7
      0022FA 12 4C 95         [24] 1009 	lcall	__gptrget
      0022FD FB               [12] 1010 	mov	r3,a
      0022FE 33               [12] 1011 	rlc	a
      0022FF 95 E0            [12] 1012 	subb	a,acc
      002301 FF               [12] 1013 	mov	r7,a
      002302 E5 08            [12] 1014 	mov	a,_bp
      002304 24 04            [12] 1015 	add	a,#0x04
      002306 F8               [12] 1016 	mov	r0,a
      002307 EB               [12] 1017 	mov	a,r3
      002308 26               [12] 1018 	add	a,@r0
      002309 FB               [12] 1019 	mov	r3,a
      00230A EF               [12] 1020 	mov	a,r7
      00230B 08               [12] 1021 	inc	r0
      00230C 36               [12] 1022 	addc	a,@r0
      00230D FF               [12] 1023 	mov	r7,a
      00230E 8B 02            [24] 1024 	mov	ar2,r3
      002310 8F 04            [24] 1025 	mov	ar4,r7
                                   1026 ;	vt100.c:126: if(t->cursor_y + t->scroll_value >= t->scroll_end_row)
      002312 C3               [12] 1027 	clr	c
      002313 EB               [12] 1028 	mov	a,r3
      002314 9E               [12] 1029 	subb	a,r6
      002315 EF               [12] 1030 	mov	a,r7
      002316 64 80            [12] 1031 	xrl	a,#0x80
      002318 8D F0            [24] 1032 	mov	b,r5
      00231A 63 F0 80         [24] 1033 	xrl	b,#0x80
      00231D 95 F0            [12] 1034 	subb	a,b
      00231F 40 0D            [24] 1035 	jc	00102$
                                   1036 ;	vt100.c:127: row -= scroll_height; 
      002321 E5 08            [12] 1037 	mov	a,_bp
      002323 24 06            [12] 1038 	add	a,#0x06
      002325 F8               [12] 1039 	mov	r0,a
      002326 EA               [12] 1040 	mov	a,r2
      002327 C3               [12] 1041 	clr	c
      002328 96               [12] 1042 	subb	a,@r0
      002329 FA               [12] 1043 	mov	r2,a
      00232A EC               [12] 1044 	mov	a,r4
      00232B 08               [12] 1045 	inc	r0
      00232C 96               [12] 1046 	subb	a,@r0
      00232D FC               [12] 1047 	mov	r4,a
      00232E                       1048 00102$:
                                   1049 ;	vt100.c:136: return row * VT100_CHAR_HEIGHT; 
      00232E 8A 82            [24] 1050 	mov	dpl,r2
      002330 8C 83            [24] 1051 	mov	dph,r4
      002332                       1052 00107$:
                                   1053 ;	vt100.c:155: }
      002332 85 08 81         [24] 1054 	mov	sp,_bp
      002335 D0 08            [24] 1055 	pop	_bp
      002337 22               [24] 1056 	ret
                                   1057 ;------------------------------------------------------------
                                   1058 ;Allocation info for local variables in function '_vt100_clearLines'
                                   1059 ;------------------------------------------------------------
                                   1060 ;start_line                Allocated to stack - _bp -4
                                   1061 ;end_line                  Allocated to stack - _bp -6
                                   1062 ;t                         Allocated to stack - _bp +1
                                   1063 ;c                         Allocated to registers 
                                   1064 ;cy                        Allocated to registers 
                                   1065 ;sloc0                     Allocated to stack - _bp +4
                                   1066 ;------------------------------------------------------------
                                   1067 ;	vt100.c:157: void _vt100_clearLines(struct vt100 *t, uint16_t start_line, uint16_t end_line){
                                   1068 ;	-----------------------------------------
                                   1069 ;	 function _vt100_clearLines
                                   1070 ;	-----------------------------------------
      002338                       1071 __vt100_clearLines:
      002338 C0 08            [24] 1072 	push	_bp
      00233A 85 81 08         [24] 1073 	mov	_bp,sp
      00233D C0 82            [24] 1074 	push	dpl
      00233F C0 83            [24] 1075 	push	dph
      002341 C0 F0            [24] 1076 	push	b
      002343 05 81            [12] 1077 	inc	sp
                                   1078 ;	vt100.c:158: for(int c = start_line; c <= end_line; c++){
      002345 E5 08            [12] 1079 	mov	a,_bp
      002347 24 FC            [12] 1080 	add	a,#0xfc
      002349 F8               [12] 1081 	mov	r0,a
      00234A 86 03            [24] 1082 	mov	ar3,@r0
      00234C 08               [12] 1083 	inc	r0
      00234D 86 04            [24] 1084 	mov	ar4,@r0
      00234F                       1085 00103$:
      00234F 8B 02            [24] 1086 	mov	ar2,r3
      002351 8C 07            [24] 1087 	mov	ar7,r4
      002353 E5 08            [12] 1088 	mov	a,_bp
      002355 24 FA            [12] 1089 	add	a,#0xfa
      002357 F8               [12] 1090 	mov	r0,a
      002358 C3               [12] 1091 	clr	c
      002359 E6               [12] 1092 	mov	a,@r0
      00235A 9A               [12] 1093 	subb	a,r2
      00235B 08               [12] 1094 	inc	r0
      00235C E6               [12] 1095 	mov	a,@r0
      00235D 9F               [12] 1096 	subb	a,r7
      00235E 50 03            [24] 1097 	jnc	00116$
      002360 02 23 E1         [24] 1098 	ljmp	00105$
      002363                       1099 00116$:
                                   1100 ;	vt100.c:159: uint16_t cy = t->cursor_y;
      002363 A8 08            [24] 1101 	mov	r0,_bp
      002365 08               [12] 1102 	inc	r0
      002366 74 02            [12] 1103 	mov	a,#0x02
      002368 26               [12] 1104 	add	a,@r0
      002369 FA               [12] 1105 	mov	r2,a
      00236A E4               [12] 1106 	clr	a
      00236B 08               [12] 1107 	inc	r0
      00236C 36               [12] 1108 	addc	a,@r0
      00236D FE               [12] 1109 	mov	r6,a
      00236E 08               [12] 1110 	inc	r0
      00236F 86 07            [24] 1111 	mov	ar7,@r0
      002371 8A 82            [24] 1112 	mov	dpl,r2
      002373 8E 83            [24] 1113 	mov	dph,r6
      002375 8F F0            [24] 1114 	mov	b,r7
      002377 E5 08            [12] 1115 	mov	a,_bp
      002379 24 04            [12] 1116 	add	a,#0x04
      00237B F8               [12] 1117 	mov	r0,a
      00237C 12 4C 95         [24] 1118 	lcall	__gptrget
      00237F F6               [12] 1119 	mov	@r0,a
                                   1120 ;	vt100.c:160: t->cursor_y = c; 
      002380 8B 05            [24] 1121 	mov	ar5,r3
      002382 8A 82            [24] 1122 	mov	dpl,r2
      002384 8E 83            [24] 1123 	mov	dph,r6
      002386 8F F0            [24] 1124 	mov	b,r7
      002388 ED               [12] 1125 	mov	a,r5
      002389 12 4C 58         [24] 1126 	lcall	__gptrput
                                   1127 ;	vt100.c:161: vga_fillRect(0, VT100_CURSOR_Y(t), VT100_SCREEN_WIDTH, VT100_CHAR_HEIGHT, 0x0000);
      00238C A8 08            [24] 1128 	mov	r0,_bp
      00238E 08               [12] 1129 	inc	r0
      00238F 86 82            [24] 1130 	mov	dpl,@r0
      002391 08               [12] 1131 	inc	r0
      002392 86 83            [24] 1132 	mov	dph,@r0
      002394 08               [12] 1133 	inc	r0
      002395 86 F0            [24] 1134 	mov	b,@r0
      002397 C0 04            [24] 1135 	push	ar4
      002399 C0 03            [24] 1136 	push	ar3
      00239B 12 22 3F         [24] 1137 	lcall	_VT100_CURSOR_Y
      00239E AE 82            [24] 1138 	mov	r6,dpl
      0023A0 E4               [12] 1139 	clr	a
      0023A1 C0 E0            [24] 1140 	push	acc
      0023A3 04               [12] 1141 	inc	a
      0023A4 C0 E0            [24] 1142 	push	acc
      0023A6 74 50            [12] 1143 	mov	a,#0x50
      0023A8 C0 E0            [24] 1144 	push	acc
      0023AA C0 06            [24] 1145 	push	ar6
      0023AC 75 82 00         [24] 1146 	mov	dpl,#0x00
      0023AF 12 20 D9         [24] 1147 	lcall	_vga_fillRect
      0023B2 E5 81            [12] 1148 	mov	a,sp
      0023B4 24 FC            [12] 1149 	add	a,#0xfc
      0023B6 F5 81            [12] 1150 	mov	sp,a
      0023B8 D0 03            [24] 1151 	pop	ar3
      0023BA D0 04            [24] 1152 	pop	ar4
                                   1153 ;	vt100.c:162: t->cursor_y = cy;
      0023BC A8 08            [24] 1154 	mov	r0,_bp
      0023BE 08               [12] 1155 	inc	r0
      0023BF 74 02            [12] 1156 	mov	a,#0x02
      0023C1 26               [12] 1157 	add	a,@r0
      0023C2 FD               [12] 1158 	mov	r5,a
      0023C3 E4               [12] 1159 	clr	a
      0023C4 08               [12] 1160 	inc	r0
      0023C5 36               [12] 1161 	addc	a,@r0
      0023C6 FE               [12] 1162 	mov	r6,a
      0023C7 08               [12] 1163 	inc	r0
      0023C8 86 07            [24] 1164 	mov	ar7,@r0
      0023CA 8D 82            [24] 1165 	mov	dpl,r5
      0023CC 8E 83            [24] 1166 	mov	dph,r6
      0023CE 8F F0            [24] 1167 	mov	b,r7
      0023D0 E5 08            [12] 1168 	mov	a,_bp
      0023D2 24 04            [12] 1169 	add	a,#0x04
      0023D4 F8               [12] 1170 	mov	r0,a
      0023D5 E6               [12] 1171 	mov	a,@r0
      0023D6 12 4C 58         [24] 1172 	lcall	__gptrput
                                   1173 ;	vt100.c:158: for(int c = start_line; c <= end_line; c++){
      0023D9 0B               [12] 1174 	inc	r3
      0023DA BB 00 01         [24] 1175 	cjne	r3,#0x00,00117$
      0023DD 0C               [12] 1176 	inc	r4
      0023DE                       1177 00117$:
      0023DE 02 23 4F         [24] 1178 	ljmp	00103$
      0023E1                       1179 00105$:
                                   1180 ;	vt100.c:167: }
      0023E1 85 08 81         [24] 1181 	mov	sp,_bp
      0023E4 D0 08            [24] 1182 	pop	_bp
      0023E6 22               [24] 1183 	ret
                                   1184 ;------------------------------------------------------------
                                   1185 ;Allocation info for local variables in function '_vt100_scroll'
                                   1186 ;------------------------------------------------------------
                                   1187 ;lines                     Allocated to stack - _bp -4
                                   1188 ;t                         Allocated to stack - _bp +1
                                   1189 ;scroll_height             Allocated to stack - _bp +7
                                   1190 ;scroll_start              Allocated to registers r5 r7 
                                   1191 ;sloc0                     Allocated to stack - _bp +8
                                   1192 ;sloc1                     Allocated to stack - _bp +4
                                   1193 ;------------------------------------------------------------
                                   1194 ;	vt100.c:170: void _vt100_scroll(struct vt100 *t, int16_t lines){
                                   1195 ;	-----------------------------------------
                                   1196 ;	 function _vt100_scroll
                                   1197 ;	-----------------------------------------
      0023E7                       1198 __vt100_scroll:
      0023E7 C0 08            [24] 1199 	push	_bp
      0023E9 85 81 08         [24] 1200 	mov	_bp,sp
      0023EC C0 82            [24] 1201 	push	dpl
      0023EE C0 83            [24] 1202 	push	dph
      0023F0 C0 F0            [24] 1203 	push	b
      0023F2 E5 81            [12] 1204 	mov	a,sp
      0023F4 24 05            [12] 1205 	add	a,#0x05
      0023F6 F5 81            [12] 1206 	mov	sp,a
                                   1207 ;	vt100.c:172: if(!lines) return;
      0023F8 E5 08            [12] 1208 	mov	a,_bp
      0023FA 24 FC            [12] 1209 	add	a,#0xfc
      0023FC F8               [12] 1210 	mov	r0,a
      0023FD E6               [12] 1211 	mov	a,@r0
      0023FE 08               [12] 1212 	inc	r0
      0023FF 46               [12] 1213 	orl	a,@r0
      002400 70 03            [24] 1214 	jnz	00102$
      002402 02 25 EA         [24] 1215 	ljmp	00108$
      002405                       1216 00102$:
                                   1217 ;	vt100.c:175: uint16_t scroll_height = t->scroll_end_row - t->scroll_start_row;
      002405 A8 08            [24] 1218 	mov	r0,_bp
      002407 08               [12] 1219 	inc	r0
      002408 74 06            [12] 1220 	mov	a,#0x06
      00240A 26               [12] 1221 	add	a,@r0
      00240B FA               [12] 1222 	mov	r2,a
      00240C E4               [12] 1223 	clr	a
      00240D 08               [12] 1224 	inc	r0
      00240E 36               [12] 1225 	addc	a,@r0
      00240F FB               [12] 1226 	mov	r3,a
      002410 08               [12] 1227 	inc	r0
      002411 86 04            [24] 1228 	mov	ar4,@r0
      002413 8A 82            [24] 1229 	mov	dpl,r2
      002415 8B 83            [24] 1230 	mov	dph,r3
      002417 8C F0            [24] 1231 	mov	b,r4
      002419 12 4C 95         [24] 1232 	lcall	__gptrget
      00241C FA               [12] 1233 	mov	r2,a
      00241D 33               [12] 1234 	rlc	a
      00241E 95 E0            [12] 1235 	subb	a,acc
      002420 FC               [12] 1236 	mov	r4,a
      002421 A8 08            [24] 1237 	mov	r0,_bp
      002423 08               [12] 1238 	inc	r0
      002424 74 05            [12] 1239 	mov	a,#0x05
      002426 26               [12] 1240 	add	a,@r0
      002427 FB               [12] 1241 	mov	r3,a
      002428 E4               [12] 1242 	clr	a
      002429 08               [12] 1243 	inc	r0
      00242A 36               [12] 1244 	addc	a,@r0
      00242B FE               [12] 1245 	mov	r6,a
      00242C 08               [12] 1246 	inc	r0
      00242D 86 07            [24] 1247 	mov	ar7,@r0
      00242F 8B 82            [24] 1248 	mov	dpl,r3
      002431 8E 83            [24] 1249 	mov	dph,r6
      002433 8F F0            [24] 1250 	mov	b,r7
      002435 12 4C 95         [24] 1251 	lcall	__gptrget
      002438 FF               [12] 1252 	mov	r7,a
      002439 FD               [12] 1253 	mov	r5,a
      00243A 33               [12] 1254 	rlc	a
      00243B 95 E0            [12] 1255 	subb	a,acc
      00243D FE               [12] 1256 	mov	r6,a
      00243E E5 08            [12] 1257 	mov	a,_bp
      002440 24 07            [12] 1258 	add	a,#0x07
      002442 F8               [12] 1259 	mov	r0,a
      002443 EA               [12] 1260 	mov	a,r2
      002444 C3               [12] 1261 	clr	c
      002445 9D               [12] 1262 	subb	a,r5
      002446 F6               [12] 1263 	mov	@r0,a
      002447 EC               [12] 1264 	mov	a,r4
      002448 9E               [12] 1265 	subb	a,r6
      002449 08               [12] 1266 	inc	r0
      00244A F6               [12] 1267 	mov	@r0,a
      00244B E5 08            [12] 1268 	mov	a,_bp
      00244D 24 07            [12] 1269 	add	a,#0x07
                                   1270 ;	vt100.c:181: if(lines > 0){
      00244F E5 08            [12] 1271 	mov	a,_bp
      002451 24 FC            [12] 1272 	add	a,#0xfc
      002453 F8               [12] 1273 	mov	r0,a
      002454 C3               [12] 1274 	clr	c
      002455 E4               [12] 1275 	clr	a
      002456 96               [12] 1276 	subb	a,@r0
      002457 74 80            [12] 1277 	mov	a,#(0x00 ^ 0x80)
      002459 08               [12] 1278 	inc	r0
      00245A 86 F0            [24] 1279 	mov	b,@r0
      00245C 63 F0 80         [24] 1280 	xrl	b,#0x80
      00245F 95 F0            [12] 1281 	subb	a,b
      002461 40 03            [24] 1282 	jc	00123$
      002463 02 24 F5         [24] 1283 	ljmp	00106$
      002466                       1284 00123$:
                                   1285 ;	vt100.c:182: _vt100_clearLines(t, t->scroll_start_row, t->scroll_start_row+lines-1); 
      002466 E5 08            [12] 1286 	mov	a,_bp
      002468 24 FC            [12] 1287 	add	a,#0xfc
      00246A F8               [12] 1288 	mov	r0,a
      00246B E6               [12] 1289 	mov	a,@r0
      00246C 2D               [12] 1290 	add	a,r5
      00246D FD               [12] 1291 	mov	r5,a
      00246E 08               [12] 1292 	inc	r0
      00246F E6               [12] 1293 	mov	a,@r0
      002470 3E               [12] 1294 	addc	a,r6
      002471 FE               [12] 1295 	mov	r6,a
      002472 1D               [12] 1296 	dec	r5
      002473 BD FF 01         [24] 1297 	cjne	r5,#0xff,00124$
      002476 1E               [12] 1298 	dec	r6
      002477                       1299 00124$:
      002477 EF               [12] 1300 	mov	a,r7
      002478 FB               [12] 1301 	mov	r3,a
      002479 33               [12] 1302 	rlc	a
      00247A 95 E0            [12] 1303 	subb	a,acc
      00247C FF               [12] 1304 	mov	r7,a
      00247D C0 05            [24] 1305 	push	ar5
      00247F C0 06            [24] 1306 	push	ar6
      002481 C0 03            [24] 1307 	push	ar3
      002483 C0 07            [24] 1308 	push	ar7
      002485 A8 08            [24] 1309 	mov	r0,_bp
      002487 08               [12] 1310 	inc	r0
      002488 86 82            [24] 1311 	mov	dpl,@r0
      00248A 08               [12] 1312 	inc	r0
      00248B 86 83            [24] 1313 	mov	dph,@r0
      00248D 08               [12] 1314 	inc	r0
      00248E 86 F0            [24] 1315 	mov	b,@r0
      002490 12 23 38         [24] 1316 	lcall	__vt100_clearLines
      002493 E5 81            [12] 1317 	mov	a,sp
      002495 24 FC            [12] 1318 	add	a,#0xfc
      002497 F5 81            [12] 1319 	mov	sp,a
                                   1320 ;	vt100.c:184: t->scroll_value = (t->scroll_value + lines) % scroll_height;
      002499 A8 08            [24] 1321 	mov	r0,_bp
      00249B 08               [12] 1322 	inc	r0
      00249C 74 0B            [12] 1323 	mov	a,#0x0b
      00249E 26               [12] 1324 	add	a,@r0
      00249F FD               [12] 1325 	mov	r5,a
      0024A0 E4               [12] 1326 	clr	a
      0024A1 08               [12] 1327 	inc	r0
      0024A2 36               [12] 1328 	addc	a,@r0
      0024A3 FC               [12] 1329 	mov	r4,a
      0024A4 08               [12] 1330 	inc	r0
      0024A5 86 02            [24] 1331 	mov	ar2,@r0
      0024A7 8D 82            [24] 1332 	mov	dpl,r5
      0024A9 8C 83            [24] 1333 	mov	dph,r4
      0024AB 8A F0            [24] 1334 	mov	b,r2
      0024AD 12 4C 95         [24] 1335 	lcall	__gptrget
      0024B0 FB               [12] 1336 	mov	r3,a
      0024B1 33               [12] 1337 	rlc	a
      0024B2 95 E0            [12] 1338 	subb	a,acc
      0024B4 FF               [12] 1339 	mov	r7,a
      0024B5 E5 08            [12] 1340 	mov	a,_bp
      0024B7 24 FC            [12] 1341 	add	a,#0xfc
      0024B9 F8               [12] 1342 	mov	r0,a
      0024BA E6               [12] 1343 	mov	a,@r0
      0024BB 2B               [12] 1344 	add	a,r3
      0024BC FB               [12] 1345 	mov	r3,a
      0024BD 08               [12] 1346 	inc	r0
      0024BE E6               [12] 1347 	mov	a,@r0
      0024BF 3F               [12] 1348 	addc	a,r7
      0024C0 FF               [12] 1349 	mov	r7,a
      0024C1 C0 05            [24] 1350 	push	ar5
      0024C3 C0 04            [24] 1351 	push	ar4
      0024C5 C0 02            [24] 1352 	push	ar2
      0024C7 E5 08            [12] 1353 	mov	a,_bp
      0024C9 24 07            [12] 1354 	add	a,#0x07
      0024CB F8               [12] 1355 	mov	r0,a
      0024CC E6               [12] 1356 	mov	a,@r0
      0024CD C0 E0            [24] 1357 	push	acc
      0024CF 08               [12] 1358 	inc	r0
      0024D0 E6               [12] 1359 	mov	a,@r0
      0024D1 C0 E0            [24] 1360 	push	acc
      0024D3 8B 82            [24] 1361 	mov	dpl,r3
      0024D5 8F 83            [24] 1362 	mov	dph,r7
      0024D7 12 4C EE         [24] 1363 	lcall	__moduint
      0024DA AE 82            [24] 1364 	mov	r6,dpl
      0024DC AF 83            [24] 1365 	mov	r7,dph
      0024DE 15 81            [12] 1366 	dec	sp
      0024E0 15 81            [12] 1367 	dec	sp
      0024E2 D0 02            [24] 1368 	pop	ar2
      0024E4 D0 04            [24] 1369 	pop	ar4
      0024E6 D0 05            [24] 1370 	pop	ar5
      0024E8 8D 82            [24] 1371 	mov	dpl,r5
      0024EA 8C 83            [24] 1372 	mov	dph,r4
      0024EC 8A F0            [24] 1373 	mov	b,r2
      0024EE EE               [12] 1374 	mov	a,r6
      0024EF 12 4C 58         [24] 1375 	lcall	__gptrput
      0024F2 02 25 A8         [24] 1376 	ljmp	00107$
      0024F5                       1377 00106$:
                                   1378 ;	vt100.c:188: } else if(lines < 0){
      0024F5 E5 08            [12] 1379 	mov	a,_bp
      0024F7 24 FC            [12] 1380 	add	a,#0xfc
      0024F9 F8               [12] 1381 	mov	r0,a
      0024FA 08               [12] 1382 	inc	r0
      0024FB E6               [12] 1383 	mov	a,@r0
      0024FC 20 E7 03         [24] 1384 	jb	acc.7,00125$
      0024FF 02 25 A8         [24] 1385 	ljmp	00107$
      002502                       1386 00125$:
                                   1387 ;	vt100.c:189: _vt100_clearLines(t, t->scroll_end_row - lines, t->scroll_end_row - 1); 
      002502 EA               [12] 1388 	mov	a,r2
      002503 24 FF            [12] 1389 	add	a,#0xff
      002505 FE               [12] 1390 	mov	r6,a
      002506 EC               [12] 1391 	mov	a,r4
      002507 34 FF            [12] 1392 	addc	a,#0xff
      002509 FF               [12] 1393 	mov	r7,a
      00250A E5 08            [12] 1394 	mov	a,_bp
      00250C 24 FC            [12] 1395 	add	a,#0xfc
      00250E F8               [12] 1396 	mov	r0,a
      00250F EA               [12] 1397 	mov	a,r2
      002510 C3               [12] 1398 	clr	c
      002511 96               [12] 1399 	subb	a,@r0
      002512 FA               [12] 1400 	mov	r2,a
      002513 EC               [12] 1401 	mov	a,r4
      002514 08               [12] 1402 	inc	r0
      002515 96               [12] 1403 	subb	a,@r0
      002516 FC               [12] 1404 	mov	r4,a
      002517 C0 06            [24] 1405 	push	ar6
      002519 C0 07            [24] 1406 	push	ar7
      00251B C0 02            [24] 1407 	push	ar2
      00251D C0 04            [24] 1408 	push	ar4
      00251F A8 08            [24] 1409 	mov	r0,_bp
      002521 08               [12] 1410 	inc	r0
      002522 86 82            [24] 1411 	mov	dpl,@r0
      002524 08               [12] 1412 	inc	r0
      002525 86 83            [24] 1413 	mov	dph,@r0
      002527 08               [12] 1414 	inc	r0
      002528 86 F0            [24] 1415 	mov	b,@r0
      00252A 12 23 38         [24] 1416 	lcall	__vt100_clearLines
      00252D E5 81            [12] 1417 	mov	a,sp
      00252F 24 FC            [12] 1418 	add	a,#0xfc
      002531 F5 81            [12] 1419 	mov	sp,a
                                   1420 ;	vt100.c:191: t->scroll_value = (scroll_height + t->scroll_value + lines) % scroll_height; 
      002533 A8 08            [24] 1421 	mov	r0,_bp
      002535 08               [12] 1422 	inc	r0
      002536 74 0B            [12] 1423 	mov	a,#0x0b
      002538 26               [12] 1424 	add	a,@r0
      002539 FD               [12] 1425 	mov	r5,a
      00253A E4               [12] 1426 	clr	a
      00253B 08               [12] 1427 	inc	r0
      00253C 36               [12] 1428 	addc	a,@r0
      00253D FE               [12] 1429 	mov	r6,a
      00253E 08               [12] 1430 	inc	r0
      00253F 86 07            [24] 1431 	mov	ar7,@r0
      002541 8D 82            [24] 1432 	mov	dpl,r5
      002543 8E 83            [24] 1433 	mov	dph,r6
      002545 8F F0            [24] 1434 	mov	b,r7
      002547 12 4C 95         [24] 1435 	lcall	__gptrget
      00254A FC               [12] 1436 	mov	r4,a
      00254B 33               [12] 1437 	rlc	a
      00254C 95 E0            [12] 1438 	subb	a,acc
      00254E FB               [12] 1439 	mov	r3,a
      00254F E5 08            [12] 1440 	mov	a,_bp
      002551 24 07            [12] 1441 	add	a,#0x07
      002553 F8               [12] 1442 	mov	r0,a
      002554 E5 08            [12] 1443 	mov	a,_bp
      002556 24 04            [12] 1444 	add	a,#0x04
      002558 F9               [12] 1445 	mov	r1,a
      002559 EC               [12] 1446 	mov	a,r4
      00255A 26               [12] 1447 	add	a,@r0
      00255B F7               [12] 1448 	mov	@r1,a
      00255C EB               [12] 1449 	mov	a,r3
      00255D 08               [12] 1450 	inc	r0
      00255E 36               [12] 1451 	addc	a,@r0
      00255F 09               [12] 1452 	inc	r1
      002560 F7               [12] 1453 	mov	@r1,a
      002561 E5 08            [12] 1454 	mov	a,_bp
      002563 24 FC            [12] 1455 	add	a,#0xfc
      002565 F8               [12] 1456 	mov	r0,a
      002566 86 02            [24] 1457 	mov	ar2,@r0
      002568 08               [12] 1458 	inc	r0
      002569 86 04            [24] 1459 	mov	ar4,@r0
      00256B E5 08            [12] 1460 	mov	a,_bp
      00256D 24 04            [12] 1461 	add	a,#0x04
      00256F F8               [12] 1462 	mov	r0,a
      002570 EA               [12] 1463 	mov	a,r2
      002571 26               [12] 1464 	add	a,@r0
      002572 FA               [12] 1465 	mov	r2,a
      002573 EC               [12] 1466 	mov	a,r4
      002574 08               [12] 1467 	inc	r0
      002575 36               [12] 1468 	addc	a,@r0
      002576 FC               [12] 1469 	mov	r4,a
      002577 C0 07            [24] 1470 	push	ar7
      002579 C0 06            [24] 1471 	push	ar6
      00257B C0 05            [24] 1472 	push	ar5
      00257D E5 08            [12] 1473 	mov	a,_bp
      00257F 24 07            [12] 1474 	add	a,#0x07
      002581 F8               [12] 1475 	mov	r0,a
      002582 E6               [12] 1476 	mov	a,@r0
      002583 C0 E0            [24] 1477 	push	acc
      002585 08               [12] 1478 	inc	r0
      002586 E6               [12] 1479 	mov	a,@r0
      002587 C0 E0            [24] 1480 	push	acc
      002589 8A 82            [24] 1481 	mov	dpl,r2
      00258B 8C 83            [24] 1482 	mov	dph,r4
      00258D 12 4C EE         [24] 1483 	lcall	__moduint
      002590 AB 82            [24] 1484 	mov	r3,dpl
      002592 AC 83            [24] 1485 	mov	r4,dph
      002594 15 81            [12] 1486 	dec	sp
      002596 15 81            [12] 1487 	dec	sp
      002598 D0 05            [24] 1488 	pop	ar5
      00259A D0 06            [24] 1489 	pop	ar6
      00259C D0 07            [24] 1490 	pop	ar7
      00259E 8D 82            [24] 1491 	mov	dpl,r5
      0025A0 8E 83            [24] 1492 	mov	dph,r6
      0025A2 8F F0            [24] 1493 	mov	b,r7
      0025A4 EB               [12] 1494 	mov	a,r3
      0025A5 12 4C 58         [24] 1495 	lcall	__gptrput
      0025A8                       1496 00107$:
                                   1497 ;	vt100.c:196: uint16_t scroll_start = (t->scroll_start_row + t->scroll_value) * VT100_CHAR_HEIGHT; 
      0025A8 A8 08            [24] 1498 	mov	r0,_bp
      0025AA 08               [12] 1499 	inc	r0
      0025AB 74 05            [12] 1500 	mov	a,#0x05
      0025AD 26               [12] 1501 	add	a,@r0
      0025AE FD               [12] 1502 	mov	r5,a
      0025AF E4               [12] 1503 	clr	a
      0025B0 08               [12] 1504 	inc	r0
      0025B1 36               [12] 1505 	addc	a,@r0
      0025B2 FE               [12] 1506 	mov	r6,a
      0025B3 08               [12] 1507 	inc	r0
      0025B4 86 07            [24] 1508 	mov	ar7,@r0
      0025B6 8D 82            [24] 1509 	mov	dpl,r5
      0025B8 8E 83            [24] 1510 	mov	dph,r6
      0025BA 8F F0            [24] 1511 	mov	b,r7
      0025BC 12 4C 95         [24] 1512 	lcall	__gptrget
      0025BF FD               [12] 1513 	mov	r5,a
      0025C0 33               [12] 1514 	rlc	a
      0025C1 95 E0            [12] 1515 	subb	a,acc
      0025C3 FF               [12] 1516 	mov	r7,a
      0025C4 A8 08            [24] 1517 	mov	r0,_bp
      0025C6 08               [12] 1518 	inc	r0
      0025C7 74 0B            [12] 1519 	mov	a,#0x0b
      0025C9 26               [12] 1520 	add	a,@r0
      0025CA FB               [12] 1521 	mov	r3,a
      0025CB E4               [12] 1522 	clr	a
      0025CC 08               [12] 1523 	inc	r0
      0025CD 36               [12] 1524 	addc	a,@r0
      0025CE FC               [12] 1525 	mov	r4,a
      0025CF 08               [12] 1526 	inc	r0
      0025D0 86 06            [24] 1527 	mov	ar6,@r0
      0025D2 8B 82            [24] 1528 	mov	dpl,r3
      0025D4 8C 83            [24] 1529 	mov	dph,r4
      0025D6 8E F0            [24] 1530 	mov	b,r6
      0025D8 12 4C 95         [24] 1531 	lcall	__gptrget
      0025DB FB               [12] 1532 	mov	r3,a
      0025DC 33               [12] 1533 	rlc	a
      0025DD 95 E0            [12] 1534 	subb	a,acc
      0025DF FE               [12] 1535 	mov	r6,a
      0025E0 EB               [12] 1536 	mov	a,r3
      0025E1 2D               [12] 1537 	add	a,r5
      0025E2 FD               [12] 1538 	mov	r5,a
      0025E3 EE               [12] 1539 	mov	a,r6
      0025E4 3F               [12] 1540 	addc	a,r7
                                   1541 ;	vt100.c:197: vga_setScrollStart(scroll_start); 
      0025E5 8D 82            [24] 1542 	mov	dpl,r5
      0025E7 12 21 8F         [24] 1543 	lcall	_vga_setScrollStart
      0025EA                       1544 00108$:
                                   1545 ;	vt100.c:216: }
      0025EA 85 08 81         [24] 1546 	mov	sp,_bp
      0025ED D0 08            [24] 1547 	pop	_bp
      0025EF 22               [24] 1548 	ret
                                   1549 ;------------------------------------------------------------
                                   1550 ;Allocation info for local variables in function 'abs'
                                   1551 ;------------------------------------------------------------
                                   1552 ;x                         Allocated to registers r6 r7 
                                   1553 ;------------------------------------------------------------
                                   1554 ;	vt100.c:218: int16_t abs(int16_t x) {
                                   1555 ;	-----------------------------------------
                                   1556 ;	 function abs
                                   1557 ;	-----------------------------------------
      0025F0                       1558 _abs:
      0025F0 AE 82            [24] 1559 	mov	r6,dpl
                                   1560 ;	vt100.c:219: if (x < 0) return -x;
      0025F2 E5 83            [12] 1561 	mov	a,dph
      0025F4 FF               [12] 1562 	mov	r7,a
      0025F5 30 E7 0A         [24] 1563 	jnb	acc.7,00102$
      0025F8 C3               [12] 1564 	clr	c
      0025F9 E4               [12] 1565 	clr	a
      0025FA 9E               [12] 1566 	subb	a,r6
      0025FB F5 82            [12] 1567 	mov	dpl,a
      0025FD E4               [12] 1568 	clr	a
      0025FE 9F               [12] 1569 	subb	a,r7
      0025FF F5 83            [12] 1570 	mov	dph,a
      002601 22               [24] 1571 	ret
      002602                       1572 00102$:
                                   1573 ;	vt100.c:220: return x;
      002602 8E 82            [24] 1574 	mov	dpl,r6
      002604 8F 83            [24] 1575 	mov	dph,r7
                                   1576 ;	vt100.c:221: }
      002606 22               [24] 1577 	ret
                                   1578 ;------------------------------------------------------------
                                   1579 ;Allocation info for local variables in function '_vt100_move'
                                   1580 ;------------------------------------------------------------
                                   1581 ;right_left                Allocated to stack - _bp -4
                                   1582 ;bottom_top                Allocated to stack - _bp -6
                                   1583 ;term                      Allocated to stack - _bp +1
                                   1584 ;new_x                     Allocated to stack - _bp +6
                                   1585 ;new_y                     Allocated to stack - _bp +8
                                   1586 ;to_scroll                 Allocated to stack - _bp +4
                                   1587 ;sloc0                     Allocated to stack - _bp +4
                                   1588 ;------------------------------------------------------------
                                   1589 ;	vt100.c:224: void _vt100_move(struct vt100 *term, int16_t right_left, int16_t bottom_top){
                                   1590 ;	-----------------------------------------
                                   1591 ;	 function _vt100_move
                                   1592 ;	-----------------------------------------
      002607                       1593 __vt100_move:
      002607 C0 08            [24] 1594 	push	_bp
      002609 85 81 08         [24] 1595 	mov	_bp,sp
      00260C C0 82            [24] 1596 	push	dpl
      00260E C0 83            [24] 1597 	push	dph
      002610 C0 F0            [24] 1598 	push	b
      002612 E5 81            [12] 1599 	mov	a,sp
      002614 24 06            [12] 1600 	add	a,#0x06
      002616 F5 81            [12] 1601 	mov	sp,a
                                   1602 ;	vt100.c:226: int16_t new_x = right_left + term->cursor_x; 
      002618 A8 08            [24] 1603 	mov	r0,_bp
      00261A 08               [12] 1604 	inc	r0
      00261B 74 01            [12] 1605 	mov	a,#0x01
      00261D 26               [12] 1606 	add	a,@r0
      00261E FA               [12] 1607 	mov	r2,a
      00261F E4               [12] 1608 	clr	a
      002620 08               [12] 1609 	inc	r0
      002621 36               [12] 1610 	addc	a,@r0
      002622 FB               [12] 1611 	mov	r3,a
      002623 08               [12] 1612 	inc	r0
      002624 86 04            [24] 1613 	mov	ar4,@r0
      002626 8A 82            [24] 1614 	mov	dpl,r2
      002628 8B 83            [24] 1615 	mov	dph,r3
      00262A 8C F0            [24] 1616 	mov	b,r4
      00262C 12 4C 95         [24] 1617 	lcall	__gptrget
      00262F FF               [12] 1618 	mov	r7,a
      002630 33               [12] 1619 	rlc	a
      002631 95 E0            [12] 1620 	subb	a,acc
      002633 FE               [12] 1621 	mov	r6,a
      002634 E5 08            [12] 1622 	mov	a,_bp
      002636 24 FC            [12] 1623 	add	a,#0xfc
      002638 F8               [12] 1624 	mov	r0,a
      002639 EF               [12] 1625 	mov	a,r7
      00263A 26               [12] 1626 	add	a,@r0
      00263B FF               [12] 1627 	mov	r7,a
      00263C EE               [12] 1628 	mov	a,r6
      00263D 08               [12] 1629 	inc	r0
      00263E 36               [12] 1630 	addc	a,@r0
      00263F FE               [12] 1631 	mov	r6,a
      002640 E5 08            [12] 1632 	mov	a,_bp
      002642 24 06            [12] 1633 	add	a,#0x06
      002644 F8               [12] 1634 	mov	r0,a
      002645 A6 07            [24] 1635 	mov	@r0,ar7
      002647 08               [12] 1636 	inc	r0
      002648 A6 06            [24] 1637 	mov	@r0,ar6
                                   1638 ;	vt100.c:227: if(new_x > VT100_WIDTH){
      00264A E5 08            [12] 1639 	mov	a,_bp
      00264C 24 06            [12] 1640 	add	a,#0x06
      00264E F8               [12] 1641 	mov	r0,a
      00264F C3               [12] 1642 	clr	c
      002650 74 50            [12] 1643 	mov	a,#0x50
      002652 96               [12] 1644 	subb	a,@r0
      002653 74 80            [12] 1645 	mov	a,#(0x00 ^ 0x80)
      002655 08               [12] 1646 	inc	r0
      002656 86 F0            [24] 1647 	mov	b,@r0
      002658 63 F0 80         [24] 1648 	xrl	b,#0x80
      00265B 95 F0            [12] 1649 	subb	a,b
      00265D 40 03            [24] 1650 	jc	00144$
      00265F 02 26 F1         [24] 1651 	ljmp	00108$
      002662                       1652 00144$:
                                   1653 ;	vt100.c:228: if(term->flags.cursor_wrap){
      002662 C0 02            [24] 1654 	push	ar2
      002664 C0 03            [24] 1655 	push	ar3
      002666 C0 04            [24] 1656 	push	ar4
      002668 A8 08            [24] 1657 	mov	r0,_bp
      00266A 08               [12] 1658 	inc	r0
      00266B 86 03            [24] 1659 	mov	ar3,@r0
      00266D 08               [12] 1660 	inc	r0
      00266E 86 04            [24] 1661 	mov	ar4,@r0
      002670 08               [12] 1662 	inc	r0
      002671 86 05            [24] 1663 	mov	ar5,@r0
      002673 8B 82            [24] 1664 	mov	dpl,r3
      002675 8C 83            [24] 1665 	mov	dph,r4
      002677 8D F0            [24] 1666 	mov	b,r5
      002679 12 4C 95         [24] 1667 	lcall	__gptrget
      00267C D0 04            [24] 1668 	pop	ar4
      00267E D0 03            [24] 1669 	pop	ar3
      002680 D0 02            [24] 1670 	pop	ar2
      002682 30 E0 5E         [24] 1671 	jnb	acc.0,00102$
                                   1672 ;	vt100.c:229: bottom_top += new_x / VT100_WIDTH;
      002685 C0 04            [24] 1673 	push	ar4
      002687 C0 03            [24] 1674 	push	ar3
      002689 C0 02            [24] 1675 	push	ar2
      00268B 74 50            [12] 1676 	mov	a,#0x50
      00268D C0 E0            [24] 1677 	push	acc
      00268F E4               [12] 1678 	clr	a
      002690 C0 E0            [24] 1679 	push	acc
      002692 E5 08            [12] 1680 	mov	a,_bp
      002694 24 06            [12] 1681 	add	a,#0x06
      002696 F8               [12] 1682 	mov	r0,a
      002697 86 82            [24] 1683 	mov	dpl,@r0
      002699 08               [12] 1684 	inc	r0
      00269A 86 83            [24] 1685 	mov	dph,@r0
      00269C 12 4D 33         [24] 1686 	lcall	__divsint
      00269F AD 82            [24] 1687 	mov	r5,dpl
      0026A1 AF 83            [24] 1688 	mov	r7,dph
      0026A3 15 81            [12] 1689 	dec	sp
      0026A5 15 81            [12] 1690 	dec	sp
      0026A7 E5 08            [12] 1691 	mov	a,_bp
      0026A9 24 FA            [12] 1692 	add	a,#0xfa
      0026AB F8               [12] 1693 	mov	r0,a
      0026AC ED               [12] 1694 	mov	a,r5
      0026AD 26               [12] 1695 	add	a,@r0
      0026AE F6               [12] 1696 	mov	@r0,a
      0026AF EF               [12] 1697 	mov	a,r7
      0026B0 08               [12] 1698 	inc	r0
      0026B1 36               [12] 1699 	addc	a,@r0
      0026B2 F6               [12] 1700 	mov	@r0,a
                                   1701 ;	vt100.c:230: term->cursor_x = new_x % VT100_WIDTH - 1;
      0026B3 74 50            [12] 1702 	mov	a,#0x50
      0026B5 C0 E0            [24] 1703 	push	acc
      0026B7 E4               [12] 1704 	clr	a
      0026B8 C0 E0            [24] 1705 	push	acc
      0026BA E5 08            [12] 1706 	mov	a,_bp
      0026BC 24 06            [12] 1707 	add	a,#0x06
      0026BE F8               [12] 1708 	mov	r0,a
      0026BF 86 82            [24] 1709 	mov	dpl,@r0
      0026C1 08               [12] 1710 	inc	r0
      0026C2 86 83            [24] 1711 	mov	dph,@r0
      0026C4 12 4C B1         [24] 1712 	lcall	__modsint
      0026C7 AE 82            [24] 1713 	mov	r6,dpl
      0026C9 AF 83            [24] 1714 	mov	r7,dph
      0026CB 15 81            [12] 1715 	dec	sp
      0026CD 15 81            [12] 1716 	dec	sp
      0026CF D0 02            [24] 1717 	pop	ar2
      0026D1 D0 03            [24] 1718 	pop	ar3
      0026D3 D0 04            [24] 1719 	pop	ar4
      0026D5 1E               [12] 1720 	dec	r6
      0026D6 8A 82            [24] 1721 	mov	dpl,r2
      0026D8 8B 83            [24] 1722 	mov	dph,r3
      0026DA 8C F0            [24] 1723 	mov	b,r4
      0026DC EE               [12] 1724 	mov	a,r6
      0026DD 12 4C 58         [24] 1725 	lcall	__gptrput
      0026E0 02 27 80         [24] 1726 	ljmp	00109$
      0026E3                       1727 00102$:
                                   1728 ;	vt100.c:232: term->cursor_x = VT100_WIDTH;
      0026E3 8A 82            [24] 1729 	mov	dpl,r2
      0026E5 8B 83            [24] 1730 	mov	dph,r3
      0026E7 8C F0            [24] 1731 	mov	b,r4
      0026E9 74 50            [12] 1732 	mov	a,#0x50
      0026EB 12 4C 58         [24] 1733 	lcall	__gptrput
      0026EE 02 27 80         [24] 1734 	ljmp	00109$
      0026F1                       1735 00108$:
                                   1736 ;	vt100.c:234: } else if(new_x < 0){
      0026F1 E5 08            [12] 1737 	mov	a,_bp
      0026F3 24 06            [12] 1738 	add	a,#0x06
      0026F5 F8               [12] 1739 	mov	r0,a
      0026F6 08               [12] 1740 	inc	r0
      0026F7 E6               [12] 1741 	mov	a,@r0
      0026F8 30 E7 74         [24] 1742 	jnb	acc.7,00105$
                                   1743 ;	vt100.c:235: bottom_top += new_x / VT100_WIDTH - 1;
      0026FB C0 04            [24] 1744 	push	ar4
      0026FD C0 03            [24] 1745 	push	ar3
      0026FF C0 02            [24] 1746 	push	ar2
      002701 74 50            [12] 1747 	mov	a,#0x50
      002703 C0 E0            [24] 1748 	push	acc
      002705 E4               [12] 1749 	clr	a
      002706 C0 E0            [24] 1750 	push	acc
      002708 E5 08            [12] 1751 	mov	a,_bp
      00270A 24 06            [12] 1752 	add	a,#0x06
      00270C F8               [12] 1753 	mov	r0,a
      00270D 86 82            [24] 1754 	mov	dpl,@r0
      00270F 08               [12] 1755 	inc	r0
      002710 86 83            [24] 1756 	mov	dph,@r0
      002712 12 4D 33         [24] 1757 	lcall	__divsint
      002715 AE 82            [24] 1758 	mov	r6,dpl
      002717 AF 83            [24] 1759 	mov	r7,dph
      002719 15 81            [12] 1760 	dec	sp
      00271B 15 81            [12] 1761 	dec	sp
      00271D D0 02            [24] 1762 	pop	ar2
      00271F D0 03            [24] 1763 	pop	ar3
      002721 D0 04            [24] 1764 	pop	ar4
      002723 1E               [12] 1765 	dec	r6
      002724 BE FF 01         [24] 1766 	cjne	r6,#0xff,00147$
      002727 1F               [12] 1767 	dec	r7
      002728                       1768 00147$:
      002728 E5 08            [12] 1769 	mov	a,_bp
      00272A 24 FA            [12] 1770 	add	a,#0xfa
      00272C F8               [12] 1771 	mov	r0,a
      00272D EE               [12] 1772 	mov	a,r6
      00272E 26               [12] 1773 	add	a,@r0
      00272F F6               [12] 1774 	mov	@r0,a
      002730 EF               [12] 1775 	mov	a,r7
      002731 08               [12] 1776 	inc	r0
      002732 36               [12] 1777 	addc	a,@r0
      002733 F6               [12] 1778 	mov	@r0,a
                                   1779 ;	vt100.c:236: term->cursor_x = VT100_WIDTH - (abs(new_x) % VT100_WIDTH) + 1; 
      002734 E5 08            [12] 1780 	mov	a,_bp
      002736 24 06            [12] 1781 	add	a,#0x06
      002738 F8               [12] 1782 	mov	r0,a
      002739 86 82            [24] 1783 	mov	dpl,@r0
      00273B 08               [12] 1784 	inc	r0
      00273C 86 83            [24] 1785 	mov	dph,@r0
      00273E C0 04            [24] 1786 	push	ar4
      002740 C0 03            [24] 1787 	push	ar3
      002742 C0 02            [24] 1788 	push	ar2
      002744 12 25 F0         [24] 1789 	lcall	_abs
      002747 74 50            [12] 1790 	mov	a,#0x50
      002749 C0 E0            [24] 1791 	push	acc
      00274B E4               [12] 1792 	clr	a
      00274C C0 E0            [24] 1793 	push	acc
      00274E 12 4C B1         [24] 1794 	lcall	__modsint
      002751 AE 82            [24] 1795 	mov	r6,dpl
      002753 AF 83            [24] 1796 	mov	r7,dph
      002755 15 81            [12] 1797 	dec	sp
      002757 15 81            [12] 1798 	dec	sp
      002759 D0 02            [24] 1799 	pop	ar2
      00275B D0 03            [24] 1800 	pop	ar3
      00275D D0 04            [24] 1801 	pop	ar4
      00275F 74 51            [12] 1802 	mov	a,#0x51
      002761 C3               [12] 1803 	clr	c
      002762 9E               [12] 1804 	subb	a,r6
      002763 FE               [12] 1805 	mov	r6,a
      002764 8A 82            [24] 1806 	mov	dpl,r2
      002766 8B 83            [24] 1807 	mov	dph,r3
      002768 8C F0            [24] 1808 	mov	b,r4
      00276A 12 4C 58         [24] 1809 	lcall	__gptrput
      00276D 80 11            [24] 1810 	sjmp	00109$
      00276F                       1811 00105$:
                                   1812 ;	vt100.c:238: term->cursor_x = new_x;
      00276F E5 08            [12] 1813 	mov	a,_bp
      002771 24 06            [12] 1814 	add	a,#0x06
      002773 F8               [12] 1815 	mov	r0,a
      002774 86 07            [24] 1816 	mov	ar7,@r0
      002776 8A 82            [24] 1817 	mov	dpl,r2
      002778 8B 83            [24] 1818 	mov	dph,r3
      00277A 8C F0            [24] 1819 	mov	b,r4
      00277C EF               [12] 1820 	mov	a,r7
      00277D 12 4C 58         [24] 1821 	lcall	__gptrput
      002780                       1822 00109$:
                                   1823 ;	vt100.c:241: if(bottom_top){
      002780 E5 08            [12] 1824 	mov	a,_bp
      002782 24 FA            [12] 1825 	add	a,#0xfa
      002784 F8               [12] 1826 	mov	r0,a
      002785 E6               [12] 1827 	mov	a,@r0
      002786 08               [12] 1828 	inc	r0
      002787 46               [12] 1829 	orl	a,@r0
      002788 70 03            [24] 1830 	jnz	00148$
      00278A 02 28 A5         [24] 1831 	ljmp	00118$
      00278D                       1832 00148$:
                                   1833 ;	vt100.c:242: int16_t new_y = term->cursor_y + bottom_top;
      00278D A8 08            [24] 1834 	mov	r0,_bp
      00278F 08               [12] 1835 	inc	r0
      002790 74 02            [12] 1836 	mov	a,#0x02
      002792 26               [12] 1837 	add	a,@r0
      002793 FD               [12] 1838 	mov	r5,a
      002794 E4               [12] 1839 	clr	a
      002795 08               [12] 1840 	inc	r0
      002796 36               [12] 1841 	addc	a,@r0
      002797 FE               [12] 1842 	mov	r6,a
      002798 08               [12] 1843 	inc	r0
      002799 86 07            [24] 1844 	mov	ar7,@r0
      00279B 8D 82            [24] 1845 	mov	dpl,r5
      00279D 8E 83            [24] 1846 	mov	dph,r6
      00279F 8F F0            [24] 1847 	mov	b,r7
      0027A1 12 4C 95         [24] 1848 	lcall	__gptrget
      0027A4 FC               [12] 1849 	mov	r4,a
      0027A5 33               [12] 1850 	rlc	a
      0027A6 95 E0            [12] 1851 	subb	a,acc
      0027A8 FB               [12] 1852 	mov	r3,a
      0027A9 E5 08            [12] 1853 	mov	a,_bp
      0027AB 24 FA            [12] 1854 	add	a,#0xfa
      0027AD F8               [12] 1855 	mov	r0,a
      0027AE E6               [12] 1856 	mov	a,@r0
      0027AF 2C               [12] 1857 	add	a,r4
      0027B0 FC               [12] 1858 	mov	r4,a
      0027B1 08               [12] 1859 	inc	r0
      0027B2 E6               [12] 1860 	mov	a,@r0
      0027B3 3B               [12] 1861 	addc	a,r3
      0027B4 FB               [12] 1862 	mov	r3,a
      0027B5 E5 08            [12] 1863 	mov	a,_bp
      0027B7 24 08            [12] 1864 	add	a,#0x08
      0027B9 F8               [12] 1865 	mov	r0,a
      0027BA A6 04            [24] 1866 	mov	@r0,ar4
      0027BC 08               [12] 1867 	inc	r0
      0027BD A6 03            [24] 1868 	mov	@r0,ar3
                                   1869 ;	vt100.c:243: int16_t to_scroll = 0;
      0027BF E5 08            [12] 1870 	mov	a,_bp
      0027C1 24 04            [12] 1871 	add	a,#0x04
      0027C3 F8               [12] 1872 	mov	r0,a
      0027C4 E4               [12] 1873 	clr	a
      0027C5 F6               [12] 1874 	mov	@r0,a
      0027C6 08               [12] 1875 	inc	r0
      0027C7 F6               [12] 1876 	mov	@r0,a
                                   1877 ;	vt100.c:248: if(new_y >= term->scroll_end_row){
      0027C8 A8 08            [24] 1878 	mov	r0,_bp
      0027CA 08               [12] 1879 	inc	r0
      0027CB 74 06            [12] 1880 	mov	a,#0x06
      0027CD 26               [12] 1881 	add	a,@r0
      0027CE FA               [12] 1882 	mov	r2,a
      0027CF E4               [12] 1883 	clr	a
      0027D0 08               [12] 1884 	inc	r0
      0027D1 36               [12] 1885 	addc	a,@r0
      0027D2 FB               [12] 1886 	mov	r3,a
      0027D3 08               [12] 1887 	inc	r0
      0027D4 86 04            [24] 1888 	mov	ar4,@r0
      0027D6 8A 82            [24] 1889 	mov	dpl,r2
      0027D8 8B 83            [24] 1890 	mov	dph,r3
      0027DA 8C F0            [24] 1891 	mov	b,r4
      0027DC 12 4C 95         [24] 1892 	lcall	__gptrget
      0027DF FC               [12] 1893 	mov	r4,a
      0027E0 FA               [12] 1894 	mov	r2,a
      0027E1 33               [12] 1895 	rlc	a
      0027E2 95 E0            [12] 1896 	subb	a,acc
      0027E4 FB               [12] 1897 	mov	r3,a
      0027E5 E5 08            [12] 1898 	mov	a,_bp
      0027E7 24 08            [12] 1899 	add	a,#0x08
      0027E9 F8               [12] 1900 	mov	r0,a
      0027EA C3               [12] 1901 	clr	c
      0027EB E6               [12] 1902 	mov	a,@r0
      0027EC 9A               [12] 1903 	subb	a,r2
      0027ED 08               [12] 1904 	inc	r0
      0027EE E6               [12] 1905 	mov	a,@r0
      0027EF 64 80            [12] 1906 	xrl	a,#0x80
      0027F1 8B F0            [24] 1907 	mov	b,r3
      0027F3 63 F0 80         [24] 1908 	xrl	b,#0x80
      0027F6 95 F0            [12] 1909 	subb	a,b
      0027F8 40 27            [24] 1910 	jc	00114$
                                   1911 ;	vt100.c:251: to_scroll = (new_y - term->scroll_end_row) + 1; 
      0027FA E5 08            [12] 1912 	mov	a,_bp
      0027FC 24 08            [12] 1913 	add	a,#0x08
      0027FE F8               [12] 1914 	mov	r0,a
      0027FF E6               [12] 1915 	mov	a,@r0
      002800 C3               [12] 1916 	clr	c
      002801 9A               [12] 1917 	subb	a,r2
      002802 FA               [12] 1918 	mov	r2,a
      002803 08               [12] 1919 	inc	r0
      002804 E6               [12] 1920 	mov	a,@r0
      002805 9B               [12] 1921 	subb	a,r3
      002806 FB               [12] 1922 	mov	r3,a
      002807 E5 08            [12] 1923 	mov	a,_bp
      002809 24 04            [12] 1924 	add	a,#0x04
      00280B F8               [12] 1925 	mov	r0,a
      00280C 74 01            [12] 1926 	mov	a,#0x01
      00280E 2A               [12] 1927 	add	a,r2
      00280F F6               [12] 1928 	mov	@r0,a
      002810 E4               [12] 1929 	clr	a
      002811 3B               [12] 1930 	addc	a,r3
      002812 08               [12] 1931 	inc	r0
      002813 F6               [12] 1932 	mov	@r0,a
                                   1933 ;	vt100.c:253: term->cursor_y = term->scroll_end_row - 1; //new_y - to_scroll; 
      002814 1C               [12] 1934 	dec	r4
      002815 8D 82            [24] 1935 	mov	dpl,r5
      002817 8E 83            [24] 1936 	mov	dph,r6
      002819 8F F0            [24] 1937 	mov	b,r7
      00281B EC               [12] 1938 	mov	a,r4
      00281C 12 4C 58         [24] 1939 	lcall	__gptrput
      00281F 80 66            [24] 1940 	sjmp	00115$
      002821                       1941 00114$:
                                   1942 ;	vt100.c:256: } else if(new_y < term->scroll_start_row){
      002821 A8 08            [24] 1943 	mov	r0,_bp
      002823 08               [12] 1944 	inc	r0
      002824 74 05            [12] 1945 	mov	a,#0x05
      002826 26               [12] 1946 	add	a,@r0
      002827 FA               [12] 1947 	mov	r2,a
      002828 E4               [12] 1948 	clr	a
      002829 08               [12] 1949 	inc	r0
      00282A 36               [12] 1950 	addc	a,@r0
      00282B FB               [12] 1951 	mov	r3,a
      00282C 08               [12] 1952 	inc	r0
      00282D 86 04            [24] 1953 	mov	ar4,@r0
      00282F 8A 82            [24] 1954 	mov	dpl,r2
      002831 8B 83            [24] 1955 	mov	dph,r3
      002833 8C F0            [24] 1956 	mov	b,r4
      002835 12 4C 95         [24] 1957 	lcall	__gptrget
      002838 FC               [12] 1958 	mov	r4,a
      002839 FA               [12] 1959 	mov	r2,a
      00283A 33               [12] 1960 	rlc	a
      00283B 95 E0            [12] 1961 	subb	a,acc
      00283D FB               [12] 1962 	mov	r3,a
      00283E E5 08            [12] 1963 	mov	a,_bp
      002840 24 08            [12] 1964 	add	a,#0x08
      002842 F8               [12] 1965 	mov	r0,a
      002843 C3               [12] 1966 	clr	c
      002844 E6               [12] 1967 	mov	a,@r0
      002845 9A               [12] 1968 	subb	a,r2
      002846 08               [12] 1969 	inc	r0
      002847 E6               [12] 1970 	mov	a,@r0
      002848 64 80            [12] 1971 	xrl	a,#0x80
      00284A 8B F0            [24] 1972 	mov	b,r3
      00284C 63 F0 80         [24] 1973 	xrl	b,#0x80
      00284F 95 F0            [12] 1974 	subb	a,b
      002851 50 23            [24] 1975 	jnc	00111$
                                   1976 ;	vt100.c:257: to_scroll = (new_y - term->scroll_start_row); 
      002853 E5 08            [12] 1977 	mov	a,_bp
      002855 24 08            [12] 1978 	add	a,#0x08
      002857 F8               [12] 1979 	mov	r0,a
      002858 E6               [12] 1980 	mov	a,@r0
      002859 C3               [12] 1981 	clr	c
      00285A 9A               [12] 1982 	subb	a,r2
      00285B FA               [12] 1983 	mov	r2,a
      00285C 08               [12] 1984 	inc	r0
      00285D E6               [12] 1985 	mov	a,@r0
      00285E 9B               [12] 1986 	subb	a,r3
      00285F FB               [12] 1987 	mov	r3,a
      002860 E5 08            [12] 1988 	mov	a,_bp
      002862 24 04            [12] 1989 	add	a,#0x04
      002864 F8               [12] 1990 	mov	r0,a
      002865 A6 02            [24] 1991 	mov	@r0,ar2
      002867 08               [12] 1992 	inc	r0
      002868 A6 03            [24] 1993 	mov	@r0,ar3
                                   1994 ;	vt100.c:258: term->cursor_y = term->scroll_start_row; //new_y - to_scroll; 
      00286A 8D 82            [24] 1995 	mov	dpl,r5
      00286C 8E 83            [24] 1996 	mov	dph,r6
      00286E 8F F0            [24] 1997 	mov	b,r7
      002870 EC               [12] 1998 	mov	a,r4
      002871 12 4C 58         [24] 1999 	lcall	__gptrput
      002874 80 11            [24] 2000 	sjmp	00115$
      002876                       2001 00111$:
                                   2002 ;	vt100.c:263: term->cursor_y = new_y;
      002876 E5 08            [12] 2003 	mov	a,_bp
      002878 24 08            [12] 2004 	add	a,#0x08
      00287A F8               [12] 2005 	mov	r0,a
      00287B 86 04            [24] 2006 	mov	ar4,@r0
      00287D 8D 82            [24] 2007 	mov	dpl,r5
      00287F 8E 83            [24] 2008 	mov	dph,r6
      002881 8F F0            [24] 2009 	mov	b,r7
      002883 EC               [12] 2010 	mov	a,r4
      002884 12 4C 58         [24] 2011 	lcall	__gptrput
      002887                       2012 00115$:
                                   2013 ;	vt100.c:265: _vt100_scroll(term, to_scroll);
      002887 E5 08            [12] 2014 	mov	a,_bp
      002889 24 04            [12] 2015 	add	a,#0x04
      00288B F8               [12] 2016 	mov	r0,a
      00288C E6               [12] 2017 	mov	a,@r0
      00288D C0 E0            [24] 2018 	push	acc
      00288F 08               [12] 2019 	inc	r0
      002890 E6               [12] 2020 	mov	a,@r0
      002891 C0 E0            [24] 2021 	push	acc
      002893 A8 08            [24] 2022 	mov	r0,_bp
      002895 08               [12] 2023 	inc	r0
      002896 86 82            [24] 2024 	mov	dpl,@r0
      002898 08               [12] 2025 	inc	r0
      002899 86 83            [24] 2026 	mov	dph,@r0
      00289B 08               [12] 2027 	inc	r0
      00289C 86 F0            [24] 2028 	mov	b,@r0
      00289E 12 23 E7         [24] 2029 	lcall	__vt100_scroll
      0028A1 15 81            [12] 2030 	dec	sp
      0028A3 15 81            [12] 2031 	dec	sp
      0028A5                       2032 00118$:
                                   2033 ;	vt100.c:267: }
      0028A5 85 08 81         [24] 2034 	mov	sp,_bp
      0028A8 D0 08            [24] 2035 	pop	_bp
      0028AA 22               [24] 2036 	ret
                                   2037 ;------------------------------------------------------------
                                   2038 ;Allocation info for local variables in function '_vt100_drawCursor'
                                   2039 ;------------------------------------------------------------
                                   2040 ;t                         Allocated to registers 
                                   2041 ;------------------------------------------------------------
                                   2042 ;	vt100.c:269: void _vt100_drawCursor(struct vt100 *t){
                                   2043 ;	-----------------------------------------
                                   2044 ;	 function _vt100_drawCursor
                                   2045 ;	-----------------------------------------
      0028AB                       2046 __vt100_drawCursor:
                                   2047 ;	vt100.c:274: }
      0028AB 22               [24] 2048 	ret
                                   2049 ;------------------------------------------------------------
                                   2050 ;Allocation info for local variables in function '_vt100_putc'
                                   2051 ;------------------------------------------------------------
                                   2052 ;ch                        Allocated to stack - _bp -3
                                   2053 ;t                         Allocated to stack - _bp +1
                                   2054 ;x                         Allocated to registers r5 
                                   2055 ;y                         Allocated to registers r6 
                                   2056 ;------------------------------------------------------------
                                   2057 ;	vt100.c:277: void _vt100_putc(struct vt100 *t, uint8_t ch){
                                   2058 ;	-----------------------------------------
                                   2059 ;	 function _vt100_putc
                                   2060 ;	-----------------------------------------
      0028AC                       2061 __vt100_putc:
      0028AC C0 08            [24] 2062 	push	_bp
      0028AE 85 81 08         [24] 2063 	mov	_bp,sp
      0028B1 C0 82            [24] 2064 	push	dpl
      0028B3 C0 83            [24] 2065 	push	dph
      0028B5 C0 F0            [24] 2066 	push	b
                                   2067 ;	vt100.c:280: if(ch < 0x20 || ch > 0x7e){
      0028B7 E5 08            [12] 2068 	mov	a,_bp
      0028B9 24 FD            [12] 2069 	add	a,#0xfd
      0028BB F8               [12] 2070 	mov	r0,a
      0028BC B6 20 00         [24] 2071 	cjne	@r0,#0x20,00110$
      0028BF                       2072 00110$:
      0028BF 40 0D            [24] 2073 	jc	00101$
      0028C1 E5 08            [12] 2074 	mov	a,_bp
      0028C3 24 FD            [12] 2075 	add	a,#0xfd
      0028C5 F8               [12] 2076 	mov	r0,a
      0028C6 E6               [12] 2077 	mov	a,@r0
      0028C7 24 81            [12] 2078 	add	a,#0xff - 0x7e
      0028C9 40 03            [24] 2079 	jc	00112$
      0028CB 02 29 63         [24] 2080 	ljmp	00102$
      0028CE                       2081 00112$:
      0028CE                       2082 00101$:
                                   2083 ;	vt100.c:282: _vt100_putc(t, '0'); 
      0028CE 74 30            [12] 2084 	mov	a,#0x30
      0028D0 C0 E0            [24] 2085 	push	acc
      0028D2 A8 08            [24] 2086 	mov	r0,_bp
      0028D4 08               [12] 2087 	inc	r0
      0028D5 86 82            [24] 2088 	mov	dpl,@r0
      0028D7 08               [12] 2089 	inc	r0
      0028D8 86 83            [24] 2090 	mov	dph,@r0
      0028DA 08               [12] 2091 	inc	r0
      0028DB 86 F0            [24] 2092 	mov	b,@r0
      0028DD 12 28 AC         [24] 2093 	lcall	__vt100_putc
      0028E0 15 81            [12] 2094 	dec	sp
                                   2095 ;	vt100.c:283: _vt100_putc(t, 'x'); 
      0028E2 74 78            [12] 2096 	mov	a,#0x78
      0028E4 C0 E0            [24] 2097 	push	acc
      0028E6 A8 08            [24] 2098 	mov	r0,_bp
      0028E8 08               [12] 2099 	inc	r0
      0028E9 86 82            [24] 2100 	mov	dpl,@r0
      0028EB 08               [12] 2101 	inc	r0
      0028EC 86 83            [24] 2102 	mov	dph,@r0
      0028EE 08               [12] 2103 	inc	r0
      0028EF 86 F0            [24] 2104 	mov	b,@r0
      0028F1 12 28 AC         [24] 2105 	lcall	__vt100_putc
      0028F4 15 81            [12] 2106 	dec	sp
                                   2107 ;	vt100.c:284: _vt100_putc(t, hex[((ch & 0xf0) >> 4)]);
      0028F6 E5 08            [12] 2108 	mov	a,_bp
      0028F8 24 FD            [12] 2109 	add	a,#0xfd
      0028FA F8               [12] 2110 	mov	r0,a
      0028FB 86 03            [24] 2111 	mov	ar3,@r0
      0028FD 7C 00            [12] 2112 	mov	r4,#0x00
      0028FF 74 F0            [12] 2113 	mov	a,#0xf0
      002901 5B               [12] 2114 	anl	a,r3
      002902 FA               [12] 2115 	mov	r2,a
      002903 E4               [12] 2116 	clr	a
      002904 CA               [12] 2117 	xch	a,r2
      002905 C4               [12] 2118 	swap	a
      002906 54 0F            [12] 2119 	anl	a,#0x0f
      002908 6A               [12] 2120 	xrl	a,r2
      002909 CA               [12] 2121 	xch	a,r2
      00290A 54 0F            [12] 2122 	anl	a,#0x0f
      00290C CA               [12] 2123 	xch	a,r2
      00290D 6A               [12] 2124 	xrl	a,r2
      00290E CA               [12] 2125 	xch	a,r2
      00290F 30 E3 02         [24] 2126 	jnb	acc.3,00113$
      002912 44 F0            [12] 2127 	orl	a,#0xfffffff0
      002914                       2128 00113$:
      002914 FF               [12] 2129 	mov	r7,a
      002915 EA               [12] 2130 	mov	a,r2
      002916 24 A5            [12] 2131 	add	a,#__vt100_putc_hex_131072_135
      002918 F5 82            [12] 2132 	mov	dpl,a
      00291A EF               [12] 2133 	mov	a,r7
      00291B 34 4D            [12] 2134 	addc	a,#(__vt100_putc_hex_131072_135 >> 8)
      00291D F5 83            [12] 2135 	mov	dph,a
      00291F E4               [12] 2136 	clr	a
      002920 93               [24] 2137 	movc	a,@a+dptr
      002921 FF               [12] 2138 	mov	r7,a
      002922 C0 04            [24] 2139 	push	ar4
      002924 C0 03            [24] 2140 	push	ar3
      002926 C0 07            [24] 2141 	push	ar7
      002928 A8 08            [24] 2142 	mov	r0,_bp
      00292A 08               [12] 2143 	inc	r0
      00292B 86 82            [24] 2144 	mov	dpl,@r0
      00292D 08               [12] 2145 	inc	r0
      00292E 86 83            [24] 2146 	mov	dph,@r0
      002930 08               [12] 2147 	inc	r0
      002931 86 F0            [24] 2148 	mov	b,@r0
      002933 12 28 AC         [24] 2149 	lcall	__vt100_putc
      002936 15 81            [12] 2150 	dec	sp
      002938 D0 03            [24] 2151 	pop	ar3
      00293A D0 04            [24] 2152 	pop	ar4
                                   2153 ;	vt100.c:285: _vt100_putc(t, hex[(ch & 0x0f)]);
      00293C 53 03 0F         [24] 2154 	anl	ar3,#0x0f
      00293F 7C 00            [12] 2155 	mov	r4,#0x00
      002941 EB               [12] 2156 	mov	a,r3
      002942 24 A5            [12] 2157 	add	a,#__vt100_putc_hex_131072_135
      002944 F5 82            [12] 2158 	mov	dpl,a
      002946 EC               [12] 2159 	mov	a,r4
      002947 34 4D            [12] 2160 	addc	a,#(__vt100_putc_hex_131072_135 >> 8)
      002949 F5 83            [12] 2161 	mov	dph,a
      00294B E4               [12] 2162 	clr	a
      00294C 93               [24] 2163 	movc	a,@a+dptr
      00294D FF               [12] 2164 	mov	r7,a
      00294E C0 07            [24] 2165 	push	ar7
      002950 A8 08            [24] 2166 	mov	r0,_bp
      002952 08               [12] 2167 	inc	r0
      002953 86 82            [24] 2168 	mov	dpl,@r0
      002955 08               [12] 2169 	inc	r0
      002956 86 83            [24] 2170 	mov	dph,@r0
      002958 08               [12] 2171 	inc	r0
      002959 86 F0            [24] 2172 	mov	b,@r0
      00295B 12 28 AC         [24] 2173 	lcall	__vt100_putc
      00295E 15 81            [12] 2174 	dec	sp
                                   2175 ;	vt100.c:286: return;
      002960 02 2A 2C         [24] 2176 	ljmp	00104$
      002963                       2177 00102$:
                                   2178 ;	vt100.c:290: uint8_t x = VT100_CURSOR_X(t);
      002963 A8 08            [24] 2179 	mov	r0,_bp
      002965 08               [12] 2180 	inc	r0
      002966 74 01            [12] 2181 	mov	a,#0x01
      002968 26               [12] 2182 	add	a,@r0
      002969 FD               [12] 2183 	mov	r5,a
      00296A E4               [12] 2184 	clr	a
      00296B 08               [12] 2185 	inc	r0
      00296C 36               [12] 2186 	addc	a,@r0
      00296D FE               [12] 2187 	mov	r6,a
      00296E 08               [12] 2188 	inc	r0
      00296F 86 07            [24] 2189 	mov	ar7,@r0
      002971 8D 82            [24] 2190 	mov	dpl,r5
      002973 8E 83            [24] 2191 	mov	dph,r6
      002975 8F F0            [24] 2192 	mov	b,r7
      002977 12 4C 95         [24] 2193 	lcall	__gptrget
      00297A FD               [12] 2194 	mov	r5,a
      00297B A8 08            [24] 2195 	mov	r0,_bp
      00297D 08               [12] 2196 	inc	r0
      00297E 74 07            [12] 2197 	mov	a,#0x07
      002980 26               [12] 2198 	add	a,@r0
      002981 FC               [12] 2199 	mov	r4,a
      002982 E4               [12] 2200 	clr	a
      002983 08               [12] 2201 	inc	r0
      002984 36               [12] 2202 	addc	a,@r0
      002985 FE               [12] 2203 	mov	r6,a
      002986 08               [12] 2204 	inc	r0
      002987 86 07            [24] 2205 	mov	ar7,@r0
      002989 8C 82            [24] 2206 	mov	dpl,r4
      00298B 8E 83            [24] 2207 	mov	dph,r6
      00298D 8F F0            [24] 2208 	mov	b,r7
      00298F 12 4C 95         [24] 2209 	lcall	__gptrget
      002992 FC               [12] 2210 	mov	r4,a
      002993 8C F0            [24] 2211 	mov	b,r4
      002995 ED               [12] 2212 	mov	a,r5
      002996 A4               [48] 2213 	mul	ab
      002997 FD               [12] 2214 	mov	r5,a
                                   2215 ;	vt100.c:291: uint8_t y = VT100_CURSOR_Y(t);
      002998 A8 08            [24] 2216 	mov	r0,_bp
      00299A 08               [12] 2217 	inc	r0
      00299B 86 82            [24] 2218 	mov	dpl,@r0
      00299D 08               [12] 2219 	inc	r0
      00299E 86 83            [24] 2220 	mov	dph,@r0
      0029A0 08               [12] 2221 	inc	r0
      0029A1 86 F0            [24] 2222 	mov	b,@r0
      0029A3 C0 05            [24] 2223 	push	ar5
      0029A5 12 22 3F         [24] 2224 	lcall	_VT100_CURSOR_Y
      0029A8 AE 82            [24] 2225 	mov	r6,dpl
      0029AA D0 05            [24] 2226 	pop	ar5
                                   2227 ;	vt100.c:293: vga_setFrontColor(t->front_color);
      0029AC A8 08            [24] 2228 	mov	r0,_bp
      0029AE 08               [12] 2229 	inc	r0
      0029AF 74 0A            [12] 2230 	mov	a,#0x0a
      0029B1 26               [12] 2231 	add	a,@r0
      0029B2 FB               [12] 2232 	mov	r3,a
      0029B3 E4               [12] 2233 	clr	a
      0029B4 08               [12] 2234 	inc	r0
      0029B5 36               [12] 2235 	addc	a,@r0
      0029B6 FC               [12] 2236 	mov	r4,a
      0029B7 08               [12] 2237 	inc	r0
      0029B8 86 07            [24] 2238 	mov	ar7,@r0
      0029BA 8B 82            [24] 2239 	mov	dpl,r3
      0029BC 8C 83            [24] 2240 	mov	dph,r4
      0029BE 8F F0            [24] 2241 	mov	b,r7
      0029C0 12 4C 95         [24] 2242 	lcall	__gptrget
      0029C3 F5 82            [12] 2243 	mov	dpl,a
      0029C5 C0 06            [24] 2244 	push	ar6
      0029C7 C0 05            [24] 2245 	push	ar5
      0029C9 12 20 CD         [24] 2246 	lcall	_vga_setFrontColor
                                   2247 ;	vt100.c:294: vga_setBackColor(t->back_color); 
      0029CC A8 08            [24] 2248 	mov	r0,_bp
      0029CE 08               [12] 2249 	inc	r0
      0029CF 74 09            [12] 2250 	mov	a,#0x09
      0029D1 26               [12] 2251 	add	a,@r0
      0029D2 FB               [12] 2252 	mov	r3,a
      0029D3 E4               [12] 2253 	clr	a
      0029D4 08               [12] 2254 	inc	r0
      0029D5 36               [12] 2255 	addc	a,@r0
      0029D6 FC               [12] 2256 	mov	r4,a
      0029D7 08               [12] 2257 	inc	r0
      0029D8 86 07            [24] 2258 	mov	ar7,@r0
      0029DA 8B 82            [24] 2259 	mov	dpl,r3
      0029DC 8C 83            [24] 2260 	mov	dph,r4
      0029DE 8F F0            [24] 2261 	mov	b,r7
      0029E0 12 4C 95         [24] 2262 	lcall	__gptrget
      0029E3 F5 82            [12] 2263 	mov	dpl,a
      0029E5 12 20 C1         [24] 2264 	lcall	_vga_setBackColor
      0029E8 D0 05            [24] 2265 	pop	ar5
      0029EA D0 06            [24] 2266 	pop	ar6
                                   2267 ;	vt100.c:295: vga_drawChar(x, y, ch);
      0029EC E5 08            [12] 2268 	mov	a,_bp
      0029EE 24 FD            [12] 2269 	add	a,#0xfd
      0029F0 F8               [12] 2270 	mov	r0,a
      0029F1 E6               [12] 2271 	mov	a,@r0
      0029F2 C0 E0            [24] 2272 	push	acc
      0029F4 C0 06            [24] 2273 	push	ar6
      0029F6 8D 82            [24] 2274 	mov	dpl,r5
      0029F8 12 20 63         [24] 2275 	lcall	_vga_drawChar
      0029FB 15 81            [12] 2276 	dec	sp
      0029FD 15 81            [12] 2277 	dec	sp
                                   2278 ;	vt100.c:298: _vt100_move(t, 1, 0); 
      0029FF E4               [12] 2279 	clr	a
      002A00 C0 E0            [24] 2280 	push	acc
      002A02 C0 E0            [24] 2281 	push	acc
      002A04 04               [12] 2282 	inc	a
      002A05 C0 E0            [24] 2283 	push	acc
      002A07 E4               [12] 2284 	clr	a
      002A08 C0 E0            [24] 2285 	push	acc
      002A0A A8 08            [24] 2286 	mov	r0,_bp
      002A0C 08               [12] 2287 	inc	r0
      002A0D 86 82            [24] 2288 	mov	dpl,@r0
      002A0F 08               [12] 2289 	inc	r0
      002A10 86 83            [24] 2290 	mov	dph,@r0
      002A12 08               [12] 2291 	inc	r0
      002A13 86 F0            [24] 2292 	mov	b,@r0
      002A15 12 26 07         [24] 2293 	lcall	__vt100_move
      002A18 E5 81            [12] 2294 	mov	a,sp
      002A1A 24 FC            [12] 2295 	add	a,#0xfc
      002A1C F5 81            [12] 2296 	mov	sp,a
                                   2297 ;	vt100.c:299: _vt100_drawCursor(t); 
      002A1E A8 08            [24] 2298 	mov	r0,_bp
      002A20 08               [12] 2299 	inc	r0
      002A21 86 82            [24] 2300 	mov	dpl,@r0
      002A23 08               [12] 2301 	inc	r0
      002A24 86 83            [24] 2302 	mov	dph,@r0
      002A26 08               [12] 2303 	inc	r0
      002A27 86 F0            [24] 2304 	mov	b,@r0
      002A29 12 28 AB         [24] 2305 	lcall	__vt100_drawCursor
      002A2C                       2306 00104$:
                                   2307 ;	vt100.c:300: }
      002A2C 85 08 81         [24] 2308 	mov	sp,_bp
      002A2F D0 08            [24] 2309 	pop	_bp
      002A31 22               [24] 2310 	ret
                                   2311 ;------------------------------------------------------------
                                   2312 ;Allocation info for local variables in function '_st_command_arg'
                                   2313 ;------------------------------------------------------------
                                   2314 ;ev                        Allocated to stack - _bp -3
                                   2315 ;arg                       Allocated to stack - _bp -4
                                   2316 ;term                      Allocated to stack - _bp +1
                                   2317 ;__2621440002              Allocated to registers 
                                   2318 ;__2621440003              Allocated to stack - _bp +6
                                   2319 ;c                         Allocated to registers 
                                   2320 ;sloc0                     Allocated to stack - _bp +10
                                   2321 ;sloc1                     Allocated to stack - _bp +4
                                   2322 ;------------------------------------------------------------
                                   2323 ;	vt100.c:302: STATE(_st_command_arg, term, ev, arg) {
                                   2324 ;	-----------------------------------------
                                   2325 ;	 function _st_command_arg
                                   2326 ;	-----------------------------------------
      002A32                       2327 __st_command_arg:
      002A32 C0 08            [24] 2328 	push	_bp
      002A34 85 81 08         [24] 2329 	mov	_bp,sp
      002A37 C0 82            [24] 2330 	push	dpl
      002A39 C0 83            [24] 2331 	push	dph
      002A3B C0 F0            [24] 2332 	push	b
      002A3D E5 81            [12] 2333 	mov	a,sp
      002A3F 24 04            [12] 2334 	add	a,#0x04
      002A41 F5 81            [12] 2335 	mov	sp,a
                                   2336 ;	vt100.c:303: switch(ev){
      002A43 E5 08            [12] 2337 	mov	a,_bp
      002A45 24 FD            [12] 2338 	add	a,#0xfd
      002A47 F8               [12] 2339 	mov	r0,a
      002A48 B6 01 02         [24] 2340 	cjne	@r0,#0x01,00137$
      002A4B 80 03            [24] 2341 	sjmp	00138$
      002A4D                       2342 00137$:
      002A4D 02 2C 06         [24] 2343 	ljmp	00113$
      002A50                       2344 00138$:
                                   2345 ;	vt100.c:305: if(isdigit(arg)){ // a digit argument
      002A50 E5 08            [12] 2346 	mov	a,_bp
      002A52 24 FC            [12] 2347 	add	a,#0xfc
      002A54 F8               [12] 2348 	mov	r0,a
      002A55 E5 08            [12] 2349 	mov	a,_bp
      002A57 24 06            [12] 2350 	add	a,#0x06
      002A59 F9               [12] 2351 	mov	r1,a
      002A5A E6               [12] 2352 	mov	a,@r0
      002A5B F7               [12] 2353 	mov	@r1,a
      002A5C 09               [12] 2354 	inc	r1
      002A5D 77 00            [12] 2355 	mov	@r1,#0x00
      002A5F E5 08            [12] 2356 	mov	a,_bp
      002A61 24 06            [12] 2357 	add	a,#0x06
      002A63 F8               [12] 2358 	mov	r0,a
      002A64 86 02            [24] 2359 	mov	ar2,@r0
      002A66 08               [12] 2360 	inc	r0
      002A67 86 07            [24] 2361 	mov	ar7,@r0
                                   2362 ;	c:\program files\sdcc\include\ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      002A69 BA 30 00         [24] 2363 	cjne	r2,#0x30,00139$
      002A6C                       2364 00139$:
      002A6C 92 00            [24] 2365 	mov	b0,c
      002A6E 50 03            [24] 2366 	jnc	00140$
      002A70 02 2B 09         [24] 2367 	ljmp	00109$
      002A73                       2368 00140$:
      002A73 EA               [12] 2369 	mov	a,r2
      002A74 24 C6            [12] 2370 	add	a,#0xff - 0x39
      002A76 92 00            [24] 2371 	mov	b0,c
      002A78 50 03            [24] 2372 	jnc	00141$
      002A7A 02 2B 09         [24] 2373 	ljmp	00109$
      002A7D                       2374 00141$:
                                   2375 ;	vt100.c:306: term->args[term->narg] = term->args[term->narg] * 10 + (arg - '0');
      002A7D A8 08            [24] 2376 	mov	r0,_bp
      002A7F 08               [12] 2377 	inc	r0
      002A80 74 0D            [12] 2378 	mov	a,#0x0d
      002A82 26               [12] 2379 	add	a,@r0
      002A83 FA               [12] 2380 	mov	r2,a
      002A84 E4               [12] 2381 	clr	a
      002A85 08               [12] 2382 	inc	r0
      002A86 36               [12] 2383 	addc	a,@r0
      002A87 FB               [12] 2384 	mov	r3,a
      002A88 08               [12] 2385 	inc	r0
      002A89 86 04            [24] 2386 	mov	ar4,@r0
      002A8B A8 08            [24] 2387 	mov	r0,_bp
      002A8D 08               [12] 2388 	inc	r0
      002A8E 74 0C            [12] 2389 	mov	a,#0x0c
      002A90 26               [12] 2390 	add	a,@r0
      002A91 FD               [12] 2391 	mov	r5,a
      002A92 E4               [12] 2392 	clr	a
      002A93 08               [12] 2393 	inc	r0
      002A94 36               [12] 2394 	addc	a,@r0
      002A95 FE               [12] 2395 	mov	r6,a
      002A96 08               [12] 2396 	inc	r0
      002A97 86 07            [24] 2397 	mov	ar7,@r0
      002A99 8D 82            [24] 2398 	mov	dpl,r5
      002A9B 8E 83            [24] 2399 	mov	dph,r6
      002A9D 8F F0            [24] 2400 	mov	b,r7
      002A9F 12 4C 95         [24] 2401 	lcall	__gptrget
      002AA2 25 E0            [12] 2402 	add	a,acc
      002AA4 2A               [12] 2403 	add	a,r2
      002AA5 FA               [12] 2404 	mov	r2,a
      002AA6 E4               [12] 2405 	clr	a
      002AA7 3B               [12] 2406 	addc	a,r3
      002AA8 FB               [12] 2407 	mov	r3,a
      002AA9 8A 82            [24] 2408 	mov	dpl,r2
      002AAB 8B 83            [24] 2409 	mov	dph,r3
      002AAD 8C F0            [24] 2410 	mov	b,r4
      002AAF 12 4C 95         [24] 2411 	lcall	__gptrget
      002AB2 FE               [12] 2412 	mov	r6,a
      002AB3 A3               [24] 2413 	inc	dptr
      002AB4 12 4C 95         [24] 2414 	lcall	__gptrget
      002AB7 FF               [12] 2415 	mov	r7,a
      002AB8 C0 04            [24] 2416 	push	ar4
      002ABA C0 03            [24] 2417 	push	ar3
      002ABC C0 02            [24] 2418 	push	ar2
      002ABE C0 06            [24] 2419 	push	ar6
      002AC0 C0 07            [24] 2420 	push	ar7
      002AC2 90 00 0A         [24] 2421 	mov	dptr,#0x000a
      002AC5 12 4C 73         [24] 2422 	lcall	__mulint
      002AC8 C8               [12] 2423 	xch	a,r0
      002AC9 E5 08            [12] 2424 	mov	a,_bp
      002ACB 24 04            [12] 2425 	add	a,#0x04
      002ACD C8               [12] 2426 	xch	a,r0
      002ACE A6 82            [24] 2427 	mov	@r0,dpl
      002AD0 08               [12] 2428 	inc	r0
      002AD1 A6 83            [24] 2429 	mov	@r0,dph
      002AD3 15 81            [12] 2430 	dec	sp
      002AD5 15 81            [12] 2431 	dec	sp
      002AD7 D0 02            [24] 2432 	pop	ar2
      002AD9 D0 03            [24] 2433 	pop	ar3
      002ADB D0 04            [24] 2434 	pop	ar4
      002ADD E5 08            [12] 2435 	mov	a,_bp
      002ADF 24 06            [12] 2436 	add	a,#0x06
      002AE1 F8               [12] 2437 	mov	r0,a
      002AE2 E6               [12] 2438 	mov	a,@r0
      002AE3 24 D0            [12] 2439 	add	a,#0xd0
      002AE5 FD               [12] 2440 	mov	r5,a
      002AE6 08               [12] 2441 	inc	r0
      002AE7 E6               [12] 2442 	mov	a,@r0
      002AE8 34 FF            [12] 2443 	addc	a,#0xff
      002AEA FF               [12] 2444 	mov	r7,a
      002AEB E5 08            [12] 2445 	mov	a,_bp
      002AED 24 04            [12] 2446 	add	a,#0x04
      002AEF F8               [12] 2447 	mov	r0,a
      002AF0 ED               [12] 2448 	mov	a,r5
      002AF1 26               [12] 2449 	add	a,@r0
      002AF2 FD               [12] 2450 	mov	r5,a
      002AF3 EF               [12] 2451 	mov	a,r7
      002AF4 08               [12] 2452 	inc	r0
      002AF5 36               [12] 2453 	addc	a,@r0
      002AF6 FF               [12] 2454 	mov	r7,a
      002AF7 8A 82            [24] 2455 	mov	dpl,r2
      002AF9 8B 83            [24] 2456 	mov	dph,r3
      002AFB 8C F0            [24] 2457 	mov	b,r4
      002AFD ED               [12] 2458 	mov	a,r5
      002AFE 12 4C 58         [24] 2459 	lcall	__gptrput
      002B01 A3               [24] 2460 	inc	dptr
      002B02 EF               [12] 2461 	mov	a,r7
      002B03 12 4C 58         [24] 2462 	lcall	__gptrput
      002B06 02 2C 06         [24] 2463 	ljmp	00113$
      002B09                       2464 00109$:
                                   2465 ;	vt100.c:307: } else if(arg == ';') { // separator
      002B09 E5 08            [12] 2466 	mov	a,_bp
      002B0B 24 FC            [12] 2467 	add	a,#0xfc
      002B0D F8               [12] 2468 	mov	r0,a
      002B0E B6 3B 26         [24] 2469 	cjne	@r0,#0x3b,00106$
                                   2470 ;	vt100.c:308: term->narg++;
      002B11 A8 08            [24] 2471 	mov	r0,_bp
      002B13 08               [12] 2472 	inc	r0
      002B14 74 0C            [12] 2473 	mov	a,#0x0c
      002B16 26               [12] 2474 	add	a,@r0
      002B17 FD               [12] 2475 	mov	r5,a
      002B18 E4               [12] 2476 	clr	a
      002B19 08               [12] 2477 	inc	r0
      002B1A 36               [12] 2478 	addc	a,@r0
      002B1B FE               [12] 2479 	mov	r6,a
      002B1C 08               [12] 2480 	inc	r0
      002B1D 86 07            [24] 2481 	mov	ar7,@r0
      002B1F 8D 82            [24] 2482 	mov	dpl,r5
      002B21 8E 83            [24] 2483 	mov	dph,r6
      002B23 8F F0            [24] 2484 	mov	b,r7
      002B25 12 4C 95         [24] 2485 	lcall	__gptrget
      002B28 FC               [12] 2486 	mov	r4,a
      002B29 0C               [12] 2487 	inc	r4
      002B2A 8D 82            [24] 2488 	mov	dpl,r5
      002B2C 8E 83            [24] 2489 	mov	dph,r6
      002B2E 8F F0            [24] 2490 	mov	b,r7
      002B30 EC               [12] 2491 	mov	a,r4
      002B31 12 4C 58         [24] 2492 	lcall	__gptrput
      002B34 02 2C 06         [24] 2493 	ljmp	00113$
      002B37                       2494 00106$:
                                   2495 ;	vt100.c:311: term->narg++;
      002B37 A8 08            [24] 2496 	mov	r0,_bp
      002B39 08               [12] 2497 	inc	r0
      002B3A 74 0C            [12] 2498 	mov	a,#0x0c
      002B3C 26               [12] 2499 	add	a,@r0
      002B3D FD               [12] 2500 	mov	r5,a
      002B3E E4               [12] 2501 	clr	a
      002B3F 08               [12] 2502 	inc	r0
      002B40 36               [12] 2503 	addc	a,@r0
      002B41 FE               [12] 2504 	mov	r6,a
      002B42 08               [12] 2505 	inc	r0
      002B43 86 07            [24] 2506 	mov	ar7,@r0
      002B45 8D 82            [24] 2507 	mov	dpl,r5
      002B47 8E 83            [24] 2508 	mov	dph,r6
      002B49 8F F0            [24] 2509 	mov	b,r7
      002B4B 12 4C 95         [24] 2510 	lcall	__gptrget
      002B4E FC               [12] 2511 	mov	r4,a
      002B4F 0C               [12] 2512 	inc	r4
      002B50 8D 82            [24] 2513 	mov	dpl,r5
      002B52 8E 83            [24] 2514 	mov	dph,r6
      002B54 8F F0            [24] 2515 	mov	b,r7
      002B56 EC               [12] 2516 	mov	a,r4
      002B57 12 4C 58         [24] 2517 	lcall	__gptrput
                                   2518 ;	vt100.c:312: if(term->ret_state){
      002B5A A8 08            [24] 2519 	mov	r0,_bp
      002B5C 08               [12] 2520 	inc	r0
      002B5D 74 1A            [12] 2521 	mov	a,#0x1a
      002B5F 26               [12] 2522 	add	a,@r0
      002B60 FE               [12] 2523 	mov	r6,a
      002B61 E4               [12] 2524 	clr	a
      002B62 08               [12] 2525 	inc	r0
      002B63 36               [12] 2526 	addc	a,@r0
      002B64 FD               [12] 2527 	mov	r5,a
      002B65 08               [12] 2528 	inc	r0
      002B66 86 07            [24] 2529 	mov	ar7,@r0
      002B68 8E 82            [24] 2530 	mov	dpl,r6
      002B6A 8D 83            [24] 2531 	mov	dph,r5
      002B6C 8F F0            [24] 2532 	mov	b,r7
      002B6E 12 4C 95         [24] 2533 	lcall	__gptrget
      002B71 FE               [12] 2534 	mov	r6,a
      002B72 A3               [24] 2535 	inc	dptr
      002B73 12 4C 95         [24] 2536 	lcall	__gptrget
      002B76 FF               [12] 2537 	mov	r7,a
      002B77 4E               [12] 2538 	orl	a,r6
      002B78 60 1F            [24] 2539 	jz	00103$
                                   2540 ;	vt100.c:313: term->state = term->ret_state;
      002B7A A8 08            [24] 2541 	mov	r0,_bp
      002B7C 08               [12] 2542 	inc	r0
      002B7D 74 16            [12] 2543 	mov	a,#0x16
      002B7F 26               [12] 2544 	add	a,@r0
      002B80 FB               [12] 2545 	mov	r3,a
      002B81 E4               [12] 2546 	clr	a
      002B82 08               [12] 2547 	inc	r0
      002B83 36               [12] 2548 	addc	a,@r0
      002B84 FC               [12] 2549 	mov	r4,a
      002B85 08               [12] 2550 	inc	r0
      002B86 86 05            [24] 2551 	mov	ar5,@r0
      002B88 8B 82            [24] 2552 	mov	dpl,r3
      002B8A 8C 83            [24] 2553 	mov	dph,r4
      002B8C 8D F0            [24] 2554 	mov	b,r5
      002B8E EE               [12] 2555 	mov	a,r6
      002B8F 12 4C 58         [24] 2556 	lcall	__gptrput
      002B92 A3               [24] 2557 	inc	dptr
      002B93 EF               [12] 2558 	mov	a,r7
      002B94 12 4C 58         [24] 2559 	lcall	__gptrput
      002B97 80 1F            [24] 2560 	sjmp	00104$
      002B99                       2561 00103$:
                                   2562 ;	vt100.c:316: term->state = _st_idle;
      002B99 A8 08            [24] 2563 	mov	r0,_bp
      002B9B 08               [12] 2564 	inc	r0
      002B9C 74 16            [12] 2565 	mov	a,#0x16
      002B9E 26               [12] 2566 	add	a,@r0
      002B9F FD               [12] 2567 	mov	r5,a
      002BA0 E4               [12] 2568 	clr	a
      002BA1 08               [12] 2569 	inc	r0
      002BA2 36               [12] 2570 	addc	a,@r0
      002BA3 FE               [12] 2571 	mov	r6,a
      002BA4 08               [12] 2572 	inc	r0
      002BA5 86 07            [24] 2573 	mov	ar7,@r0
      002BA7 8D 82            [24] 2574 	mov	dpl,r5
      002BA9 8E 83            [24] 2575 	mov	dph,r6
      002BAB 8F F0            [24] 2576 	mov	b,r7
      002BAD 74 85            [12] 2577 	mov	a,#__st_idle
      002BAF 12 4C 58         [24] 2578 	lcall	__gptrput
      002BB2 A3               [24] 2579 	inc	dptr
      002BB3 74 44            [12] 2580 	mov	a,#(__st_idle >> 8)
      002BB5 12 4C 58         [24] 2581 	lcall	__gptrput
      002BB8                       2582 00104$:
                                   2583 ;	vt100.c:319: term->state(term, ev, arg);
      002BB8 A8 08            [24] 2584 	mov	r0,_bp
      002BBA 08               [12] 2585 	inc	r0
      002BBB 74 16            [12] 2586 	mov	a,#0x16
      002BBD 26               [12] 2587 	add	a,@r0
      002BBE FD               [12] 2588 	mov	r5,a
      002BBF E4               [12] 2589 	clr	a
      002BC0 08               [12] 2590 	inc	r0
      002BC1 36               [12] 2591 	addc	a,@r0
      002BC2 FE               [12] 2592 	mov	r6,a
      002BC3 08               [12] 2593 	inc	r0
      002BC4 86 07            [24] 2594 	mov	ar7,@r0
      002BC6 8D 82            [24] 2595 	mov	dpl,r5
      002BC8 8E 83            [24] 2596 	mov	dph,r6
      002BCA 8F F0            [24] 2597 	mov	b,r7
      002BCC 12 4C 95         [24] 2598 	lcall	__gptrget
      002BCF FD               [12] 2599 	mov	r5,a
      002BD0 A3               [24] 2600 	inc	dptr
      002BD1 12 4C 95         [24] 2601 	lcall	__gptrget
      002BD4 FE               [12] 2602 	mov	r6,a
      002BD5 C0 06            [24] 2603 	push	ar6
      002BD7 C0 05            [24] 2604 	push	ar5
      002BD9 E5 08            [12] 2605 	mov	a,_bp
      002BDB 24 FC            [12] 2606 	add	a,#0xfc
      002BDD F8               [12] 2607 	mov	r0,a
      002BDE E6               [12] 2608 	mov	a,@r0
      002BDF C0 E0            [24] 2609 	push	acc
      002BE1 E5 08            [12] 2610 	mov	a,_bp
      002BE3 24 FD            [12] 2611 	add	a,#0xfd
      002BE5 F8               [12] 2612 	mov	r0,a
      002BE6 E6               [12] 2613 	mov	a,@r0
      002BE7 C0 E0            [24] 2614 	push	acc
      002BE9 12 2B EE         [24] 2615 	lcall	00145$
      002BEC 80 10            [24] 2616 	sjmp	00146$
      002BEE                       2617 00145$:
      002BEE C0 05            [24] 2618 	push	ar5
      002BF0 C0 06            [24] 2619 	push	ar6
      002BF2 A8 08            [24] 2620 	mov	r0,_bp
      002BF4 08               [12] 2621 	inc	r0
      002BF5 86 82            [24] 2622 	mov	dpl,@r0
      002BF7 08               [12] 2623 	inc	r0
      002BF8 86 83            [24] 2624 	mov	dph,@r0
      002BFA 08               [12] 2625 	inc	r0
      002BFB 86 F0            [24] 2626 	mov	b,@r0
      002BFD 22               [24] 2627 	ret
      002BFE                       2628 00146$:
      002BFE 15 81            [12] 2629 	dec	sp
      002C00 15 81            [12] 2630 	dec	sp
      002C02 D0 05            [24] 2631 	pop	ar5
      002C04 D0 06            [24] 2632 	pop	ar6
                                   2633 ;	vt100.c:323: }
      002C06                       2634 00113$:
                                   2635 ;	vt100.c:324: }
      002C06 85 08 81         [24] 2636 	mov	sp,_bp
      002C09 D0 08            [24] 2637 	pop	_bp
      002C0B 22               [24] 2638 	ret
                                   2639 ;------------------------------------------------------------
                                   2640 ;Allocation info for local variables in function '_st_esc_question'
                                   2641 ;------------------------------------------------------------
                                   2642 ;ev                        Allocated to stack - _bp -3
                                   2643 ;arg                       Allocated to stack - _bp -4
                                   2644 ;term                      Allocated to registers r5 r6 r7 
                                   2645 ;__2621440005              Allocated to registers 
                                   2646 ;__2621440006              Allocated to registers 
                                   2647 ;c                         Allocated to registers 
                                   2648 ;sloc0                     Allocated to stack - _bp +10
                                   2649 ;sloc1                     Allocated to stack - _bp +1
                                   2650 ;------------------------------------------------------------
                                   2651 ;	vt100.c:326: STATE(_st_esc_question, term, ev, arg) {
                                   2652 ;	-----------------------------------------
                                   2653 ;	 function _st_esc_question
                                   2654 ;	-----------------------------------------
      002C0C                       2655 __st_esc_question:
      002C0C C0 08            [24] 2656 	push	_bp
      002C0E 85 81 08         [24] 2657 	mov	_bp,sp
      002C11 05 81            [12] 2658 	inc	sp
      002C13 05 81            [12] 2659 	inc	sp
      002C15 05 81            [12] 2660 	inc	sp
      002C17 AD 82            [24] 2661 	mov	r5,dpl
      002C19 AE 83            [24] 2662 	mov	r6,dph
      002C1B AF F0            [24] 2663 	mov	r7,b
                                   2664 ;	vt100.c:329: switch(ev){
      002C1D E5 08            [12] 2665 	mov	a,_bp
      002C1F 24 FD            [12] 2666 	add	a,#0xfd
      002C21 F8               [12] 2667 	mov	r0,a
      002C22 B6 01 02         [24] 2668 	cjne	@r0,#0x01,00172$
      002C25 80 03            [24] 2669 	sjmp	00173$
      002C27                       2670 00172$:
      002C27 02 2D DB         [24] 2671 	ljmp	00126$
      002C2A                       2672 00173$:
                                   2673 ;	vt100.c:331: if(isdigit(arg)){ // start of an argument
      002C2A E5 08            [12] 2674 	mov	a,_bp
      002C2C 24 FC            [12] 2675 	add	a,#0xfc
      002C2E F8               [12] 2676 	mov	r0,a
      002C2F 86 04            [24] 2677 	mov	ar4,@r0
                                   2678 ;	c:\program files\sdcc\include\ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      002C31 BC 30 00         [24] 2679 	cjne	r4,#0x30,00174$
      002C34                       2680 00174$:
      002C34 92 00            [24] 2681 	mov	b0,c
      002C36 40 67            [24] 2682 	jc	00122$
      002C38 EC               [12] 2683 	mov	a,r4
      002C39 24 C6            [12] 2684 	add	a,#0xff - 0x39
      002C3B 92 00            [24] 2685 	mov	b0,c
      002C3D 40 60            [24] 2686 	jc	00122$
                                   2687 ;	vt100.c:332: term->ret_state = _st_esc_question; 
      002C3F 74 1A            [12] 2688 	mov	a,#0x1a
      002C41 2D               [12] 2689 	add	a,r5
      002C42 FA               [12] 2690 	mov	r2,a
      002C43 E4               [12] 2691 	clr	a
      002C44 3E               [12] 2692 	addc	a,r6
      002C45 FB               [12] 2693 	mov	r3,a
      002C46 8F 04            [24] 2694 	mov	ar4,r7
      002C48 8A 82            [24] 2695 	mov	dpl,r2
      002C4A 8B 83            [24] 2696 	mov	dph,r3
      002C4C 8C F0            [24] 2697 	mov	b,r4
      002C4E 74 0C            [12] 2698 	mov	a,#__st_esc_question
      002C50 12 4C 58         [24] 2699 	lcall	__gptrput
      002C53 A3               [24] 2700 	inc	dptr
      002C54 74 2C            [12] 2701 	mov	a,#(__st_esc_question >> 8)
      002C56 12 4C 58         [24] 2702 	lcall	__gptrput
                                   2703 ;	vt100.c:333: _st_command_arg(term, ev, arg);
      002C59 C0 07            [24] 2704 	push	ar7
      002C5B C0 06            [24] 2705 	push	ar6
      002C5D C0 05            [24] 2706 	push	ar5
      002C5F E5 08            [12] 2707 	mov	a,_bp
      002C61 24 FC            [12] 2708 	add	a,#0xfc
      002C63 F8               [12] 2709 	mov	r0,a
      002C64 E6               [12] 2710 	mov	a,@r0
      002C65 C0 E0            [24] 2711 	push	acc
      002C67 E5 08            [12] 2712 	mov	a,_bp
      002C69 24 FD            [12] 2713 	add	a,#0xfd
      002C6B F8               [12] 2714 	mov	r0,a
      002C6C E6               [12] 2715 	mov	a,@r0
      002C6D C0 E0            [24] 2716 	push	acc
      002C6F 8D 82            [24] 2717 	mov	dpl,r5
      002C71 8E 83            [24] 2718 	mov	dph,r6
      002C73 8F F0            [24] 2719 	mov	b,r7
      002C75 12 2A 32         [24] 2720 	lcall	__st_command_arg
      002C78 15 81            [12] 2721 	dec	sp
      002C7A 15 81            [12] 2722 	dec	sp
      002C7C D0 05            [24] 2723 	pop	ar5
      002C7E D0 06            [24] 2724 	pop	ar6
      002C80 D0 07            [24] 2725 	pop	ar7
                                   2726 ;	vt100.c:334: term->state = _st_command_arg;
      002C82 74 16            [12] 2727 	mov	a,#0x16
      002C84 2D               [12] 2728 	add	a,r5
      002C85 FA               [12] 2729 	mov	r2,a
      002C86 E4               [12] 2730 	clr	a
      002C87 3E               [12] 2731 	addc	a,r6
      002C88 FB               [12] 2732 	mov	r3,a
      002C89 8F 04            [24] 2733 	mov	ar4,r7
      002C8B 8A 82            [24] 2734 	mov	dpl,r2
      002C8D 8B 83            [24] 2735 	mov	dph,r3
      002C8F 8C F0            [24] 2736 	mov	b,r4
      002C91 74 32            [12] 2737 	mov	a,#__st_command_arg
      002C93 12 4C 58         [24] 2738 	lcall	__gptrput
      002C96 A3               [24] 2739 	inc	dptr
      002C97 74 2A            [12] 2740 	mov	a,#(__st_command_arg >> 8)
      002C99 12 4C 58         [24] 2741 	lcall	__gptrput
      002C9C 02 2D DB         [24] 2742 	ljmp	00126$
      002C9F                       2743 00122$:
                                   2744 ;	vt100.c:335: } else if(arg == ';'){ // arg separator. 
      002C9F E5 08            [12] 2745 	mov	a,_bp
      002CA1 24 FC            [12] 2746 	add	a,#0xfc
      002CA3 F8               [12] 2747 	mov	r0,a
      002CA4 B6 3B 03         [24] 2748 	cjne	@r0,#0x3b,00177$
      002CA7 02 2D DB         [24] 2749 	ljmp	00126$
      002CAA                       2750 00177$:
                                   2751 ;	vt100.c:338: switch(arg) {
      002CAA E5 08            [12] 2752 	mov	a,_bp
      002CAC 24 FC            [12] 2753 	add	a,#0xfc
      002CAE F8               [12] 2754 	mov	r0,a
      002CAF E4               [12] 2755 	clr	a
      002CB0 B6 68 01         [24] 2756 	cjne	@r0,#0x68,00178$
      002CB3 04               [12] 2757 	inc	a
      002CB4                       2758 00178$:
      002CB4 FC               [12] 2759 	mov	r4,a
      002CB5 70 18            [24] 2760 	jnz	00103$
      002CB7 E5 08            [12] 2761 	mov	a,_bp
      002CB9 24 FC            [12] 2762 	add	a,#0xfc
      002CBB F8               [12] 2763 	mov	r0,a
      002CBC B6 69 03         [24] 2764 	cjne	@r0,#0x69,00181$
      002CBF 02 2D A9         [24] 2765 	ljmp	00116$
      002CC2                       2766 00181$:
      002CC2 E5 08            [12] 2767 	mov	a,_bp
      002CC4 24 FC            [12] 2768 	add	a,#0xfc
      002CC6 F8               [12] 2769 	mov	r0,a
      002CC7 B6 6C 02         [24] 2770 	cjne	@r0,#0x6c,00182$
      002CCA 80 03            [24] 2771 	sjmp	00183$
      002CCC                       2772 00182$:
      002CCC 02 2D A9         [24] 2773 	ljmp	00116$
      002CCF                       2774 00183$:
                                   2775 ;	vt100.c:341: case 'h': {
      002CCF                       2776 00103$:
                                   2777 ;	vt100.c:343: switch(term->args[0]){
      002CCF C0 04            [24] 2778 	push	ar4
      002CD1 74 0D            [12] 2779 	mov	a,#0x0d
      002CD3 2D               [12] 2780 	add	a,r5
      002CD4 FA               [12] 2781 	mov	r2,a
      002CD5 E4               [12] 2782 	clr	a
      002CD6 3E               [12] 2783 	addc	a,r6
      002CD7 FB               [12] 2784 	mov	r3,a
      002CD8 8F 04            [24] 2785 	mov	ar4,r7
      002CDA 8A 82            [24] 2786 	mov	dpl,r2
      002CDC 8B 83            [24] 2787 	mov	dph,r3
      002CDE 8C F0            [24] 2788 	mov	b,r4
      002CE0 12 4C 95         [24] 2789 	lcall	__gptrget
      002CE3 FA               [12] 2790 	mov	r2,a
      002CE4 A3               [24] 2791 	inc	dptr
      002CE5 12 4C 95         [24] 2792 	lcall	__gptrget
      002CE8 FB               [12] 2793 	mov	r3,a
      002CE9 C3               [12] 2794 	clr	c
      002CEA 74 09            [12] 2795 	mov	a,#0x09
      002CEC 9A               [12] 2796 	subb	a,r2
      002CED E4               [12] 2797 	clr	a
      002CEE 9B               [12] 2798 	subb	a,r3
      002CEF D0 04            [24] 2799 	pop	ar4
      002CF1 50 03            [24] 2800 	jnc	00184$
      002CF3 02 2D 8D         [24] 2801 	ljmp	00113$
      002CF6                       2802 00184$:
      002CF6 EA               [12] 2803 	mov	a,r2
      002CF7 24 0A            [12] 2804 	add	a,#(00185$-3-.)
      002CF9 83               [24] 2805 	movc	a,@a+pc
      002CFA F5 82            [12] 2806 	mov	dpl,a
      002CFC EA               [12] 2807 	mov	a,r2
      002CFD 24 0E            [12] 2808 	add	a,#(00186$-3-.)
      002CFF 83               [24] 2809 	movc	a,@a+pc
      002D00 F5 83            [12] 2810 	mov	dph,a
      002D02 E4               [12] 2811 	clr	a
      002D03 73               [24] 2812 	jmp	@a+dptr
      002D04                       2813 00185$:
      002D04 8D                    2814 	.db	00113$
      002D05 8D                    2815 	.db	00113$
      002D06 8D                    2816 	.db	00113$
      002D07 8D                    2817 	.db	00113$
      002D08 8D                    2818 	.db	00113$
      002D09 8D                    2819 	.db	00113$
      002D0A 18                    2820 	.db	00109$
      002D0B 55                    2821 	.db	00110$
      002D0C 8D                    2822 	.db	00113$
      002D0D 8D                    2823 	.db	00113$
      002D0E                       2824 00186$:
      002D0E 2D                    2825 	.db	00113$>>8
      002D0F 2D                    2826 	.db	00113$>>8
      002D10 2D                    2827 	.db	00113$>>8
      002D11 2D                    2828 	.db	00113$>>8
      002D12 2D                    2829 	.db	00113$>>8
      002D13 2D                    2830 	.db	00113$>>8
      002D14 2D                    2831 	.db	00109$>>8
      002D15 2D                    2832 	.db	00110$>>8
      002D16 2D                    2833 	.db	00113$>>8
      002D17 2D                    2834 	.db	00113$>>8
                                   2835 ;	vt100.c:369: case 6: {
      002D18                       2836 00109$:
                                   2837 ;	vt100.c:372: term->flags.origin_mode = (arg == 'h')?1:0; 
      002D18 A8 08            [24] 2838 	mov	r0,_bp
      002D1A 08               [12] 2839 	inc	r0
      002D1B A6 05            [24] 2840 	mov	@r0,ar5
      002D1D 08               [12] 2841 	inc	r0
      002D1E A6 06            [24] 2842 	mov	@r0,ar6
      002D20 08               [12] 2843 	inc	r0
      002D21 A6 07            [24] 2844 	mov	@r0,ar7
      002D23 EC               [12] 2845 	mov	a,r4
      002D24 60 06            [24] 2846 	jz	00131$
      002D26 7A 01            [12] 2847 	mov	r2,#0x01
      002D28 7B 00            [12] 2848 	mov	r3,#0x00
      002D2A 80 04            [24] 2849 	sjmp	00132$
      002D2C                       2850 00131$:
      002D2C 7A 00            [12] 2851 	mov	r2,#0x00
      002D2E 7B 00            [12] 2852 	mov	r3,#0x00
      002D30                       2853 00132$:
      002D30 A8 08            [24] 2854 	mov	r0,_bp
      002D32 08               [12] 2855 	inc	r0
      002D33 86 82            [24] 2856 	mov	dpl,@r0
      002D35 08               [12] 2857 	inc	r0
      002D36 86 83            [24] 2858 	mov	dph,@r0
      002D38 08               [12] 2859 	inc	r0
      002D39 86 F0            [24] 2860 	mov	b,@r0
      002D3B EA               [12] 2861 	mov	a,r2
      002D3C 2A               [12] 2862 	add	a,r2
      002D3D 25 E0            [12] 2863 	add	a,acc
      002D3F 54 04            [12] 2864 	anl	a,#0x04
      002D41 C0 F0            [24] 2865 	push	b
      002D43 C0 E0            [24] 2866 	push	acc
      002D45 12 4C 95         [24] 2867 	lcall	__gptrget
      002D48 D0 F0            [24] 2868 	pop	b
      002D4A 54 FB            [12] 2869 	anl	a,#0xfb
      002D4C 45 F0            [12] 2870 	orl	a,b
      002D4E D0 F0            [24] 2871 	pop	b
      002D50 12 4C 58         [24] 2872 	lcall	__gptrput
                                   2873 ;	vt100.c:373: break;
                                   2874 ;	vt100.c:375: case 7: {
      002D53 80 38            [24] 2875 	sjmp	00113$
      002D55                       2876 00110$:
                                   2877 ;	vt100.c:378: term->flags.cursor_wrap = (arg == 'h')?1:0; 
      002D55 A8 08            [24] 2878 	mov	r0,_bp
      002D57 08               [12] 2879 	inc	r0
      002D58 A6 05            [24] 2880 	mov	@r0,ar5
      002D5A 08               [12] 2881 	inc	r0
      002D5B A6 06            [24] 2882 	mov	@r0,ar6
      002D5D 08               [12] 2883 	inc	r0
      002D5E A6 07            [24] 2884 	mov	@r0,ar7
      002D60 EC               [12] 2885 	mov	a,r4
      002D61 60 06            [24] 2886 	jz	00133$
      002D63 7B 01            [12] 2887 	mov	r3,#0x01
      002D65 7C 00            [12] 2888 	mov	r4,#0x00
      002D67 80 04            [24] 2889 	sjmp	00134$
      002D69                       2890 00133$:
      002D69 7B 00            [12] 2891 	mov	r3,#0x00
      002D6B 7C 00            [12] 2892 	mov	r4,#0x00
      002D6D                       2893 00134$:
      002D6D A8 08            [24] 2894 	mov	r0,_bp
      002D6F 08               [12] 2895 	inc	r0
      002D70 86 82            [24] 2896 	mov	dpl,@r0
      002D72 08               [12] 2897 	inc	r0
      002D73 86 83            [24] 2898 	mov	dph,@r0
      002D75 08               [12] 2899 	inc	r0
      002D76 86 F0            [24] 2900 	mov	b,@r0
      002D78 EB               [12] 2901 	mov	a,r3
      002D79 54 01            [12] 2902 	anl	a,#0x01
      002D7B C0 F0            [24] 2903 	push	b
      002D7D C0 E0            [24] 2904 	push	acc
      002D7F 12 4C 95         [24] 2905 	lcall	__gptrget
      002D82 D0 F0            [24] 2906 	pop	b
      002D84 54 FE            [12] 2907 	anl	a,#0xfe
      002D86 45 F0            [12] 2908 	orl	a,b
      002D88 D0 F0            [24] 2909 	pop	b
      002D8A 12 4C 58         [24] 2910 	lcall	__gptrput
                                   2911 ;	vt100.c:392: }
      002D8D                       2912 00113$:
                                   2913 ;	vt100.c:393: term->state = _st_idle;
      002D8D 74 16            [12] 2914 	mov	a,#0x16
      002D8F 2D               [12] 2915 	add	a,r5
      002D90 FA               [12] 2916 	mov	r2,a
      002D91 E4               [12] 2917 	clr	a
      002D92 3E               [12] 2918 	addc	a,r6
      002D93 FB               [12] 2919 	mov	r3,a
      002D94 8F 04            [24] 2920 	mov	ar4,r7
      002D96 8A 82            [24] 2921 	mov	dpl,r2
      002D98 8B 83            [24] 2922 	mov	dph,r3
      002D9A 8C F0            [24] 2923 	mov	b,r4
      002D9C 74 85            [12] 2924 	mov	a,#__st_idle
      002D9E 12 4C 58         [24] 2925 	lcall	__gptrput
      002DA1 A3               [24] 2926 	inc	dptr
      002DA2 74 44            [12] 2927 	mov	a,#(__st_idle >> 8)
      002DA4 12 4C 58         [24] 2928 	lcall	__gptrput
                                   2929 ;	vt100.c:394: break; 
                                   2930 ;	vt100.c:398: default:  
      002DA7 80 1A            [24] 2931 	sjmp	00117$
      002DA9                       2932 00116$:
                                   2933 ;	vt100.c:399: term->state = _st_idle; 
      002DA9 74 16            [12] 2934 	mov	a,#0x16
      002DAB 2D               [12] 2935 	add	a,r5
      002DAC FA               [12] 2936 	mov	r2,a
      002DAD E4               [12] 2937 	clr	a
      002DAE 3E               [12] 2938 	addc	a,r6
      002DAF FB               [12] 2939 	mov	r3,a
      002DB0 8F 04            [24] 2940 	mov	ar4,r7
      002DB2 8A 82            [24] 2941 	mov	dpl,r2
      002DB4 8B 83            [24] 2942 	mov	dph,r3
      002DB6 8C F0            [24] 2943 	mov	b,r4
      002DB8 74 85            [12] 2944 	mov	a,#__st_idle
      002DBA 12 4C 58         [24] 2945 	lcall	__gptrput
      002DBD A3               [24] 2946 	inc	dptr
      002DBE 74 44            [12] 2947 	mov	a,#(__st_idle >> 8)
      002DC0 12 4C 58         [24] 2948 	lcall	__gptrput
                                   2949 ;	vt100.c:401: }
      002DC3                       2950 00117$:
                                   2951 ;	vt100.c:402: term->state = _st_idle;
      002DC3 74 16            [12] 2952 	mov	a,#0x16
      002DC5 2D               [12] 2953 	add	a,r5
      002DC6 FD               [12] 2954 	mov	r5,a
      002DC7 E4               [12] 2955 	clr	a
      002DC8 3E               [12] 2956 	addc	a,r6
      002DC9 FE               [12] 2957 	mov	r6,a
      002DCA 8D 82            [24] 2958 	mov	dpl,r5
      002DCC 8E 83            [24] 2959 	mov	dph,r6
      002DCE 8F F0            [24] 2960 	mov	b,r7
      002DD0 74 85            [12] 2961 	mov	a,#__st_idle
      002DD2 12 4C 58         [24] 2962 	lcall	__gptrput
      002DD5 A3               [24] 2963 	inc	dptr
      002DD6 74 44            [12] 2964 	mov	a,#(__st_idle >> 8)
      002DD8 12 4C 58         [24] 2965 	lcall	__gptrput
                                   2966 ;	vt100.c:405: }
      002DDB                       2967 00126$:
                                   2968 ;	vt100.c:406: }
      002DDB 85 08 81         [24] 2969 	mov	sp,_bp
      002DDE D0 08            [24] 2970 	pop	_bp
      002DE0 22               [24] 2971 	ret
                                   2972 ;------------------------------------------------------------
                                   2973 ;Allocation info for local variables in function '_st_esc_sq_bracket'
                                   2974 ;------------------------------------------------------------
                                   2975 ;ev                        Allocated to stack - _bp -3
                                   2976 ;arg                       Allocated to stack - _bp -4
                                   2977 ;term                      Allocated to stack - _bp +1
                                   2978 ;__2621440008              Allocated to registers 
                                   2979 ;__2621440009              Allocated to registers 
                                   2980 ;c                         Allocated to registers 
                                   2981 ;n                         Allocated to registers r6 r5 
                                   2982 ;n                         Allocated to registers r6 r5 
                                   2983 ;n                         Allocated to registers r6 r5 
                                   2984 ;n                         Allocated to registers r6 r5 
                                   2985 ;y                         Allocated to registers 
                                   2986 ;x                         Allocated to stack - _bp +12
                                   2987 ;y                         Allocated to stack - _bp +14
                                   2988 ;n                         Allocated to registers r6 r7 
                                   2989 ;c                         Allocated to registers r4 r5 
                                   2990 ;n                         Allocated to stack - _bp +12
                                   2991 ;top_margin                Allocated to registers r7 r6 
                                   2992 ;bottom_margin             Allocated to registers r2 r5 
                                   2993 ;sloc0                     Allocated to stack - _bp +4
                                   2994 ;sloc1                     Allocated to stack - _bp +7
                                   2995 ;sloc2                     Allocated to stack - _bp +9
                                   2996 ;------------------------------------------------------------
                                   2997 ;	vt100.c:408: STATE(_st_esc_sq_bracket, term, ev, arg) {
                                   2998 ;	-----------------------------------------
                                   2999 ;	 function _st_esc_sq_bracket
                                   3000 ;	-----------------------------------------
      002DE1                       3001 __st_esc_sq_bracket:
      002DE1 C0 08            [24] 3002 	push	_bp
      002DE3 85 81 08         [24] 3003 	mov	_bp,sp
      002DE6 C0 82            [24] 3004 	push	dpl
      002DE8 C0 83            [24] 3005 	push	dph
      002DEA C0 F0            [24] 3006 	push	b
      002DEC E5 81            [12] 3007 	mov	a,sp
      002DEE 24 0C            [12] 3008 	add	a,#0x0c
      002DF0 F5 81            [12] 3009 	mov	sp,a
                                   3010 ;	vt100.c:410: switch(ev){
      002DF2 E5 08            [12] 3011 	mov	a,_bp
      002DF4 24 FD            [12] 3012 	add	a,#0xfd
      002DF6 F8               [12] 3013 	mov	r0,a
      002DF7 B6 01 02         [24] 3014 	cjne	@r0,#0x01,00399$
      002DFA 80 03            [24] 3015 	sjmp	00400$
      002DFC                       3016 00399$:
      002DFC 02 3C C4         [24] 3017 	ljmp	00194$
      002DFF                       3018 00400$:
                                   3019 ;	vt100.c:412: if(isdigit(arg)){ // start of an argument
      002DFF E5 08            [12] 3020 	mov	a,_bp
      002E01 24 FC            [12] 3021 	add	a,#0xfc
      002E03 F8               [12] 3022 	mov	r0,a
      002E04 86 04            [24] 3023 	mov	ar4,@r0
                                   3024 ;	c:\program files\sdcc\include\ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      002E06 BC 30 00         [24] 3025 	cjne	r4,#0x30,00401$
      002E09                       3026 00401$:
      002E09 92 00            [24] 3027 	mov	b0,c
      002E0B 40 6A            [24] 3028 	jc	00192$
      002E0D EC               [12] 3029 	mov	a,r4
      002E0E 24 C6            [12] 3030 	add	a,#0xff - 0x39
      002E10 92 00            [24] 3031 	mov	b0,c
      002E12 40 63            [24] 3032 	jc	00192$
                                   3033 ;	vt100.c:413: term->ret_state = _st_esc_sq_bracket; 
      002E14 A8 08            [24] 3034 	mov	r0,_bp
      002E16 08               [12] 3035 	inc	r0
      002E17 74 1A            [12] 3036 	mov	a,#0x1a
      002E19 26               [12] 3037 	add	a,@r0
      002E1A FA               [12] 3038 	mov	r2,a
      002E1B E4               [12] 3039 	clr	a
      002E1C 08               [12] 3040 	inc	r0
      002E1D 36               [12] 3041 	addc	a,@r0
      002E1E FB               [12] 3042 	mov	r3,a
      002E1F 08               [12] 3043 	inc	r0
      002E20 86 04            [24] 3044 	mov	ar4,@r0
      002E22 8A 82            [24] 3045 	mov	dpl,r2
      002E24 8B 83            [24] 3046 	mov	dph,r3
      002E26 8C F0            [24] 3047 	mov	b,r4
      002E28 74 E1            [12] 3048 	mov	a,#__st_esc_sq_bracket
      002E2A 12 4C 58         [24] 3049 	lcall	__gptrput
      002E2D A3               [24] 3050 	inc	dptr
      002E2E 74 2D            [12] 3051 	mov	a,#(__st_esc_sq_bracket >> 8)
      002E30 12 4C 58         [24] 3052 	lcall	__gptrput
                                   3053 ;	vt100.c:414: _st_command_arg(term, ev, arg);
      002E33 E5 08            [12] 3054 	mov	a,_bp
      002E35 24 FC            [12] 3055 	add	a,#0xfc
      002E37 F8               [12] 3056 	mov	r0,a
      002E38 E6               [12] 3057 	mov	a,@r0
      002E39 C0 E0            [24] 3058 	push	acc
      002E3B E5 08            [12] 3059 	mov	a,_bp
      002E3D 24 FD            [12] 3060 	add	a,#0xfd
      002E3F F8               [12] 3061 	mov	r0,a
      002E40 E6               [12] 3062 	mov	a,@r0
      002E41 C0 E0            [24] 3063 	push	acc
      002E43 A8 08            [24] 3064 	mov	r0,_bp
      002E45 08               [12] 3065 	inc	r0
      002E46 86 82            [24] 3066 	mov	dpl,@r0
      002E48 08               [12] 3067 	inc	r0
      002E49 86 83            [24] 3068 	mov	dph,@r0
      002E4B 08               [12] 3069 	inc	r0
      002E4C 86 F0            [24] 3070 	mov	b,@r0
      002E4E 12 2A 32         [24] 3071 	lcall	__st_command_arg
      002E51 15 81            [12] 3072 	dec	sp
      002E53 15 81            [12] 3073 	dec	sp
                                   3074 ;	vt100.c:415: term->state = _st_command_arg;
      002E55 A8 08            [24] 3075 	mov	r0,_bp
      002E57 08               [12] 3076 	inc	r0
      002E58 74 16            [12] 3077 	mov	a,#0x16
      002E5A 26               [12] 3078 	add	a,@r0
      002E5B FA               [12] 3079 	mov	r2,a
      002E5C E4               [12] 3080 	clr	a
      002E5D 08               [12] 3081 	inc	r0
      002E5E 36               [12] 3082 	addc	a,@r0
      002E5F FB               [12] 3083 	mov	r3,a
      002E60 08               [12] 3084 	inc	r0
      002E61 86 04            [24] 3085 	mov	ar4,@r0
      002E63 8A 82            [24] 3086 	mov	dpl,r2
      002E65 8B 83            [24] 3087 	mov	dph,r3
      002E67 8C F0            [24] 3088 	mov	b,r4
      002E69 74 32            [12] 3089 	mov	a,#__st_command_arg
      002E6B 12 4C 58         [24] 3090 	lcall	__gptrput
      002E6E A3               [24] 3091 	inc	dptr
      002E6F 74 2A            [12] 3092 	mov	a,#(__st_command_arg >> 8)
      002E71 12 4C 58         [24] 3093 	lcall	__gptrput
      002E74 02 3C E3         [24] 3094 	ljmp	00200$
      002E77                       3095 00192$:
                                   3096 ;	vt100.c:416: } else if(arg == ';'){ // arg separator. 
      002E77 E5 08            [12] 3097 	mov	a,_bp
      002E79 24 FC            [12] 3098 	add	a,#0xfc
      002E7B F8               [12] 3099 	mov	r0,a
      002E7C B6 3B 03         [24] 3100 	cjne	@r0,#0x3b,00404$
      002E7F 02 3C E3         [24] 3101 	ljmp	00200$
      002E82                       3102 00404$:
                                   3103 ;	vt100.c:419: switch(arg){
      002E82 E5 08            [12] 3104 	mov	a,_bp
      002E84 24 FC            [12] 3105 	add	a,#0xfc
      002E86 F8               [12] 3106 	mov	r0,a
      002E87 B6 3D 00         [24] 3107 	cjne	@r0,#0x3d,00405$
      002E8A                       3108 00405$:
      002E8A 50 03            [24] 3109 	jnc	00406$
      002E8C 02 3C A3         [24] 3110 	ljmp	00186$
      002E8F                       3111 00406$:
      002E8F E5 08            [12] 3112 	mov	a,_bp
      002E91 24 FC            [12] 3113 	add	a,#0xfc
      002E93 F8               [12] 3114 	mov	r0,a
      002E94 E6               [12] 3115 	mov	a,@r0
      002E95 24 86            [12] 3116 	add	a,#0xff - 0x79
      002E97 50 03            [24] 3117 	jnc	00407$
      002E99 02 3C A3         [24] 3118 	ljmp	00186$
      002E9C                       3119 00407$:
      002E9C E5 08            [12] 3120 	mov	a,_bp
      002E9E 24 FC            [12] 3121 	add	a,#0xfc
      002EA0 F8               [12] 3122 	mov	r0,a
      002EA1 E6               [12] 3123 	mov	a,@r0
      002EA2 24 C3            [12] 3124 	add	a,#0xc3
      002EA4 FC               [12] 3125 	mov	r4,a
      002EA5 24 0A            [12] 3126 	add	a,#(00408$-3-.)
      002EA7 83               [24] 3127 	movc	a,@a+pc
      002EA8 F5 82            [12] 3128 	mov	dpl,a
      002EAA EC               [12] 3129 	mov	a,r4
      002EAB 24 41            [12] 3130 	add	a,#(00409$-3-.)
      002EAD 83               [24] 3131 	movc	a,@a+pc
      002EAE F5 83            [12] 3132 	mov	dph,a
      002EB0 E4               [12] 3133 	clr	a
      002EB1 73               [24] 3134 	jmp	@a+dptr
      002EB2                       3135 00408$:
      002EB2 61                    3136 	.db	00184$
      002EB3 A3                    3137 	.db	00186$
      002EB4 82                    3138 	.db	00185$
      002EB5 36                    3139 	.db	00176$
      002EB6 2C                    3140 	.db	00102$
      002EB7 BE                    3141 	.db	00105$
      002EB8 59                    3142 	.db	00108$
      002EB9 F4                    3143 	.db	00111$
      002EBA A3                    3144 	.db	00186$
      002EBB A3                    3145 	.db	00186$
      002EBC A3                    3146 	.db	00186$
      002EBD 86                    3147 	.db	00115$
      002EBE A3                    3148 	.db	00186$
      002EBF 59                    3149 	.db	00124$
      002EC0 B4                    3150 	.db	00137$
      002EC1 94                    3151 	.db	00151$
      002EC2 94                    3152 	.db	00151$
      002EC3 A3                    3153 	.db	00186$
      002EC4 A3                    3154 	.db	00186$
      002EC5 B6                    3155 	.db	00152$
      002EC6 A3                    3156 	.db	00186$
      002EC7 A3                    3157 	.db	00186$
      002EC8 A3                    3158 	.db	00186$
      002EC9 A3                    3159 	.db	00186$
      002ECA A3                    3160 	.db	00186$
      002ECB A3                    3161 	.db	00186$
      002ECC A3                    3162 	.db	00186$
      002ECD A3                    3163 	.db	00186$
      002ECE A3                    3164 	.db	00186$
      002ECF A3                    3165 	.db	00186$
      002ED0 A3                    3166 	.db	00186$
      002ED1 A3                    3167 	.db	00186$
      002ED2 A3                    3168 	.db	00186$
      002ED3 A3                    3169 	.db	00186$
      002ED4 A3                    3170 	.db	00186$
      002ED5 A3                    3171 	.db	00186$
      002ED6 A3                    3172 	.db	00186$
      002ED7 A3                    3173 	.db	00186$
      002ED8 7E                    3174 	.db	00154$
      002ED9 A3                    3175 	.db	00186$
      002EDA A3                    3176 	.db	00186$
      002EDB 86                    3177 	.db	00115$
      002EDC E2                    3178 	.db	00160$
      002EDD C0                    3179 	.db	00159$
      002EDE 61                    3180 	.db	00184$
      002EDF A3                    3181 	.db	00186$
      002EE0 A3                    3182 	.db	00186$
      002EE1 C0                    3183 	.db	00159$
      002EE2 04                    3184 	.db	00161$
      002EE3 A3                    3185 	.db	00186$
      002EE4 A3                    3186 	.db	00186$
      002EE5 A3                    3187 	.db	00186$
      002EE6 A3                    3188 	.db	00186$
      002EE7 58                    3189 	.db	00177$
      002EE8 C2                    3190 	.db	00156$
      002EE9 A3                    3191 	.db	00186$
      002EEA 41                    3192 	.db	00157$
      002EEB A3                    3193 	.db	00186$
      002EEC A3                    3194 	.db	00186$
      002EED A0                    3195 	.db	00155$
      002EEE 61                    3196 	.db	00184$
      002EEF                       3197 00409$:
      002EEF 3C                    3198 	.db	00184$>>8
      002EF0 3C                    3199 	.db	00186$>>8
      002EF1 3C                    3200 	.db	00185$>>8
      002EF2 3B                    3201 	.db	00176$>>8
      002EF3 2F                    3202 	.db	00102$>>8
      002EF4 2F                    3203 	.db	00105$>>8
      002EF5 30                    3204 	.db	00108$>>8
      002EF6 30                    3205 	.db	00111$>>8
      002EF7 3C                    3206 	.db	00186$>>8
      002EF8 3C                    3207 	.db	00186$>>8
      002EF9 3C                    3208 	.db	00186$>>8
      002EFA 31                    3209 	.db	00115$>>8
      002EFB 3C                    3210 	.db	00186$>>8
      002EFC 33                    3211 	.db	00124$>>8
      002EFD 34                    3212 	.db	00137$>>8
      002EFE 36                    3213 	.db	00151$>>8
      002EFF 36                    3214 	.db	00151$>>8
      002F00 3C                    3215 	.db	00186$>>8
      002F01 3C                    3216 	.db	00186$>>8
      002F02 36                    3217 	.db	00152$>>8
      002F03 3C                    3218 	.db	00186$>>8
      002F04 3C                    3219 	.db	00186$>>8
      002F05 3C                    3220 	.db	00186$>>8
      002F06 3C                    3221 	.db	00186$>>8
      002F07 3C                    3222 	.db	00186$>>8
      002F08 3C                    3223 	.db	00186$>>8
      002F09 3C                    3224 	.db	00186$>>8
      002F0A 3C                    3225 	.db	00186$>>8
      002F0B 3C                    3226 	.db	00186$>>8
      002F0C 3C                    3227 	.db	00186$>>8
      002F0D 3C                    3228 	.db	00186$>>8
      002F0E 3C                    3229 	.db	00186$>>8
      002F0F 3C                    3230 	.db	00186$>>8
      002F10 3C                    3231 	.db	00186$>>8
      002F11 3C                    3232 	.db	00186$>>8
      002F12 3C                    3233 	.db	00186$>>8
      002F13 3C                    3234 	.db	00186$>>8
      002F14 3C                    3235 	.db	00186$>>8
      002F15 37                    3236 	.db	00154$>>8
      002F16 3C                    3237 	.db	00186$>>8
      002F17 3C                    3238 	.db	00186$>>8
      002F18 31                    3239 	.db	00115$>>8
      002F19 38                    3240 	.db	00160$>>8
      002F1A 38                    3241 	.db	00159$>>8
      002F1B 3C                    3242 	.db	00184$>>8
      002F1C 3C                    3243 	.db	00186$>>8
      002F1D 3C                    3244 	.db	00186$>>8
      002F1E 38                    3245 	.db	00159$>>8
      002F1F 39                    3246 	.db	00161$>>8
      002F20 3C                    3247 	.db	00186$>>8
      002F21 3C                    3248 	.db	00186$>>8
      002F22 3C                    3249 	.db	00186$>>8
      002F23 3C                    3250 	.db	00186$>>8
      002F24 3B                    3251 	.db	00177$>>8
      002F25 37                    3252 	.db	00156$>>8
      002F26 3C                    3253 	.db	00186$>>8
      002F27 38                    3254 	.db	00157$>>8
      002F28 3C                    3255 	.db	00186$>>8
      002F29 3C                    3256 	.db	00186$>>8
      002F2A 37                    3257 	.db	00155$>>8
      002F2B 3C                    3258 	.db	00184$>>8
                                   3259 ;	vt100.c:420: case 'A': {// move cursor up (cursor stops at top margin)
      002F2C                       3260 00102$:
                                   3261 ;	vt100.c:421: int n = (term->narg > 0)?term->args[0]:1;
      002F2C A8 08            [24] 3262 	mov	r0,_bp
      002F2E 08               [12] 3263 	inc	r0
      002F2F 74 0C            [12] 3264 	mov	a,#0x0c
      002F31 26               [12] 3265 	add	a,@r0
      002F32 FA               [12] 3266 	mov	r2,a
      002F33 E4               [12] 3267 	clr	a
      002F34 08               [12] 3268 	inc	r0
      002F35 36               [12] 3269 	addc	a,@r0
      002F36 FB               [12] 3270 	mov	r3,a
      002F37 08               [12] 3271 	inc	r0
      002F38 86 04            [24] 3272 	mov	ar4,@r0
      002F3A 8A 82            [24] 3273 	mov	dpl,r2
      002F3C 8B 83            [24] 3274 	mov	dph,r3
      002F3E 8C F0            [24] 3275 	mov	b,r4
      002F40 12 4C 95         [24] 3276 	lcall	__gptrget
      002F43 60 1F            [24] 3277 	jz	00205$
      002F45 A8 08            [24] 3278 	mov	r0,_bp
      002F47 08               [12] 3279 	inc	r0
      002F48 74 0D            [12] 3280 	mov	a,#0x0d
      002F4A 26               [12] 3281 	add	a,@r0
      002F4B FB               [12] 3282 	mov	r3,a
      002F4C E4               [12] 3283 	clr	a
      002F4D 08               [12] 3284 	inc	r0
      002F4E 36               [12] 3285 	addc	a,@r0
      002F4F FA               [12] 3286 	mov	r2,a
      002F50 08               [12] 3287 	inc	r0
      002F51 86 04            [24] 3288 	mov	ar4,@r0
      002F53 8B 82            [24] 3289 	mov	dpl,r3
      002F55 8A 83            [24] 3290 	mov	dph,r2
      002F57 8C F0            [24] 3291 	mov	b,r4
      002F59 12 4C 95         [24] 3292 	lcall	__gptrget
      002F5C FB               [12] 3293 	mov	r3,a
      002F5D A3               [24] 3294 	inc	dptr
      002F5E 12 4C 95         [24] 3295 	lcall	__gptrget
      002F61 FC               [12] 3296 	mov	r4,a
      002F62 80 04            [24] 3297 	sjmp	00206$
      002F64                       3298 00205$:
      002F64 7B 01            [12] 3299 	mov	r3,#0x01
      002F66 7C 00            [12] 3300 	mov	r4,#0x00
      002F68                       3301 00206$:
      002F68 8B 06            [24] 3302 	mov	ar6,r3
      002F6A 8C 05            [24] 3303 	mov	ar5,r4
                                   3304 ;	vt100.c:422: term->cursor_y -= n;
      002F6C A8 08            [24] 3305 	mov	r0,_bp
      002F6E 08               [12] 3306 	inc	r0
      002F6F 74 02            [12] 3307 	mov	a,#0x02
      002F71 26               [12] 3308 	add	a,@r0
      002F72 FA               [12] 3309 	mov	r2,a
      002F73 E4               [12] 3310 	clr	a
      002F74 08               [12] 3311 	inc	r0
      002F75 36               [12] 3312 	addc	a,@r0
      002F76 FB               [12] 3313 	mov	r3,a
      002F77 08               [12] 3314 	inc	r0
      002F78 86 04            [24] 3315 	mov	ar4,@r0
      002F7A 8A 82            [24] 3316 	mov	dpl,r2
      002F7C 8B 83            [24] 3317 	mov	dph,r3
      002F7E 8C F0            [24] 3318 	mov	b,r4
      002F80 12 4C 95         [24] 3319 	lcall	__gptrget
      002F83 C3               [12] 3320 	clr	c
      002F84 9E               [12] 3321 	subb	a,r6
                                   3322 ;	vt100.c:423: if(term->cursor_y < 0) term->cursor_y = 0; 
      002F85 FF               [12] 3323 	mov	r7,a
      002F86 8A 82            [24] 3324 	mov	dpl,r2
      002F88 8B 83            [24] 3325 	mov	dph,r3
      002F8A 8C F0            [24] 3326 	mov	b,r4
      002F8C 12 4C 58         [24] 3327 	lcall	__gptrput
      002F8F 30 E7 0A         [24] 3328 	jnb	acc.7,00104$
      002F92 8A 82            [24] 3329 	mov	dpl,r2
      002F94 8B 83            [24] 3330 	mov	dph,r3
      002F96 8C F0            [24] 3331 	mov	b,r4
      002F98 E4               [12] 3332 	clr	a
      002F99 12 4C 58         [24] 3333 	lcall	__gptrput
      002F9C                       3334 00104$:
                                   3335 ;	vt100.c:424: term->state = _st_idle; 
      002F9C A8 08            [24] 3336 	mov	r0,_bp
      002F9E 08               [12] 3337 	inc	r0
      002F9F 74 16            [12] 3338 	mov	a,#0x16
      002FA1 26               [12] 3339 	add	a,@r0
      002FA2 FA               [12] 3340 	mov	r2,a
      002FA3 E4               [12] 3341 	clr	a
      002FA4 08               [12] 3342 	inc	r0
      002FA5 36               [12] 3343 	addc	a,@r0
      002FA6 FB               [12] 3344 	mov	r3,a
      002FA7 08               [12] 3345 	inc	r0
      002FA8 86 04            [24] 3346 	mov	ar4,@r0
      002FAA 8A 82            [24] 3347 	mov	dpl,r2
      002FAC 8B 83            [24] 3348 	mov	dph,r3
      002FAE 8C F0            [24] 3349 	mov	b,r4
      002FB0 74 85            [12] 3350 	mov	a,#__st_idle
      002FB2 12 4C 58         [24] 3351 	lcall	__gptrput
      002FB5 A3               [24] 3352 	inc	dptr
      002FB6 74 44            [12] 3353 	mov	a,#(__st_idle >> 8)
      002FB8 12 4C 58         [24] 3354 	lcall	__gptrput
                                   3355 ;	vt100.c:425: break;
      002FBB 02 3C E3         [24] 3356 	ljmp	00200$
                                   3357 ;	vt100.c:427: case 'B': { // cursor down (cursor stops at bottom margin)
      002FBE                       3358 00105$:
                                   3359 ;	vt100.c:428: int n = (term->narg > 0)?term->args[0]:1;
      002FBE A8 08            [24] 3360 	mov	r0,_bp
      002FC0 08               [12] 3361 	inc	r0
      002FC1 74 0C            [12] 3362 	mov	a,#0x0c
      002FC3 26               [12] 3363 	add	a,@r0
      002FC4 FA               [12] 3364 	mov	r2,a
      002FC5 E4               [12] 3365 	clr	a
      002FC6 08               [12] 3366 	inc	r0
      002FC7 36               [12] 3367 	addc	a,@r0
      002FC8 FB               [12] 3368 	mov	r3,a
      002FC9 08               [12] 3369 	inc	r0
      002FCA 86 04            [24] 3370 	mov	ar4,@r0
      002FCC 8A 82            [24] 3371 	mov	dpl,r2
      002FCE 8B 83            [24] 3372 	mov	dph,r3
      002FD0 8C F0            [24] 3373 	mov	b,r4
      002FD2 12 4C 95         [24] 3374 	lcall	__gptrget
      002FD5 60 1F            [24] 3375 	jz	00207$
      002FD7 A8 08            [24] 3376 	mov	r0,_bp
      002FD9 08               [12] 3377 	inc	r0
      002FDA 74 0D            [12] 3378 	mov	a,#0x0d
      002FDC 26               [12] 3379 	add	a,@r0
      002FDD FB               [12] 3380 	mov	r3,a
      002FDE E4               [12] 3381 	clr	a
      002FDF 08               [12] 3382 	inc	r0
      002FE0 36               [12] 3383 	addc	a,@r0
      002FE1 FA               [12] 3384 	mov	r2,a
      002FE2 08               [12] 3385 	inc	r0
      002FE3 86 04            [24] 3386 	mov	ar4,@r0
      002FE5 8B 82            [24] 3387 	mov	dpl,r3
      002FE7 8A 83            [24] 3388 	mov	dph,r2
      002FE9 8C F0            [24] 3389 	mov	b,r4
      002FEB 12 4C 95         [24] 3390 	lcall	__gptrget
      002FEE FB               [12] 3391 	mov	r3,a
      002FEF A3               [24] 3392 	inc	dptr
      002FF0 12 4C 95         [24] 3393 	lcall	__gptrget
      002FF3 FC               [12] 3394 	mov	r4,a
      002FF4 80 04            [24] 3395 	sjmp	00208$
      002FF6                       3396 00207$:
      002FF6 7B 01            [12] 3397 	mov	r3,#0x01
      002FF8 7C 00            [12] 3398 	mov	r4,#0x00
      002FFA                       3399 00208$:
      002FFA 8B 06            [24] 3400 	mov	ar6,r3
      002FFC 8C 05            [24] 3401 	mov	ar5,r4
                                   3402 ;	vt100.c:429: term->cursor_y += n;
      002FFE A8 08            [24] 3403 	mov	r0,_bp
      003000 08               [12] 3404 	inc	r0
      003001 74 02            [12] 3405 	mov	a,#0x02
      003003 26               [12] 3406 	add	a,@r0
      003004 FA               [12] 3407 	mov	r2,a
      003005 E4               [12] 3408 	clr	a
      003006 08               [12] 3409 	inc	r0
      003007 36               [12] 3410 	addc	a,@r0
      003008 FB               [12] 3411 	mov	r3,a
      003009 08               [12] 3412 	inc	r0
      00300A 86 04            [24] 3413 	mov	ar4,@r0
      00300C 8A 82            [24] 3414 	mov	dpl,r2
      00300E 8B 83            [24] 3415 	mov	dph,r3
      003010 8C F0            [24] 3416 	mov	b,r4
      003012 12 4C 95         [24] 3417 	lcall	__gptrget
      003015 2E               [12] 3418 	add	a,r6
      003016 FF               [12] 3419 	mov	r7,a
      003017 8A 82            [24] 3420 	mov	dpl,r2
      003019 8B 83            [24] 3421 	mov	dph,r3
      00301B 8C F0            [24] 3422 	mov	b,r4
      00301D 12 4C 58         [24] 3423 	lcall	__gptrput
                                   3424 ;	vt100.c:430: if(term->cursor_y > VT100_HEIGHT) term->cursor_y = VT100_HEIGHT; 
      003020 C3               [12] 3425 	clr	c
      003021 74 98            [12] 3426 	mov	a,#(0x18 ^ 0x80)
      003023 8F F0            [24] 3427 	mov	b,r7
      003025 63 F0 80         [24] 3428 	xrl	b,#0x80
      003028 95 F0            [12] 3429 	subb	a,b
      00302A 50 0B            [24] 3430 	jnc	00107$
      00302C 8A 82            [24] 3431 	mov	dpl,r2
      00302E 8B 83            [24] 3432 	mov	dph,r3
      003030 8C F0            [24] 3433 	mov	b,r4
      003032 74 18            [12] 3434 	mov	a,#0x18
      003034 12 4C 58         [24] 3435 	lcall	__gptrput
      003037                       3436 00107$:
                                   3437 ;	vt100.c:431: term->state = _st_idle; 
      003037 A8 08            [24] 3438 	mov	r0,_bp
      003039 08               [12] 3439 	inc	r0
      00303A 74 16            [12] 3440 	mov	a,#0x16
      00303C 26               [12] 3441 	add	a,@r0
      00303D FA               [12] 3442 	mov	r2,a
      00303E E4               [12] 3443 	clr	a
      00303F 08               [12] 3444 	inc	r0
      003040 36               [12] 3445 	addc	a,@r0
      003041 FB               [12] 3446 	mov	r3,a
      003042 08               [12] 3447 	inc	r0
      003043 86 04            [24] 3448 	mov	ar4,@r0
      003045 8A 82            [24] 3449 	mov	dpl,r2
      003047 8B 83            [24] 3450 	mov	dph,r3
      003049 8C F0            [24] 3451 	mov	b,r4
      00304B 74 85            [12] 3452 	mov	a,#__st_idle
      00304D 12 4C 58         [24] 3453 	lcall	__gptrput
      003050 A3               [24] 3454 	inc	dptr
      003051 74 44            [12] 3455 	mov	a,#(__st_idle >> 8)
      003053 12 4C 58         [24] 3456 	lcall	__gptrput
                                   3457 ;	vt100.c:432: break;
      003056 02 3C E3         [24] 3458 	ljmp	00200$
                                   3459 ;	vt100.c:434: case 'C': { // cursor right (cursor stops at right margin)
      003059                       3460 00108$:
                                   3461 ;	vt100.c:435: int n = (term->narg > 0)?term->args[0]:1;
      003059 A8 08            [24] 3462 	mov	r0,_bp
      00305B 08               [12] 3463 	inc	r0
      00305C 74 0C            [12] 3464 	mov	a,#0x0c
      00305E 26               [12] 3465 	add	a,@r0
      00305F FA               [12] 3466 	mov	r2,a
      003060 E4               [12] 3467 	clr	a
      003061 08               [12] 3468 	inc	r0
      003062 36               [12] 3469 	addc	a,@r0
      003063 FB               [12] 3470 	mov	r3,a
      003064 08               [12] 3471 	inc	r0
      003065 86 04            [24] 3472 	mov	ar4,@r0
      003067 8A 82            [24] 3473 	mov	dpl,r2
      003069 8B 83            [24] 3474 	mov	dph,r3
      00306B 8C F0            [24] 3475 	mov	b,r4
      00306D 12 4C 95         [24] 3476 	lcall	__gptrget
      003070 60 1F            [24] 3477 	jz	00209$
      003072 A8 08            [24] 3478 	mov	r0,_bp
      003074 08               [12] 3479 	inc	r0
      003075 74 0D            [12] 3480 	mov	a,#0x0d
      003077 26               [12] 3481 	add	a,@r0
      003078 FB               [12] 3482 	mov	r3,a
      003079 E4               [12] 3483 	clr	a
      00307A 08               [12] 3484 	inc	r0
      00307B 36               [12] 3485 	addc	a,@r0
      00307C FA               [12] 3486 	mov	r2,a
      00307D 08               [12] 3487 	inc	r0
      00307E 86 04            [24] 3488 	mov	ar4,@r0
      003080 8B 82            [24] 3489 	mov	dpl,r3
      003082 8A 83            [24] 3490 	mov	dph,r2
      003084 8C F0            [24] 3491 	mov	b,r4
      003086 12 4C 95         [24] 3492 	lcall	__gptrget
      003089 FB               [12] 3493 	mov	r3,a
      00308A A3               [24] 3494 	inc	dptr
      00308B 12 4C 95         [24] 3495 	lcall	__gptrget
      00308E FC               [12] 3496 	mov	r4,a
      00308F 80 04            [24] 3497 	sjmp	00210$
      003091                       3498 00209$:
      003091 7B 01            [12] 3499 	mov	r3,#0x01
      003093 7C 00            [12] 3500 	mov	r4,#0x00
      003095                       3501 00210$:
      003095 8B 06            [24] 3502 	mov	ar6,r3
      003097 8C 05            [24] 3503 	mov	ar5,r4
                                   3504 ;	vt100.c:436: term->cursor_x += n;
      003099 A8 08            [24] 3505 	mov	r0,_bp
      00309B 08               [12] 3506 	inc	r0
      00309C 74 01            [12] 3507 	mov	a,#0x01
      00309E 26               [12] 3508 	add	a,@r0
      00309F FA               [12] 3509 	mov	r2,a
      0030A0 E4               [12] 3510 	clr	a
      0030A1 08               [12] 3511 	inc	r0
      0030A2 36               [12] 3512 	addc	a,@r0
      0030A3 FB               [12] 3513 	mov	r3,a
      0030A4 08               [12] 3514 	inc	r0
      0030A5 86 04            [24] 3515 	mov	ar4,@r0
      0030A7 8A 82            [24] 3516 	mov	dpl,r2
      0030A9 8B 83            [24] 3517 	mov	dph,r3
      0030AB 8C F0            [24] 3518 	mov	b,r4
      0030AD 12 4C 95         [24] 3519 	lcall	__gptrget
      0030B0 2E               [12] 3520 	add	a,r6
      0030B1 FF               [12] 3521 	mov	r7,a
      0030B2 8A 82            [24] 3522 	mov	dpl,r2
      0030B4 8B 83            [24] 3523 	mov	dph,r3
      0030B6 8C F0            [24] 3524 	mov	b,r4
      0030B8 12 4C 58         [24] 3525 	lcall	__gptrput
                                   3526 ;	vt100.c:437: if(term->cursor_x > VT100_WIDTH) term->cursor_x = VT100_WIDTH;
      0030BB C3               [12] 3527 	clr	c
      0030BC 74 D0            [12] 3528 	mov	a,#(0x50 ^ 0x80)
      0030BE 8F F0            [24] 3529 	mov	b,r7
      0030C0 63 F0 80         [24] 3530 	xrl	b,#0x80
      0030C3 95 F0            [12] 3531 	subb	a,b
      0030C5 50 0B            [24] 3532 	jnc	00110$
      0030C7 8A 82            [24] 3533 	mov	dpl,r2
      0030C9 8B 83            [24] 3534 	mov	dph,r3
      0030CB 8C F0            [24] 3535 	mov	b,r4
      0030CD 74 50            [12] 3536 	mov	a,#0x50
      0030CF 12 4C 58         [24] 3537 	lcall	__gptrput
      0030D2                       3538 00110$:
                                   3539 ;	vt100.c:438: term->state = _st_idle; 
      0030D2 A8 08            [24] 3540 	mov	r0,_bp
      0030D4 08               [12] 3541 	inc	r0
      0030D5 74 16            [12] 3542 	mov	a,#0x16
      0030D7 26               [12] 3543 	add	a,@r0
      0030D8 FA               [12] 3544 	mov	r2,a
      0030D9 E4               [12] 3545 	clr	a
      0030DA 08               [12] 3546 	inc	r0
      0030DB 36               [12] 3547 	addc	a,@r0
      0030DC FB               [12] 3548 	mov	r3,a
      0030DD 08               [12] 3549 	inc	r0
      0030DE 86 04            [24] 3550 	mov	ar4,@r0
      0030E0 8A 82            [24] 3551 	mov	dpl,r2
      0030E2 8B 83            [24] 3552 	mov	dph,r3
      0030E4 8C F0            [24] 3553 	mov	b,r4
      0030E6 74 85            [12] 3554 	mov	a,#__st_idle
      0030E8 12 4C 58         [24] 3555 	lcall	__gptrput
      0030EB A3               [24] 3556 	inc	dptr
      0030EC 74 44            [12] 3557 	mov	a,#(__st_idle >> 8)
      0030EE 12 4C 58         [24] 3558 	lcall	__gptrput
                                   3559 ;	vt100.c:439: break;
      0030F1 02 3C E3         [24] 3560 	ljmp	00200$
                                   3561 ;	vt100.c:441: case 'D': { // cursor left
      0030F4                       3562 00111$:
                                   3563 ;	vt100.c:442: int n = (term->narg > 0)?term->args[0]:1;
      0030F4 A8 08            [24] 3564 	mov	r0,_bp
      0030F6 08               [12] 3565 	inc	r0
      0030F7 74 0C            [12] 3566 	mov	a,#0x0c
      0030F9 26               [12] 3567 	add	a,@r0
      0030FA FA               [12] 3568 	mov	r2,a
      0030FB E4               [12] 3569 	clr	a
      0030FC 08               [12] 3570 	inc	r0
      0030FD 36               [12] 3571 	addc	a,@r0
      0030FE FB               [12] 3572 	mov	r3,a
      0030FF 08               [12] 3573 	inc	r0
      003100 86 04            [24] 3574 	mov	ar4,@r0
      003102 8A 82            [24] 3575 	mov	dpl,r2
      003104 8B 83            [24] 3576 	mov	dph,r3
      003106 8C F0            [24] 3577 	mov	b,r4
      003108 12 4C 95         [24] 3578 	lcall	__gptrget
      00310B 60 1F            [24] 3579 	jz	00211$
      00310D A8 08            [24] 3580 	mov	r0,_bp
      00310F 08               [12] 3581 	inc	r0
      003110 74 0D            [12] 3582 	mov	a,#0x0d
      003112 26               [12] 3583 	add	a,@r0
      003113 FB               [12] 3584 	mov	r3,a
      003114 E4               [12] 3585 	clr	a
      003115 08               [12] 3586 	inc	r0
      003116 36               [12] 3587 	addc	a,@r0
      003117 FA               [12] 3588 	mov	r2,a
      003118 08               [12] 3589 	inc	r0
      003119 86 04            [24] 3590 	mov	ar4,@r0
      00311B 8B 82            [24] 3591 	mov	dpl,r3
      00311D 8A 83            [24] 3592 	mov	dph,r2
      00311F 8C F0            [24] 3593 	mov	b,r4
      003121 12 4C 95         [24] 3594 	lcall	__gptrget
      003124 FB               [12] 3595 	mov	r3,a
      003125 A3               [24] 3596 	inc	dptr
      003126 12 4C 95         [24] 3597 	lcall	__gptrget
      003129 FC               [12] 3598 	mov	r4,a
      00312A 80 04            [24] 3599 	sjmp	00212$
      00312C                       3600 00211$:
      00312C 7B 01            [12] 3601 	mov	r3,#0x01
      00312E 7C 00            [12] 3602 	mov	r4,#0x00
      003130                       3603 00212$:
      003130 8B 06            [24] 3604 	mov	ar6,r3
      003132 8C 05            [24] 3605 	mov	ar5,r4
                                   3606 ;	vt100.c:443: term->cursor_x -= n;
      003134 A8 08            [24] 3607 	mov	r0,_bp
      003136 08               [12] 3608 	inc	r0
      003137 74 01            [12] 3609 	mov	a,#0x01
      003139 26               [12] 3610 	add	a,@r0
      00313A FA               [12] 3611 	mov	r2,a
      00313B E4               [12] 3612 	clr	a
      00313C 08               [12] 3613 	inc	r0
      00313D 36               [12] 3614 	addc	a,@r0
      00313E FB               [12] 3615 	mov	r3,a
      00313F 08               [12] 3616 	inc	r0
      003140 86 04            [24] 3617 	mov	ar4,@r0
      003142 8A 82            [24] 3618 	mov	dpl,r2
      003144 8B 83            [24] 3619 	mov	dph,r3
      003146 8C F0            [24] 3620 	mov	b,r4
      003148 12 4C 95         [24] 3621 	lcall	__gptrget
      00314B C3               [12] 3622 	clr	c
      00314C 9E               [12] 3623 	subb	a,r6
                                   3624 ;	vt100.c:444: if(term->cursor_x < 0) term->cursor_x = 0;
      00314D FF               [12] 3625 	mov	r7,a
      00314E 8A 82            [24] 3626 	mov	dpl,r2
      003150 8B 83            [24] 3627 	mov	dph,r3
      003152 8C F0            [24] 3628 	mov	b,r4
      003154 12 4C 58         [24] 3629 	lcall	__gptrput
      003157 30 E7 0A         [24] 3630 	jnb	acc.7,00113$
      00315A 8A 82            [24] 3631 	mov	dpl,r2
      00315C 8B 83            [24] 3632 	mov	dph,r3
      00315E 8C F0            [24] 3633 	mov	b,r4
      003160 E4               [12] 3634 	clr	a
      003161 12 4C 58         [24] 3635 	lcall	__gptrput
      003164                       3636 00113$:
                                   3637 ;	vt100.c:445: term->state = _st_idle; 
      003164 A8 08            [24] 3638 	mov	r0,_bp
      003166 08               [12] 3639 	inc	r0
      003167 74 16            [12] 3640 	mov	a,#0x16
      003169 26               [12] 3641 	add	a,@r0
      00316A FA               [12] 3642 	mov	r2,a
      00316B E4               [12] 3643 	clr	a
      00316C 08               [12] 3644 	inc	r0
      00316D 36               [12] 3645 	addc	a,@r0
      00316E FB               [12] 3646 	mov	r3,a
      00316F 08               [12] 3647 	inc	r0
      003170 86 04            [24] 3648 	mov	ar4,@r0
      003172 8A 82            [24] 3649 	mov	dpl,r2
      003174 8B 83            [24] 3650 	mov	dph,r3
      003176 8C F0            [24] 3651 	mov	b,r4
      003178 74 85            [12] 3652 	mov	a,#__st_idle
      00317A 12 4C 58         [24] 3653 	lcall	__gptrput
      00317D A3               [24] 3654 	inc	dptr
      00317E 74 44            [12] 3655 	mov	a,#(__st_idle >> 8)
      003180 12 4C 58         [24] 3656 	lcall	__gptrput
                                   3657 ;	vt100.c:446: break;
      003183 02 3C E3         [24] 3658 	ljmp	00200$
                                   3659 ;	vt100.c:449: case 'H': { // move cursor to position (default 0;0)
      003186                       3660 00115$:
                                   3661 ;	vt100.c:451: term->cursor_x = (term->narg >= 1)?(term->args[1]-1):0; 
      003186 A8 08            [24] 3662 	mov	r0,_bp
      003188 08               [12] 3663 	inc	r0
      003189 E5 08            [12] 3664 	mov	a,_bp
      00318B 24 09            [12] 3665 	add	a,#0x09
      00318D F9               [12] 3666 	mov	r1,a
      00318E 74 01            [12] 3667 	mov	a,#0x01
      003190 26               [12] 3668 	add	a,@r0
      003191 F7               [12] 3669 	mov	@r1,a
      003192 E4               [12] 3670 	clr	a
      003193 08               [12] 3671 	inc	r0
      003194 36               [12] 3672 	addc	a,@r0
      003195 09               [12] 3673 	inc	r1
      003196 F7               [12] 3674 	mov	@r1,a
      003197 08               [12] 3675 	inc	r0
      003198 E6               [12] 3676 	mov	a,@r0
      003199 09               [12] 3677 	inc	r1
      00319A F7               [12] 3678 	mov	@r1,a
      00319B A8 08            [24] 3679 	mov	r0,_bp
      00319D 08               [12] 3680 	inc	r0
      00319E E5 08            [12] 3681 	mov	a,_bp
      0031A0 24 04            [12] 3682 	add	a,#0x04
      0031A2 F9               [12] 3683 	mov	r1,a
      0031A3 74 0C            [12] 3684 	mov	a,#0x0c
      0031A5 26               [12] 3685 	add	a,@r0
      0031A6 F7               [12] 3686 	mov	@r1,a
      0031A7 E4               [12] 3687 	clr	a
      0031A8 08               [12] 3688 	inc	r0
      0031A9 36               [12] 3689 	addc	a,@r0
      0031AA 09               [12] 3690 	inc	r1
      0031AB F7               [12] 3691 	mov	@r1,a
      0031AC 08               [12] 3692 	inc	r0
      0031AD E6               [12] 3693 	mov	a,@r0
      0031AE 09               [12] 3694 	inc	r1
      0031AF F7               [12] 3695 	mov	@r1,a
      0031B0 E5 08            [12] 3696 	mov	a,_bp
      0031B2 24 04            [12] 3697 	add	a,#0x04
      0031B4 F8               [12] 3698 	mov	r0,a
      0031B5 86 82            [24] 3699 	mov	dpl,@r0
      0031B7 08               [12] 3700 	inc	r0
      0031B8 86 83            [24] 3701 	mov	dph,@r0
      0031BA 08               [12] 3702 	inc	r0
      0031BB 86 F0            [24] 3703 	mov	b,@r0
      0031BD 12 4C 95         [24] 3704 	lcall	__gptrget
      0031C0 FF               [12] 3705 	mov	r7,a
      0031C1 BF 01 00         [24] 3706 	cjne	r7,#0x01,00418$
      0031C4                       3707 00418$:
      0031C4 92 00            [24] 3708 	mov	b0,c
      0031C6 40 27            [24] 3709 	jc	00213$
      0031C8 A8 08            [24] 3710 	mov	r0,_bp
      0031CA 08               [12] 3711 	inc	r0
      0031CB 74 0D            [12] 3712 	mov	a,#0x0d
      0031CD 26               [12] 3713 	add	a,@r0
      0031CE FA               [12] 3714 	mov	r2,a
      0031CF E4               [12] 3715 	clr	a
      0031D0 08               [12] 3716 	inc	r0
      0031D1 36               [12] 3717 	addc	a,@r0
      0031D2 FB               [12] 3718 	mov	r3,a
      0031D3 08               [12] 3719 	inc	r0
      0031D4 86 04            [24] 3720 	mov	ar4,@r0
      0031D6 74 02            [12] 3721 	mov	a,#0x02
      0031D8 2A               [12] 3722 	add	a,r2
      0031D9 FA               [12] 3723 	mov	r2,a
      0031DA E4               [12] 3724 	clr	a
      0031DB 3B               [12] 3725 	addc	a,r3
      0031DC FB               [12] 3726 	mov	r3,a
      0031DD 8A 82            [24] 3727 	mov	dpl,r2
      0031DF 8B 83            [24] 3728 	mov	dph,r3
      0031E1 8C F0            [24] 3729 	mov	b,r4
      0031E3 12 4C 95         [24] 3730 	lcall	__gptrget
      0031E6 FA               [12] 3731 	mov	r2,a
      0031E7 1A               [12] 3732 	dec	r2
      0031E8 EA               [12] 3733 	mov	a,r2
      0031E9 33               [12] 3734 	rlc	a
      0031EA 95 E0            [12] 3735 	subb	a,acc
      0031EC FF               [12] 3736 	mov	r7,a
      0031ED 80 04            [24] 3737 	sjmp	00214$
      0031EF                       3738 00213$:
      0031EF 7A 00            [12] 3739 	mov	r2,#0x00
      0031F1 7F 00            [12] 3740 	mov	r7,#0x00
      0031F3                       3741 00214$:
      0031F3 8A 07            [24] 3742 	mov	ar7,r2
      0031F5 E5 08            [12] 3743 	mov	a,_bp
      0031F7 24 09            [12] 3744 	add	a,#0x09
      0031F9 F8               [12] 3745 	mov	r0,a
      0031FA 86 82            [24] 3746 	mov	dpl,@r0
      0031FC 08               [12] 3747 	inc	r0
      0031FD 86 83            [24] 3748 	mov	dph,@r0
      0031FF 08               [12] 3749 	inc	r0
      003200 86 F0            [24] 3750 	mov	b,@r0
      003202 EF               [12] 3751 	mov	a,r7
      003203 12 4C 58         [24] 3752 	lcall	__gptrput
                                   3753 ;	vt100.c:452: term->cursor_y = (term->narg == 2)?(term->args[0]-1):0;
      003206 A8 08            [24] 3754 	mov	r0,_bp
      003208 08               [12] 3755 	inc	r0
      003209 74 02            [12] 3756 	mov	a,#0x02
      00320B 26               [12] 3757 	add	a,@r0
      00320C FD               [12] 3758 	mov	r5,a
      00320D E4               [12] 3759 	clr	a
      00320E 08               [12] 3760 	inc	r0
      00320F 36               [12] 3761 	addc	a,@r0
      003210 FE               [12] 3762 	mov	r6,a
      003211 08               [12] 3763 	inc	r0
      003212 86 07            [24] 3764 	mov	ar7,@r0
      003214 E5 08            [12] 3765 	mov	a,_bp
      003216 24 04            [12] 3766 	add	a,#0x04
      003218 F8               [12] 3767 	mov	r0,a
      003219 86 82            [24] 3768 	mov	dpl,@r0
      00321B 08               [12] 3769 	inc	r0
      00321C 86 83            [24] 3770 	mov	dph,@r0
      00321E 08               [12] 3771 	inc	r0
      00321F 86 F0            [24] 3772 	mov	b,@r0
      003221 12 4C 95         [24] 3773 	lcall	__gptrget
      003224 FC               [12] 3774 	mov	r4,a
      003225 BC 02 20         [24] 3775 	cjne	r4,#0x02,00215$
      003228 A8 08            [24] 3776 	mov	r0,_bp
      00322A 08               [12] 3777 	inc	r0
      00322B 74 0D            [12] 3778 	mov	a,#0x0d
      00322D 26               [12] 3779 	add	a,@r0
      00322E FA               [12] 3780 	mov	r2,a
      00322F E4               [12] 3781 	clr	a
      003230 08               [12] 3782 	inc	r0
      003231 36               [12] 3783 	addc	a,@r0
      003232 FB               [12] 3784 	mov	r3,a
      003233 08               [12] 3785 	inc	r0
      003234 86 04            [24] 3786 	mov	ar4,@r0
      003236 8A 82            [24] 3787 	mov	dpl,r2
      003238 8B 83            [24] 3788 	mov	dph,r3
      00323A 8C F0            [24] 3789 	mov	b,r4
      00323C 12 4C 95         [24] 3790 	lcall	__gptrget
      00323F FA               [12] 3791 	mov	r2,a
      003240 1A               [12] 3792 	dec	r2
      003241 EA               [12] 3793 	mov	a,r2
      003242 33               [12] 3794 	rlc	a
      003243 95 E0            [12] 3795 	subb	a,acc
      003245 FC               [12] 3796 	mov	r4,a
      003246 80 04            [24] 3797 	sjmp	00216$
      003248                       3798 00215$:
      003248 7A 00            [12] 3799 	mov	r2,#0x00
      00324A 7C 00            [12] 3800 	mov	r4,#0x00
      00324C                       3801 00216$:
      00324C 8A 04            [24] 3802 	mov	ar4,r2
      00324E 8D 82            [24] 3803 	mov	dpl,r5
      003250 8E 83            [24] 3804 	mov	dph,r6
      003252 8F F0            [24] 3805 	mov	b,r7
      003254 EC               [12] 3806 	mov	a,r4
      003255 12 4C 58         [24] 3807 	lcall	__gptrput
                                   3808 ;	vt100.c:453: if(term->flags.origin_mode) {
      003258 A8 08            [24] 3809 	mov	r0,_bp
      00325A 08               [12] 3810 	inc	r0
      00325B 86 02            [24] 3811 	mov	ar2,@r0
      00325D 08               [12] 3812 	inc	r0
      00325E 86 03            [24] 3813 	mov	ar3,@r0
      003260 08               [12] 3814 	inc	r0
      003261 86 04            [24] 3815 	mov	ar4,@r0
      003263 8A 82            [24] 3816 	mov	dpl,r2
      003265 8B 83            [24] 3817 	mov	dph,r3
      003267 8C F0            [24] 3818 	mov	b,r4
      003269 12 4C 95         [24] 3819 	lcall	__gptrget
      00326C 30 E2 78         [24] 3820 	jnb	acc.2,00119$
                                   3821 ;	vt100.c:454: term->cursor_y += term->scroll_start_row;
      00326F 8D 82            [24] 3822 	mov	dpl,r5
      003271 8E 83            [24] 3823 	mov	dph,r6
      003273 8F F0            [24] 3824 	mov	b,r7
      003275 E5 08            [12] 3825 	mov	a,_bp
      003277 24 07            [12] 3826 	add	a,#0x07
      003279 F8               [12] 3827 	mov	r0,a
      00327A 12 4C 95         [24] 3828 	lcall	__gptrget
      00327D F6               [12] 3829 	mov	@r0,a
      00327E A8 08            [24] 3830 	mov	r0,_bp
      003280 08               [12] 3831 	inc	r0
      003281 74 05            [12] 3832 	mov	a,#0x05
      003283 26               [12] 3833 	add	a,@r0
      003284 FA               [12] 3834 	mov	r2,a
      003285 E4               [12] 3835 	clr	a
      003286 08               [12] 3836 	inc	r0
      003287 36               [12] 3837 	addc	a,@r0
      003288 FB               [12] 3838 	mov	r3,a
      003289 08               [12] 3839 	inc	r0
      00328A 86 04            [24] 3840 	mov	ar4,@r0
      00328C 8A 82            [24] 3841 	mov	dpl,r2
      00328E 8B 83            [24] 3842 	mov	dph,r3
      003290 8C F0            [24] 3843 	mov	b,r4
      003292 12 4C 95         [24] 3844 	lcall	__gptrget
      003295 FA               [12] 3845 	mov	r2,a
      003296 E5 08            [12] 3846 	mov	a,_bp
      003298 24 07            [12] 3847 	add	a,#0x07
      00329A F8               [12] 3848 	mov	r0,a
      00329B E5 08            [12] 3849 	mov	a,_bp
      00329D 24 07            [12] 3850 	add	a,#0x07
      00329F F9               [12] 3851 	mov	r1,a
      0032A0 EA               [12] 3852 	mov	a,r2
      0032A1 26               [12] 3853 	add	a,@r0
      0032A2 F7               [12] 3854 	mov	@r1,a
      0032A3 8D 82            [24] 3855 	mov	dpl,r5
      0032A5 8E 83            [24] 3856 	mov	dph,r6
      0032A7 8F F0            [24] 3857 	mov	b,r7
      0032A9 E5 08            [12] 3858 	mov	a,_bp
      0032AB 24 07            [12] 3859 	add	a,#0x07
      0032AD F8               [12] 3860 	mov	r0,a
      0032AE E6               [12] 3861 	mov	a,@r0
      0032AF 12 4C 58         [24] 3862 	lcall	__gptrput
                                   3863 ;	vt100.c:455: if(term->cursor_y >= term->scroll_end_row){
      0032B2 A8 08            [24] 3864 	mov	r0,_bp
      0032B4 08               [12] 3865 	inc	r0
      0032B5 74 06            [12] 3866 	mov	a,#0x06
      0032B7 26               [12] 3867 	add	a,@r0
      0032B8 FA               [12] 3868 	mov	r2,a
      0032B9 E4               [12] 3869 	clr	a
      0032BA 08               [12] 3870 	inc	r0
      0032BB 36               [12] 3871 	addc	a,@r0
      0032BC FB               [12] 3872 	mov	r3,a
      0032BD 08               [12] 3873 	inc	r0
      0032BE 86 04            [24] 3874 	mov	ar4,@r0
      0032C0 8A 82            [24] 3875 	mov	dpl,r2
      0032C2 8B 83            [24] 3876 	mov	dph,r3
      0032C4 8C F0            [24] 3877 	mov	b,r4
      0032C6 12 4C 95         [24] 3878 	lcall	__gptrget
      0032C9 FC               [12] 3879 	mov	r4,a
      0032CA E5 08            [12] 3880 	mov	a,_bp
      0032CC 24 07            [12] 3881 	add	a,#0x07
      0032CE F8               [12] 3882 	mov	r0,a
      0032CF C3               [12] 3883 	clr	c
      0032D0 E6               [12] 3884 	mov	a,@r0
      0032D1 64 80            [12] 3885 	xrl	a,#0x80
      0032D3 8C F0            [24] 3886 	mov	b,r4
      0032D5 63 F0 80         [24] 3887 	xrl	b,#0x80
      0032D8 95 F0            [12] 3888 	subb	a,b
      0032DA 40 0B            [24] 3889 	jc	00119$
                                   3890 ;	vt100.c:456: term->cursor_y = term->scroll_end_row - 1;
      0032DC 1C               [12] 3891 	dec	r4
      0032DD 8D 82            [24] 3892 	mov	dpl,r5
      0032DF 8E 83            [24] 3893 	mov	dph,r6
      0032E1 8F F0            [24] 3894 	mov	b,r7
      0032E3 EC               [12] 3895 	mov	a,r4
      0032E4 12 4C 58         [24] 3896 	lcall	__gptrput
      0032E7                       3897 00119$:
                                   3898 ;	vt100.c:459: if(term->cursor_x > VT100_WIDTH) term->cursor_x = VT100_WIDTH;
      0032E7 E5 08            [12] 3899 	mov	a,_bp
      0032E9 24 09            [12] 3900 	add	a,#0x09
      0032EB F8               [12] 3901 	mov	r0,a
      0032EC 86 82            [24] 3902 	mov	dpl,@r0
      0032EE 08               [12] 3903 	inc	r0
      0032EF 86 83            [24] 3904 	mov	dph,@r0
      0032F1 08               [12] 3905 	inc	r0
      0032F2 86 F0            [24] 3906 	mov	b,@r0
      0032F4 12 4C 95         [24] 3907 	lcall	__gptrget
      0032F7 FC               [12] 3908 	mov	r4,a
      0032F8 C3               [12] 3909 	clr	c
      0032F9 74 D0            [12] 3910 	mov	a,#(0x50 ^ 0x80)
      0032FB 8C F0            [24] 3911 	mov	b,r4
      0032FD 63 F0 80         [24] 3912 	xrl	b,#0x80
      003300 95 F0            [12] 3913 	subb	a,b
      003302 50 12            [24] 3914 	jnc	00121$
      003304 E5 08            [12] 3915 	mov	a,_bp
      003306 24 09            [12] 3916 	add	a,#0x09
      003308 F8               [12] 3917 	mov	r0,a
      003309 86 82            [24] 3918 	mov	dpl,@r0
      00330B 08               [12] 3919 	inc	r0
      00330C 86 83            [24] 3920 	mov	dph,@r0
      00330E 08               [12] 3921 	inc	r0
      00330F 86 F0            [24] 3922 	mov	b,@r0
      003311 74 50            [12] 3923 	mov	a,#0x50
      003313 12 4C 58         [24] 3924 	lcall	__gptrput
      003316                       3925 00121$:
                                   3926 ;	vt100.c:460: if(term->cursor_y > VT100_HEIGHT) term->cursor_y = VT100_HEIGHT; 
      003316 8D 82            [24] 3927 	mov	dpl,r5
      003318 8E 83            [24] 3928 	mov	dph,r6
      00331A 8F F0            [24] 3929 	mov	b,r7
      00331C 12 4C 95         [24] 3930 	lcall	__gptrget
      00331F FC               [12] 3931 	mov	r4,a
      003320 C3               [12] 3932 	clr	c
      003321 74 98            [12] 3933 	mov	a,#(0x18 ^ 0x80)
      003323 8C F0            [24] 3934 	mov	b,r4
      003325 63 F0 80         [24] 3935 	xrl	b,#0x80
      003328 95 F0            [12] 3936 	subb	a,b
      00332A 50 0B            [24] 3937 	jnc	00123$
      00332C 8D 82            [24] 3938 	mov	dpl,r5
      00332E 8E 83            [24] 3939 	mov	dph,r6
      003330 8F F0            [24] 3940 	mov	b,r7
      003332 74 18            [12] 3941 	mov	a,#0x18
      003334 12 4C 58         [24] 3942 	lcall	__gptrput
      003337                       3943 00123$:
                                   3944 ;	vt100.c:461: term->state = _st_idle; 
      003337 A8 08            [24] 3945 	mov	r0,_bp
      003339 08               [12] 3946 	inc	r0
      00333A 74 16            [12] 3947 	mov	a,#0x16
      00333C 26               [12] 3948 	add	a,@r0
      00333D FD               [12] 3949 	mov	r5,a
      00333E E4               [12] 3950 	clr	a
      00333F 08               [12] 3951 	inc	r0
      003340 36               [12] 3952 	addc	a,@r0
      003341 FE               [12] 3953 	mov	r6,a
      003342 08               [12] 3954 	inc	r0
      003343 86 07            [24] 3955 	mov	ar7,@r0
      003345 8D 82            [24] 3956 	mov	dpl,r5
      003347 8E 83            [24] 3957 	mov	dph,r6
      003349 8F F0            [24] 3958 	mov	b,r7
      00334B 74 85            [12] 3959 	mov	a,#__st_idle
      00334D 12 4C 58         [24] 3960 	lcall	__gptrput
      003350 A3               [24] 3961 	inc	dptr
      003351 74 44            [12] 3962 	mov	a,#(__st_idle >> 8)
      003353 12 4C 58         [24] 3963 	lcall	__gptrput
                                   3964 ;	vt100.c:462: break;
      003356 02 3C E3         [24] 3965 	ljmp	00200$
                                   3966 ;	vt100.c:464: case 'J':{// clear screen from cursor up or down
      003359                       3967 00124$:
                                   3968 ;	vt100.c:465: uint16_t y = VT100_CURSOR_Y(term); 
      003359 A8 08            [24] 3969 	mov	r0,_bp
      00335B 08               [12] 3970 	inc	r0
      00335C 86 82            [24] 3971 	mov	dpl,@r0
      00335E 08               [12] 3972 	inc	r0
      00335F 86 83            [24] 3973 	mov	dph,@r0
      003361 08               [12] 3974 	inc	r0
      003362 86 F0            [24] 3975 	mov	b,@r0
      003364 12 22 3F         [24] 3976 	lcall	_VT100_CURSOR_Y
                                   3977 ;	vt100.c:466: if(term->narg == 0 || (term->narg == 1 && term->args[0] == 0)){
      003367 A8 08            [24] 3978 	mov	r0,_bp
      003369 08               [12] 3979 	inc	r0
      00336A 74 0C            [12] 3980 	mov	a,#0x0c
      00336C 26               [12] 3981 	add	a,@r0
      00336D FD               [12] 3982 	mov	r5,a
      00336E E4               [12] 3983 	clr	a
      00336F 08               [12] 3984 	inc	r0
      003370 36               [12] 3985 	addc	a,@r0
      003371 FE               [12] 3986 	mov	r6,a
      003372 08               [12] 3987 	inc	r0
      003373 86 07            [24] 3988 	mov	ar7,@r0
      003375 8D 82            [24] 3989 	mov	dpl,r5
      003377 8E 83            [24] 3990 	mov	dph,r6
      003379 8F F0            [24] 3991 	mov	b,r7
      00337B 12 4C 95         [24] 3992 	lcall	__gptrget
      00337E FF               [12] 3993 	mov	r7,a
      00337F 60 2A            [24] 3994 	jz	00132$
      003381 BF 01 03         [24] 3995 	cjne	r7,#0x01,00427$
      003384 EF               [12] 3996 	mov	a,r7
      003385 80 01            [24] 3997 	sjmp	00428$
      003387                       3998 00427$:
      003387 E4               [12] 3999 	clr	a
      003388                       4000 00428$:
      003388 FF               [12] 4001 	mov	r7,a
      003389 60 5E            [24] 4002 	jz	00133$
      00338B A8 08            [24] 4003 	mov	r0,_bp
      00338D 08               [12] 4004 	inc	r0
      00338E 74 0D            [12] 4005 	mov	a,#0x0d
      003390 26               [12] 4006 	add	a,@r0
      003391 FC               [12] 4007 	mov	r4,a
      003392 E4               [12] 4008 	clr	a
      003393 08               [12] 4009 	inc	r0
      003394 36               [12] 4010 	addc	a,@r0
      003395 FD               [12] 4011 	mov	r5,a
      003396 08               [12] 4012 	inc	r0
      003397 86 06            [24] 4013 	mov	ar6,@r0
      003399 8C 82            [24] 4014 	mov	dpl,r4
      00339B 8D 83            [24] 4015 	mov	dph,r5
      00339D 8E F0            [24] 4016 	mov	b,r6
      00339F 12 4C 95         [24] 4017 	lcall	__gptrget
      0033A2 FC               [12] 4018 	mov	r4,a
      0033A3 A3               [24] 4019 	inc	dptr
      0033A4 12 4C 95         [24] 4020 	lcall	__gptrget
      0033A7 FD               [12] 4021 	mov	r5,a
      0033A8 4C               [12] 4022 	orl	a,r4
      0033A9 70 3E            [24] 4023 	jnz	00133$
      0033AB                       4024 00132$:
                                   4025 ;	vt100.c:468: _vt100_clearLines(term, term->cursor_y, VT100_HEIGHT - 1); 
      0033AB A8 08            [24] 4026 	mov	r0,_bp
      0033AD 08               [12] 4027 	inc	r0
      0033AE 74 02            [12] 4028 	mov	a,#0x02
      0033B0 26               [12] 4029 	add	a,@r0
      0033B1 FC               [12] 4030 	mov	r4,a
      0033B2 E4               [12] 4031 	clr	a
      0033B3 08               [12] 4032 	inc	r0
      0033B4 36               [12] 4033 	addc	a,@r0
      0033B5 FD               [12] 4034 	mov	r5,a
      0033B6 08               [12] 4035 	inc	r0
      0033B7 86 06            [24] 4036 	mov	ar6,@r0
      0033B9 8C 82            [24] 4037 	mov	dpl,r4
      0033BB 8D 83            [24] 4038 	mov	dph,r5
      0033BD 8E F0            [24] 4039 	mov	b,r6
      0033BF 12 4C 95         [24] 4040 	lcall	__gptrget
      0033C2 FC               [12] 4041 	mov	r4,a
      0033C3 33               [12] 4042 	rlc	a
      0033C4 95 E0            [12] 4043 	subb	a,acc
      0033C6 FE               [12] 4044 	mov	r6,a
      0033C7 74 17            [12] 4045 	mov	a,#0x17
      0033C9 C0 E0            [24] 4046 	push	acc
      0033CB E4               [12] 4047 	clr	a
      0033CC C0 E0            [24] 4048 	push	acc
      0033CE C0 04            [24] 4049 	push	ar4
      0033D0 C0 06            [24] 4050 	push	ar6
      0033D2 A8 08            [24] 4051 	mov	r0,_bp
      0033D4 08               [12] 4052 	inc	r0
      0033D5 86 82            [24] 4053 	mov	dpl,@r0
      0033D7 08               [12] 4054 	inc	r0
      0033D8 86 83            [24] 4055 	mov	dph,@r0
      0033DA 08               [12] 4056 	inc	r0
      0033DB 86 F0            [24] 4057 	mov	b,@r0
      0033DD 12 23 38         [24] 4058 	lcall	__vt100_clearLines
      0033E0 E5 81            [12] 4059 	mov	a,sp
      0033E2 24 FC            [12] 4060 	add	a,#0xfc
      0033E4 F5 81            [12] 4061 	mov	sp,a
      0033E6 02 34 92         [24] 4062 	ljmp	00134$
      0033E9                       4063 00133$:
                                   4064 ;	vt100.c:469: } else if(term->narg == 1 && term->args[0] == 1){
      0033E9 EF               [12] 4065 	mov	a,r7
      0033EA 60 5E            [24] 4066 	jz	00129$
      0033EC A8 08            [24] 4067 	mov	r0,_bp
      0033EE 08               [12] 4068 	inc	r0
      0033EF 74 0D            [12] 4069 	mov	a,#0x0d
      0033F1 26               [12] 4070 	add	a,@r0
      0033F2 FC               [12] 4071 	mov	r4,a
      0033F3 E4               [12] 4072 	clr	a
      0033F4 08               [12] 4073 	inc	r0
      0033F5 36               [12] 4074 	addc	a,@r0
      0033F6 FD               [12] 4075 	mov	r5,a
      0033F7 08               [12] 4076 	inc	r0
      0033F8 86 06            [24] 4077 	mov	ar6,@r0
      0033FA 8C 82            [24] 4078 	mov	dpl,r4
      0033FC 8D 83            [24] 4079 	mov	dph,r5
      0033FE 8E F0            [24] 4080 	mov	b,r6
      003400 12 4C 95         [24] 4081 	lcall	__gptrget
      003403 FC               [12] 4082 	mov	r4,a
      003404 A3               [24] 4083 	inc	dptr
      003405 12 4C 95         [24] 4084 	lcall	__gptrget
      003408 FD               [12] 4085 	mov	r5,a
      003409 BC 01 3E         [24] 4086 	cjne	r4,#0x01,00129$
      00340C BD 00 3B         [24] 4087 	cjne	r5,#0x00,00129$
                                   4088 ;	vt100.c:471: _vt100_clearLines(term, 0, term->cursor_y); 
      00340F A8 08            [24] 4089 	mov	r0,_bp
      003411 08               [12] 4090 	inc	r0
      003412 74 02            [12] 4091 	mov	a,#0x02
      003414 26               [12] 4092 	add	a,@r0
      003415 FC               [12] 4093 	mov	r4,a
      003416 E4               [12] 4094 	clr	a
      003417 08               [12] 4095 	inc	r0
      003418 36               [12] 4096 	addc	a,@r0
      003419 FD               [12] 4097 	mov	r5,a
      00341A 08               [12] 4098 	inc	r0
      00341B 86 06            [24] 4099 	mov	ar6,@r0
      00341D 8C 82            [24] 4100 	mov	dpl,r4
      00341F 8D 83            [24] 4101 	mov	dph,r5
      003421 8E F0            [24] 4102 	mov	b,r6
      003423 12 4C 95         [24] 4103 	lcall	__gptrget
      003426 FC               [12] 4104 	mov	r4,a
      003427 33               [12] 4105 	rlc	a
      003428 95 E0            [12] 4106 	subb	a,acc
      00342A FE               [12] 4107 	mov	r6,a
      00342B C0 04            [24] 4108 	push	ar4
      00342D C0 06            [24] 4109 	push	ar6
      00342F E4               [12] 4110 	clr	a
      003430 C0 E0            [24] 4111 	push	acc
      003432 C0 E0            [24] 4112 	push	acc
      003434 A8 08            [24] 4113 	mov	r0,_bp
      003436 08               [12] 4114 	inc	r0
      003437 86 82            [24] 4115 	mov	dpl,@r0
      003439 08               [12] 4116 	inc	r0
      00343A 86 83            [24] 4117 	mov	dph,@r0
      00343C 08               [12] 4118 	inc	r0
      00343D 86 F0            [24] 4119 	mov	b,@r0
      00343F 12 23 38         [24] 4120 	lcall	__vt100_clearLines
      003442 E5 81            [12] 4121 	mov	a,sp
      003444 24 FC            [12] 4122 	add	a,#0xfc
      003446 F5 81            [12] 4123 	mov	sp,a
      003448 80 48            [24] 4124 	sjmp	00134$
      00344A                       4125 00129$:
                                   4126 ;	vt100.c:472: } else if(term->narg == 1 && term->args[0] == 2){
      00344A EF               [12] 4127 	mov	a,r7
      00344B 60 45            [24] 4128 	jz	00134$
      00344D A8 08            [24] 4129 	mov	r0,_bp
      00344F 08               [12] 4130 	inc	r0
      003450 74 0D            [12] 4131 	mov	a,#0x0d
      003452 26               [12] 4132 	add	a,@r0
      003453 FD               [12] 4133 	mov	r5,a
      003454 E4               [12] 4134 	clr	a
      003455 08               [12] 4135 	inc	r0
      003456 36               [12] 4136 	addc	a,@r0
      003457 FE               [12] 4137 	mov	r6,a
      003458 08               [12] 4138 	inc	r0
      003459 86 07            [24] 4139 	mov	ar7,@r0
      00345B 8D 82            [24] 4140 	mov	dpl,r5
      00345D 8E 83            [24] 4141 	mov	dph,r6
      00345F 8F F0            [24] 4142 	mov	b,r7
      003461 12 4C 95         [24] 4143 	lcall	__gptrget
      003464 FD               [12] 4144 	mov	r5,a
      003465 A3               [24] 4145 	inc	dptr
      003466 12 4C 95         [24] 4146 	lcall	__gptrget
      003469 FE               [12] 4147 	mov	r6,a
      00346A BD 02 25         [24] 4148 	cjne	r5,#0x02,00134$
      00346D BE 00 22         [24] 4149 	cjne	r6,#0x00,00134$
                                   4150 ;	vt100.c:474: _vt100_clearLines(term, 0, VT100_HEIGHT - 1);
      003470 74 17            [12] 4151 	mov	a,#0x17
      003472 C0 E0            [24] 4152 	push	acc
      003474 E4               [12] 4153 	clr	a
      003475 C0 E0            [24] 4154 	push	acc
      003477 C0 E0            [24] 4155 	push	acc
      003479 C0 E0            [24] 4156 	push	acc
      00347B A8 08            [24] 4157 	mov	r0,_bp
      00347D 08               [12] 4158 	inc	r0
      00347E 86 82            [24] 4159 	mov	dpl,@r0
      003480 08               [12] 4160 	inc	r0
      003481 86 83            [24] 4161 	mov	dph,@r0
      003483 08               [12] 4162 	inc	r0
      003484 86 F0            [24] 4163 	mov	b,@r0
      003486 12 23 38         [24] 4164 	lcall	__vt100_clearLines
      003489 E5 81            [12] 4165 	mov	a,sp
      00348B 24 FC            [12] 4166 	add	a,#0xfc
      00348D F5 81            [12] 4167 	mov	sp,a
                                   4168 ;	vt100.c:476: _vt100_resetScroll(); 
      00348F 12 22 26         [24] 4169 	lcall	__vt100_resetScroll
      003492                       4170 00134$:
                                   4171 ;	vt100.c:478: term->state = _st_idle; 
      003492 A8 08            [24] 4172 	mov	r0,_bp
      003494 08               [12] 4173 	inc	r0
      003495 74 16            [12] 4174 	mov	a,#0x16
      003497 26               [12] 4175 	add	a,@r0
      003498 FD               [12] 4176 	mov	r5,a
      003499 E4               [12] 4177 	clr	a
      00349A 08               [12] 4178 	inc	r0
      00349B 36               [12] 4179 	addc	a,@r0
      00349C FE               [12] 4180 	mov	r6,a
      00349D 08               [12] 4181 	inc	r0
      00349E 86 07            [24] 4182 	mov	ar7,@r0
      0034A0 8D 82            [24] 4183 	mov	dpl,r5
      0034A2 8E 83            [24] 4184 	mov	dph,r6
      0034A4 8F F0            [24] 4185 	mov	b,r7
      0034A6 74 85            [12] 4186 	mov	a,#__st_idle
      0034A8 12 4C 58         [24] 4187 	lcall	__gptrput
      0034AB A3               [24] 4188 	inc	dptr
      0034AC 74 44            [12] 4189 	mov	a,#(__st_idle >> 8)
      0034AE 12 4C 58         [24] 4190 	lcall	__gptrput
                                   4191 ;	vt100.c:479: break;
      0034B1 02 3C E3         [24] 4192 	ljmp	00200$
                                   4193 ;	vt100.c:481: case 'K':{// clear line from cursor right/left
      0034B4                       4194 00137$:
                                   4195 ;	vt100.c:482: uint16_t x = VT100_CURSOR_X(term);
      0034B4 A8 08            [24] 4196 	mov	r0,_bp
      0034B6 08               [12] 4197 	inc	r0
      0034B7 74 01            [12] 4198 	mov	a,#0x01
      0034B9 26               [12] 4199 	add	a,@r0
      0034BA FD               [12] 4200 	mov	r5,a
      0034BB E4               [12] 4201 	clr	a
      0034BC 08               [12] 4202 	inc	r0
      0034BD 36               [12] 4203 	addc	a,@r0
      0034BE FE               [12] 4204 	mov	r6,a
      0034BF 08               [12] 4205 	inc	r0
      0034C0 86 07            [24] 4206 	mov	ar7,@r0
      0034C2 8D 82            [24] 4207 	mov	dpl,r5
      0034C4 8E 83            [24] 4208 	mov	dph,r6
      0034C6 8F F0            [24] 4209 	mov	b,r7
      0034C8 12 4C 95         [24] 4210 	lcall	__gptrget
      0034CB FD               [12] 4211 	mov	r5,a
      0034CC A8 08            [24] 4212 	mov	r0,_bp
      0034CE 08               [12] 4213 	inc	r0
      0034CF 74 07            [12] 4214 	mov	a,#0x07
      0034D1 26               [12] 4215 	add	a,@r0
      0034D2 FC               [12] 4216 	mov	r4,a
      0034D3 E4               [12] 4217 	clr	a
      0034D4 08               [12] 4218 	inc	r0
      0034D5 36               [12] 4219 	addc	a,@r0
      0034D6 FE               [12] 4220 	mov	r6,a
      0034D7 08               [12] 4221 	inc	r0
      0034D8 86 07            [24] 4222 	mov	ar7,@r0
      0034DA 8C 82            [24] 4223 	mov	dpl,r4
      0034DC 8E 83            [24] 4224 	mov	dph,r6
      0034DE 8F F0            [24] 4225 	mov	b,r7
      0034E0 12 4C 95         [24] 4226 	lcall	__gptrget
      0034E3 FC               [12] 4227 	mov	r4,a
      0034E4 C2 D5            [12] 4228 	clr	F0
      0034E6 8C F0            [24] 4229 	mov	b,r4
      0034E8 ED               [12] 4230 	mov	a,r5
      0034E9 30 E7 04         [24] 4231 	jnb	acc.7,00437$
      0034EC B2 D5            [12] 4232 	cpl	F0
      0034EE F4               [12] 4233 	cpl	a
      0034EF 04               [12] 4234 	inc	a
      0034F0                       4235 00437$:
      0034F0 A4               [48] 4236 	mul	ab
      0034F1 30 D5 0A         [24] 4237 	jnb	F0,00438$
      0034F4 F4               [12] 4238 	cpl	a
      0034F5 24 01            [12] 4239 	add	a,#0x01
      0034F7 C5 F0            [12] 4240 	xch	a,b
      0034F9 F4               [12] 4241 	cpl	a
      0034FA 34 00            [12] 4242 	addc	a,#0x00
      0034FC C5 F0            [12] 4243 	xch	a,b
      0034FE                       4244 00438$:
      0034FE FD               [12] 4245 	mov	r5,a
      0034FF AF F0            [24] 4246 	mov	r7,b
      003501 E5 08            [12] 4247 	mov	a,_bp
      003503 24 0C            [12] 4248 	add	a,#0x0c
      003505 F8               [12] 4249 	mov	r0,a
      003506 A6 05            [24] 4250 	mov	@r0,ar5
      003508 08               [12] 4251 	inc	r0
      003509 A6 07            [24] 4252 	mov	@r0,ar7
                                   4253 ;	vt100.c:483: uint16_t y = VT100_CURSOR_Y(term);
      00350B A8 08            [24] 4254 	mov	r0,_bp
      00350D 08               [12] 4255 	inc	r0
      00350E 86 82            [24] 4256 	mov	dpl,@r0
      003510 08               [12] 4257 	inc	r0
      003511 86 83            [24] 4258 	mov	dph,@r0
      003513 08               [12] 4259 	inc	r0
      003514 86 F0            [24] 4260 	mov	b,@r0
      003516 12 22 3F         [24] 4261 	lcall	_VT100_CURSOR_Y
      003519 AC 82            [24] 4262 	mov	r4,dpl
      00351B AD 83            [24] 4263 	mov	r5,dph
      00351D E5 08            [12] 4264 	mov	a,_bp
      00351F 24 0E            [12] 4265 	add	a,#0x0e
      003521 F8               [12] 4266 	mov	r0,a
      003522 A6 04            [24] 4267 	mov	@r0,ar4
      003524 08               [12] 4268 	inc	r0
      003525 A6 05            [24] 4269 	mov	@r0,ar5
                                   4270 ;	vt100.c:485: if(term->narg == 0 || (term->narg == 1 && term->args[0] == 0)){
      003527 A8 08            [24] 4271 	mov	r0,_bp
      003529 08               [12] 4272 	inc	r0
      00352A 74 0C            [12] 4273 	mov	a,#0x0c
      00352C 26               [12] 4274 	add	a,@r0
      00352D FA               [12] 4275 	mov	r2,a
      00352E E4               [12] 4276 	clr	a
      00352F 08               [12] 4277 	inc	r0
      003530 36               [12] 4278 	addc	a,@r0
      003531 FB               [12] 4279 	mov	r3,a
      003532 08               [12] 4280 	inc	r0
      003533 86 07            [24] 4281 	mov	ar7,@r0
      003535 8A 82            [24] 4282 	mov	dpl,r2
      003537 8B 83            [24] 4283 	mov	dph,r3
      003539 8F F0            [24] 4284 	mov	b,r7
      00353B 12 4C 95         [24] 4285 	lcall	__gptrget
      00353E FF               [12] 4286 	mov	r7,a
      00353F 60 2A            [24] 4287 	jz	00145$
      003541 BF 01 03         [24] 4288 	cjne	r7,#0x01,00440$
      003544 EF               [12] 4289 	mov	a,r7
      003545 80 01            [24] 4290 	sjmp	00441$
      003547                       4291 00440$:
      003547 E4               [12] 4292 	clr	a
      003548                       4293 00441$:
      003548 FF               [12] 4294 	mov	r7,a
      003549 60 65            [24] 4295 	jz	00146$
      00354B A8 08            [24] 4296 	mov	r0,_bp
      00354D 08               [12] 4297 	inc	r0
      00354E 74 0D            [12] 4298 	mov	a,#0x0d
      003550 26               [12] 4299 	add	a,@r0
      003551 FA               [12] 4300 	mov	r2,a
      003552 E4               [12] 4301 	clr	a
      003553 08               [12] 4302 	inc	r0
      003554 36               [12] 4303 	addc	a,@r0
      003555 FB               [12] 4304 	mov	r3,a
      003556 08               [12] 4305 	inc	r0
      003557 86 06            [24] 4306 	mov	ar6,@r0
      003559 8A 82            [24] 4307 	mov	dpl,r2
      00355B 8B 83            [24] 4308 	mov	dph,r3
      00355D 8E F0            [24] 4309 	mov	b,r6
      00355F 12 4C 95         [24] 4310 	lcall	__gptrget
      003562 FA               [12] 4311 	mov	r2,a
      003563 A3               [24] 4312 	inc	dptr
      003564 12 4C 95         [24] 4313 	lcall	__gptrget
      003567 FB               [12] 4314 	mov	r3,a
      003568 4A               [12] 4315 	orl	a,r2
      003569 70 45            [24] 4316 	jnz	00146$
      00356B                       4317 00145$:
                                   4318 ;	vt100.c:488: vga_fillRect(x, y, VT100_SCREEN_WIDTH - x, VT100_CHAR_HEIGHT, term->back_color);
      00356B A8 08            [24] 4319 	mov	r0,_bp
      00356D 08               [12] 4320 	inc	r0
      00356E 74 09            [12] 4321 	mov	a,#0x09
      003570 26               [12] 4322 	add	a,@r0
      003571 FA               [12] 4323 	mov	r2,a
      003572 E4               [12] 4324 	clr	a
      003573 08               [12] 4325 	inc	r0
      003574 36               [12] 4326 	addc	a,@r0
      003575 FB               [12] 4327 	mov	r3,a
      003576 08               [12] 4328 	inc	r0
      003577 86 06            [24] 4329 	mov	ar6,@r0
      003579 8A 82            [24] 4330 	mov	dpl,r2
      00357B 8B 83            [24] 4331 	mov	dph,r3
      00357D 8E F0            [24] 4332 	mov	b,r6
      00357F 12 4C 95         [24] 4333 	lcall	__gptrget
      003582 FA               [12] 4334 	mov	r2,a
      003583 E5 08            [12] 4335 	mov	a,_bp
      003585 24 0C            [12] 4336 	add	a,#0x0c
      003587 F8               [12] 4337 	mov	r0,a
      003588 86 06            [24] 4338 	mov	ar6,@r0
      00358A 8E 03            [24] 4339 	mov	ar3,r6
      00358C 74 50            [12] 4340 	mov	a,#0x50
      00358E C3               [12] 4341 	clr	c
      00358F 9B               [12] 4342 	subb	a,r3
      003590 FB               [12] 4343 	mov	r3,a
      003591 E5 08            [12] 4344 	mov	a,_bp
      003593 24 0E            [12] 4345 	add	a,#0x0e
      003595 F8               [12] 4346 	mov	r0,a
      003596 86 05            [24] 4347 	mov	ar5,@r0
      003598 C0 02            [24] 4348 	push	ar2
      00359A 74 01            [12] 4349 	mov	a,#0x01
      00359C C0 E0            [24] 4350 	push	acc
      00359E C0 03            [24] 4351 	push	ar3
      0035A0 C0 05            [24] 4352 	push	ar5
      0035A2 8E 82            [24] 4353 	mov	dpl,r6
      0035A4 12 20 D9         [24] 4354 	lcall	_vga_fillRect
      0035A7 E5 81            [12] 4355 	mov	a,sp
      0035A9 24 FC            [12] 4356 	add	a,#0xfc
      0035AB F5 81            [12] 4357 	mov	sp,a
      0035AD 02 36 72         [24] 4358 	ljmp	00147$
      0035B0                       4359 00146$:
                                   4360 ;	vt100.c:489: } else if(term->narg == 1 && term->args[0] == 1){
      0035B0 EF               [12] 4361 	mov	a,r7
      0035B1 60 62            [24] 4362 	jz	00142$
      0035B3 A8 08            [24] 4363 	mov	r0,_bp
      0035B5 08               [12] 4364 	inc	r0
      0035B6 74 0D            [12] 4365 	mov	a,#0x0d
      0035B8 26               [12] 4366 	add	a,@r0
      0035B9 FC               [12] 4367 	mov	r4,a
      0035BA E4               [12] 4368 	clr	a
      0035BB 08               [12] 4369 	inc	r0
      0035BC 36               [12] 4370 	addc	a,@r0
      0035BD FD               [12] 4371 	mov	r5,a
      0035BE 08               [12] 4372 	inc	r0
      0035BF 86 06            [24] 4373 	mov	ar6,@r0
      0035C1 8C 82            [24] 4374 	mov	dpl,r4
      0035C3 8D 83            [24] 4375 	mov	dph,r5
      0035C5 8E F0            [24] 4376 	mov	b,r6
      0035C7 12 4C 95         [24] 4377 	lcall	__gptrget
      0035CA FC               [12] 4378 	mov	r4,a
      0035CB A3               [24] 4379 	inc	dptr
      0035CC 12 4C 95         [24] 4380 	lcall	__gptrget
      0035CF FD               [12] 4381 	mov	r5,a
      0035D0 BC 01 42         [24] 4382 	cjne	r4,#0x01,00142$
      0035D3 BD 00 3F         [24] 4383 	cjne	r5,#0x00,00142$
                                   4384 ;	vt100.c:491: vga_fillRect(0, y, x + VT100_CHAR_WIDTH, VT100_CHAR_HEIGHT, term->back_color);
      0035D6 A8 08            [24] 4385 	mov	r0,_bp
      0035D8 08               [12] 4386 	inc	r0
      0035D9 74 09            [12] 4387 	mov	a,#0x09
      0035DB 26               [12] 4388 	add	a,@r0
      0035DC FC               [12] 4389 	mov	r4,a
      0035DD E4               [12] 4390 	clr	a
      0035DE 08               [12] 4391 	inc	r0
      0035DF 36               [12] 4392 	addc	a,@r0
      0035E0 FD               [12] 4393 	mov	r5,a
      0035E1 08               [12] 4394 	inc	r0
      0035E2 86 06            [24] 4395 	mov	ar6,@r0
      0035E4 8C 82            [24] 4396 	mov	dpl,r4
      0035E6 8D 83            [24] 4397 	mov	dph,r5
      0035E8 8E F0            [24] 4398 	mov	b,r6
      0035EA 12 4C 95         [24] 4399 	lcall	__gptrget
      0035ED FC               [12] 4400 	mov	r4,a
      0035EE E5 08            [12] 4401 	mov	a,_bp
      0035F0 24 0C            [12] 4402 	add	a,#0x0c
      0035F2 F8               [12] 4403 	mov	r0,a
      0035F3 86 06            [24] 4404 	mov	ar6,@r0
      0035F5 0E               [12] 4405 	inc	r6
      0035F6 E5 08            [12] 4406 	mov	a,_bp
      0035F8 24 0E            [12] 4407 	add	a,#0x0e
      0035FA F8               [12] 4408 	mov	r0,a
      0035FB 86 05            [24] 4409 	mov	ar5,@r0
      0035FD C0 04            [24] 4410 	push	ar4
      0035FF 74 01            [12] 4411 	mov	a,#0x01
      003601 C0 E0            [24] 4412 	push	acc
      003603 C0 06            [24] 4413 	push	ar6
      003605 C0 05            [24] 4414 	push	ar5
      003607 75 82 00         [24] 4415 	mov	dpl,#0x00
      00360A 12 20 D9         [24] 4416 	lcall	_vga_fillRect
      00360D E5 81            [12] 4417 	mov	a,sp
      00360F 24 FC            [12] 4418 	add	a,#0xfc
      003611 F5 81            [12] 4419 	mov	sp,a
      003613 80 5D            [24] 4420 	sjmp	00147$
      003615                       4421 00142$:
                                   4422 ;	vt100.c:492: } else if(term->narg == 1 && term->args[0] == 2){
      003615 EF               [12] 4423 	mov	a,r7
      003616 60 5A            [24] 4424 	jz	00147$
      003618 A8 08            [24] 4425 	mov	r0,_bp
      00361A 08               [12] 4426 	inc	r0
      00361B 74 0D            [12] 4427 	mov	a,#0x0d
      00361D 26               [12] 4428 	add	a,@r0
      00361E FD               [12] 4429 	mov	r5,a
      00361F E4               [12] 4430 	clr	a
      003620 08               [12] 4431 	inc	r0
      003621 36               [12] 4432 	addc	a,@r0
      003622 FE               [12] 4433 	mov	r6,a
      003623 08               [12] 4434 	inc	r0
      003624 86 07            [24] 4435 	mov	ar7,@r0
      003626 8D 82            [24] 4436 	mov	dpl,r5
      003628 8E 83            [24] 4437 	mov	dph,r6
      00362A 8F F0            [24] 4438 	mov	b,r7
      00362C 12 4C 95         [24] 4439 	lcall	__gptrget
      00362F FD               [12] 4440 	mov	r5,a
      003630 A3               [24] 4441 	inc	dptr
      003631 12 4C 95         [24] 4442 	lcall	__gptrget
      003634 FE               [12] 4443 	mov	r6,a
      003635 BD 02 3A         [24] 4444 	cjne	r5,#0x02,00147$
      003638 BE 00 37         [24] 4445 	cjne	r6,#0x00,00147$
                                   4446 ;	vt100.c:494: vga_fillRect(0, y, VT100_SCREEN_WIDTH, VT100_CHAR_HEIGHT, term->back_color);
      00363B A8 08            [24] 4447 	mov	r0,_bp
      00363D 08               [12] 4448 	inc	r0
      00363E 74 09            [12] 4449 	mov	a,#0x09
      003640 26               [12] 4450 	add	a,@r0
      003641 FD               [12] 4451 	mov	r5,a
      003642 E4               [12] 4452 	clr	a
      003643 08               [12] 4453 	inc	r0
      003644 36               [12] 4454 	addc	a,@r0
      003645 FE               [12] 4455 	mov	r6,a
      003646 08               [12] 4456 	inc	r0
      003647 86 07            [24] 4457 	mov	ar7,@r0
      003649 8D 82            [24] 4458 	mov	dpl,r5
      00364B 8E 83            [24] 4459 	mov	dph,r6
      00364D 8F F0            [24] 4460 	mov	b,r7
      00364F 12 4C 95         [24] 4461 	lcall	__gptrget
      003652 FD               [12] 4462 	mov	r5,a
      003653 E5 08            [12] 4463 	mov	a,_bp
      003655 24 0E            [12] 4464 	add	a,#0x0e
      003657 F8               [12] 4465 	mov	r0,a
      003658 86 04            [24] 4466 	mov	ar4,@r0
      00365A C0 05            [24] 4467 	push	ar5
      00365C 74 01            [12] 4468 	mov	a,#0x01
      00365E C0 E0            [24] 4469 	push	acc
      003660 74 50            [12] 4470 	mov	a,#0x50
      003662 C0 E0            [24] 4471 	push	acc
      003664 C0 04            [24] 4472 	push	ar4
      003666 75 82 00         [24] 4473 	mov	dpl,#0x00
      003669 12 20 D9         [24] 4474 	lcall	_vga_fillRect
      00366C E5 81            [12] 4475 	mov	a,sp
      00366E 24 FC            [12] 4476 	add	a,#0xfc
      003670 F5 81            [12] 4477 	mov	sp,a
      003672                       4478 00147$:
                                   4479 ;	vt100.c:496: term->state = _st_idle; 
      003672 A8 08            [24] 4480 	mov	r0,_bp
      003674 08               [12] 4481 	inc	r0
      003675 74 16            [12] 4482 	mov	a,#0x16
      003677 26               [12] 4483 	add	a,@r0
      003678 FD               [12] 4484 	mov	r5,a
      003679 E4               [12] 4485 	clr	a
      00367A 08               [12] 4486 	inc	r0
      00367B 36               [12] 4487 	addc	a,@r0
      00367C FE               [12] 4488 	mov	r6,a
      00367D 08               [12] 4489 	inc	r0
      00367E 86 07            [24] 4490 	mov	ar7,@r0
      003680 8D 82            [24] 4491 	mov	dpl,r5
      003682 8E 83            [24] 4492 	mov	dph,r6
      003684 8F F0            [24] 4493 	mov	b,r7
      003686 74 85            [12] 4494 	mov	a,#__st_idle
      003688 12 4C 58         [24] 4495 	lcall	__gptrput
      00368B A3               [24] 4496 	inc	dptr
      00368C 74 44            [12] 4497 	mov	a,#(__st_idle >> 8)
      00368E 12 4C 58         [24] 4498 	lcall	__gptrput
                                   4499 ;	vt100.c:497: break;
      003691 02 3C E3         [24] 4500 	ljmp	00200$
                                   4501 ;	vt100.c:501: case 'M': // delete lines (args[0] = number of lines)
      003694                       4502 00151$:
                                   4503 ;	vt100.c:502: term->state = _st_idle;
      003694 A8 08            [24] 4504 	mov	r0,_bp
      003696 08               [12] 4505 	inc	r0
      003697 74 16            [12] 4506 	mov	a,#0x16
      003699 26               [12] 4507 	add	a,@r0
      00369A FD               [12] 4508 	mov	r5,a
      00369B E4               [12] 4509 	clr	a
      00369C 08               [12] 4510 	inc	r0
      00369D 36               [12] 4511 	addc	a,@r0
      00369E FE               [12] 4512 	mov	r6,a
      00369F 08               [12] 4513 	inc	r0
      0036A0 86 07            [24] 4514 	mov	ar7,@r0
      0036A2 8D 82            [24] 4515 	mov	dpl,r5
      0036A4 8E 83            [24] 4516 	mov	dph,r6
      0036A6 8F F0            [24] 4517 	mov	b,r7
      0036A8 74 85            [12] 4518 	mov	a,#__st_idle
      0036AA 12 4C 58         [24] 4519 	lcall	__gptrput
      0036AD A3               [24] 4520 	inc	dptr
      0036AE 74 44            [12] 4521 	mov	a,#(__st_idle >> 8)
      0036B0 12 4C 58         [24] 4522 	lcall	__gptrput
                                   4523 ;	vt100.c:503: break; 
      0036B3 02 3C E3         [24] 4524 	ljmp	00200$
                                   4525 ;	vt100.c:504: case 'P': {// delete characters args[0] or 1 in front of cursor
      0036B6                       4526 00152$:
                                   4527 ;	vt100.c:506: int n = ((term->narg > 0)?term->args[0]:1);
      0036B6 A8 08            [24] 4528 	mov	r0,_bp
      0036B8 08               [12] 4529 	inc	r0
      0036B9 74 0C            [12] 4530 	mov	a,#0x0c
      0036BB 26               [12] 4531 	add	a,@r0
      0036BC FD               [12] 4532 	mov	r5,a
      0036BD E4               [12] 4533 	clr	a
      0036BE 08               [12] 4534 	inc	r0
      0036BF 36               [12] 4535 	addc	a,@r0
      0036C0 FE               [12] 4536 	mov	r6,a
      0036C1 08               [12] 4537 	inc	r0
      0036C2 86 07            [24] 4538 	mov	ar7,@r0
      0036C4 8D 82            [24] 4539 	mov	dpl,r5
      0036C6 8E 83            [24] 4540 	mov	dph,r6
      0036C8 8F F0            [24] 4541 	mov	b,r7
      0036CA 12 4C 95         [24] 4542 	lcall	__gptrget
      0036CD 60 1F            [24] 4543 	jz	00217$
      0036CF A8 08            [24] 4544 	mov	r0,_bp
      0036D1 08               [12] 4545 	inc	r0
      0036D2 74 0D            [12] 4546 	mov	a,#0x0d
      0036D4 26               [12] 4547 	add	a,@r0
      0036D5 FE               [12] 4548 	mov	r6,a
      0036D6 E4               [12] 4549 	clr	a
      0036D7 08               [12] 4550 	inc	r0
      0036D8 36               [12] 4551 	addc	a,@r0
      0036D9 FD               [12] 4552 	mov	r5,a
      0036DA 08               [12] 4553 	inc	r0
      0036DB 86 07            [24] 4554 	mov	ar7,@r0
      0036DD 8E 82            [24] 4555 	mov	dpl,r6
      0036DF 8D 83            [24] 4556 	mov	dph,r5
      0036E1 8F F0            [24] 4557 	mov	b,r7
      0036E3 12 4C 95         [24] 4558 	lcall	__gptrget
      0036E6 FE               [12] 4559 	mov	r6,a
      0036E7 A3               [24] 4560 	inc	dptr
      0036E8 12 4C 95         [24] 4561 	lcall	__gptrget
      0036EB FF               [12] 4562 	mov	r7,a
      0036EC 80 04            [24] 4563 	sjmp	00218$
      0036EE                       4564 00217$:
      0036EE 7E 01            [12] 4565 	mov	r6,#0x01
      0036F0 7F 00            [12] 4566 	mov	r7,#0x00
      0036F2                       4567 00218$:
                                   4568 ;	vt100.c:507: _vt100_move(term, -n, 0);
      0036F2 C3               [12] 4569 	clr	c
      0036F3 E4               [12] 4570 	clr	a
      0036F4 9E               [12] 4571 	subb	a,r6
      0036F5 FC               [12] 4572 	mov	r4,a
      0036F6 E4               [12] 4573 	clr	a
      0036F7 9F               [12] 4574 	subb	a,r7
      0036F8 FD               [12] 4575 	mov	r5,a
      0036F9 C0 07            [24] 4576 	push	ar7
      0036FB C0 06            [24] 4577 	push	ar6
      0036FD E4               [12] 4578 	clr	a
      0036FE C0 E0            [24] 4579 	push	acc
      003700 C0 E0            [24] 4580 	push	acc
      003702 C0 04            [24] 4581 	push	ar4
      003704 C0 05            [24] 4582 	push	ar5
      003706 A8 08            [24] 4583 	mov	r0,_bp
      003708 08               [12] 4584 	inc	r0
      003709 86 82            [24] 4585 	mov	dpl,@r0
      00370B 08               [12] 4586 	inc	r0
      00370C 86 83            [24] 4587 	mov	dph,@r0
      00370E 08               [12] 4588 	inc	r0
      00370F 86 F0            [24] 4589 	mov	b,@r0
      003711 12 26 07         [24] 4590 	lcall	__vt100_move
      003714 E5 81            [12] 4591 	mov	a,sp
      003716 24 FC            [12] 4592 	add	a,#0xfc
      003718 F5 81            [12] 4593 	mov	sp,a
      00371A D0 06            [24] 4594 	pop	ar6
      00371C D0 07            [24] 4595 	pop	ar7
                                   4596 ;	vt100.c:508: for(int c = 0; c < n; c++){
      00371E 7C 00            [12] 4597 	mov	r4,#0x00
      003720 7D 00            [12] 4598 	mov	r5,#0x00
      003722                       4599 00198$:
      003722 C3               [12] 4600 	clr	c
      003723 EC               [12] 4601 	mov	a,r4
      003724 9E               [12] 4602 	subb	a,r6
      003725 ED               [12] 4603 	mov	a,r5
      003726 64 80            [12] 4604 	xrl	a,#0x80
      003728 8F F0            [24] 4605 	mov	b,r7
      00372A 63 F0 80         [24] 4606 	xrl	b,#0x80
      00372D 95 F0            [12] 4607 	subb	a,b
      00372F 50 2B            [24] 4608 	jnc	00153$
                                   4609 ;	vt100.c:509: _vt100_putc(term, ' ');
      003731 C0 07            [24] 4610 	push	ar7
      003733 C0 06            [24] 4611 	push	ar6
      003735 C0 05            [24] 4612 	push	ar5
      003737 C0 04            [24] 4613 	push	ar4
      003739 74 20            [12] 4614 	mov	a,#0x20
      00373B C0 E0            [24] 4615 	push	acc
      00373D A8 08            [24] 4616 	mov	r0,_bp
      00373F 08               [12] 4617 	inc	r0
      003740 86 82            [24] 4618 	mov	dpl,@r0
      003742 08               [12] 4619 	inc	r0
      003743 86 83            [24] 4620 	mov	dph,@r0
      003745 08               [12] 4621 	inc	r0
      003746 86 F0            [24] 4622 	mov	b,@r0
      003748 12 28 AC         [24] 4623 	lcall	__vt100_putc
      00374B 15 81            [12] 4624 	dec	sp
      00374D D0 04            [24] 4625 	pop	ar4
      00374F D0 05            [24] 4626 	pop	ar5
      003751 D0 06            [24] 4627 	pop	ar6
      003753 D0 07            [24] 4628 	pop	ar7
                                   4629 ;	vt100.c:508: for(int c = 0; c < n; c++){
      003755 0C               [12] 4630 	inc	r4
      003756 BC 00 C9         [24] 4631 	cjne	r4,#0x00,00198$
      003759 0D               [12] 4632 	inc	r5
      00375A 80 C6            [24] 4633 	sjmp	00198$
      00375C                       4634 00153$:
                                   4635 ;	vt100.c:511: term->state = _st_idle;
      00375C A8 08            [24] 4636 	mov	r0,_bp
      00375E 08               [12] 4637 	inc	r0
      00375F 74 16            [12] 4638 	mov	a,#0x16
      003761 26               [12] 4639 	add	a,@r0
      003762 FD               [12] 4640 	mov	r5,a
      003763 E4               [12] 4641 	clr	a
      003764 08               [12] 4642 	inc	r0
      003765 36               [12] 4643 	addc	a,@r0
      003766 FE               [12] 4644 	mov	r6,a
      003767 08               [12] 4645 	inc	r0
      003768 86 07            [24] 4646 	mov	ar7,@r0
      00376A 8D 82            [24] 4647 	mov	dpl,r5
      00376C 8E 83            [24] 4648 	mov	dph,r6
      00376E 8F F0            [24] 4649 	mov	b,r7
      003770 74 85            [12] 4650 	mov	a,#__st_idle
      003772 12 4C 58         [24] 4651 	lcall	__gptrput
      003775 A3               [24] 4652 	inc	dptr
      003776 74 44            [12] 4653 	mov	a,#(__st_idle >> 8)
      003778 12 4C 58         [24] 4654 	lcall	__gptrput
                                   4655 ;	vt100.c:512: break;
      00377B 02 3C E3         [24] 4656 	ljmp	00200$
                                   4657 ;	vt100.c:514: case 'c':{ // query device code
      00377E                       4658 00154$:
                                   4659 ;	vt100.c:516: term->state = _st_idle; 
      00377E A8 08            [24] 4660 	mov	r0,_bp
      003780 08               [12] 4661 	inc	r0
      003781 74 16            [12] 4662 	mov	a,#0x16
      003783 26               [12] 4663 	add	a,@r0
      003784 FD               [12] 4664 	mov	r5,a
      003785 E4               [12] 4665 	clr	a
      003786 08               [12] 4666 	inc	r0
      003787 36               [12] 4667 	addc	a,@r0
      003788 FE               [12] 4668 	mov	r6,a
      003789 08               [12] 4669 	inc	r0
      00378A 86 07            [24] 4670 	mov	ar7,@r0
      00378C 8D 82            [24] 4671 	mov	dpl,r5
      00378E 8E 83            [24] 4672 	mov	dph,r6
      003790 8F F0            [24] 4673 	mov	b,r7
      003792 74 85            [12] 4674 	mov	a,#__st_idle
      003794 12 4C 58         [24] 4675 	lcall	__gptrput
      003797 A3               [24] 4676 	inc	dptr
      003798 74 44            [12] 4677 	mov	a,#(__st_idle >> 8)
      00379A 12 4C 58         [24] 4678 	lcall	__gptrput
                                   4679 ;	vt100.c:517: break; 
      00379D 02 3C E3         [24] 4680 	ljmp	00200$
                                   4681 ;	vt100.c:519: case 'x': {
      0037A0                       4682 00155$:
                                   4683 ;	vt100.c:520: term->state = _st_idle;
      0037A0 A8 08            [24] 4684 	mov	r0,_bp
      0037A2 08               [12] 4685 	inc	r0
      0037A3 74 16            [12] 4686 	mov	a,#0x16
      0037A5 26               [12] 4687 	add	a,@r0
      0037A6 FD               [12] 4688 	mov	r5,a
      0037A7 E4               [12] 4689 	clr	a
      0037A8 08               [12] 4690 	inc	r0
      0037A9 36               [12] 4691 	addc	a,@r0
      0037AA FE               [12] 4692 	mov	r6,a
      0037AB 08               [12] 4693 	inc	r0
      0037AC 86 07            [24] 4694 	mov	ar7,@r0
      0037AE 8D 82            [24] 4695 	mov	dpl,r5
      0037B0 8E 83            [24] 4696 	mov	dph,r6
      0037B2 8F F0            [24] 4697 	mov	b,r7
      0037B4 74 85            [12] 4698 	mov	a,#__st_idle
      0037B6 12 4C 58         [24] 4699 	lcall	__gptrput
      0037B9 A3               [24] 4700 	inc	dptr
      0037BA 74 44            [12] 4701 	mov	a,#(__st_idle >> 8)
      0037BC 12 4C 58         [24] 4702 	lcall	__gptrput
                                   4703 ;	vt100.c:521: break;
      0037BF 02 3C E3         [24] 4704 	ljmp	00200$
                                   4705 ;	vt100.c:523: case 's':{// save cursor pos
      0037C2                       4706 00156$:
                                   4707 ;	vt100.c:524: term->saved_cursor_x = term->cursor_x;
      0037C2 A8 08            [24] 4708 	mov	r0,_bp
      0037C4 08               [12] 4709 	inc	r0
      0037C5 74 03            [12] 4710 	mov	a,#0x03
      0037C7 26               [12] 4711 	add	a,@r0
      0037C8 FD               [12] 4712 	mov	r5,a
      0037C9 E4               [12] 4713 	clr	a
      0037CA 08               [12] 4714 	inc	r0
      0037CB 36               [12] 4715 	addc	a,@r0
      0037CC FE               [12] 4716 	mov	r6,a
      0037CD 08               [12] 4717 	inc	r0
      0037CE 86 07            [24] 4718 	mov	ar7,@r0
      0037D0 A8 08            [24] 4719 	mov	r0,_bp
      0037D2 08               [12] 4720 	inc	r0
      0037D3 74 01            [12] 4721 	mov	a,#0x01
      0037D5 26               [12] 4722 	add	a,@r0
      0037D6 FA               [12] 4723 	mov	r2,a
      0037D7 E4               [12] 4724 	clr	a
      0037D8 08               [12] 4725 	inc	r0
      0037D9 36               [12] 4726 	addc	a,@r0
      0037DA FB               [12] 4727 	mov	r3,a
      0037DB 08               [12] 4728 	inc	r0
      0037DC 86 04            [24] 4729 	mov	ar4,@r0
      0037DE 8A 82            [24] 4730 	mov	dpl,r2
      0037E0 8B 83            [24] 4731 	mov	dph,r3
      0037E2 8C F0            [24] 4732 	mov	b,r4
      0037E4 12 4C 95         [24] 4733 	lcall	__gptrget
      0037E7 8D 82            [24] 4734 	mov	dpl,r5
      0037E9 8E 83            [24] 4735 	mov	dph,r6
      0037EB 8F F0            [24] 4736 	mov	b,r7
      0037ED 12 4C 58         [24] 4737 	lcall	__gptrput
                                   4738 ;	vt100.c:525: term->saved_cursor_y = term->cursor_y;
      0037F0 A8 08            [24] 4739 	mov	r0,_bp
      0037F2 08               [12] 4740 	inc	r0
      0037F3 74 04            [12] 4741 	mov	a,#0x04
      0037F5 26               [12] 4742 	add	a,@r0
      0037F6 FD               [12] 4743 	mov	r5,a
      0037F7 E4               [12] 4744 	clr	a
      0037F8 08               [12] 4745 	inc	r0
      0037F9 36               [12] 4746 	addc	a,@r0
      0037FA FE               [12] 4747 	mov	r6,a
      0037FB 08               [12] 4748 	inc	r0
      0037FC 86 07            [24] 4749 	mov	ar7,@r0
      0037FE A8 08            [24] 4750 	mov	r0,_bp
      003800 08               [12] 4751 	inc	r0
      003801 74 02            [12] 4752 	mov	a,#0x02
      003803 26               [12] 4753 	add	a,@r0
      003804 FA               [12] 4754 	mov	r2,a
      003805 E4               [12] 4755 	clr	a
      003806 08               [12] 4756 	inc	r0
      003807 36               [12] 4757 	addc	a,@r0
      003808 FB               [12] 4758 	mov	r3,a
      003809 08               [12] 4759 	inc	r0
      00380A 86 04            [24] 4760 	mov	ar4,@r0
      00380C 8A 82            [24] 4761 	mov	dpl,r2
      00380E 8B 83            [24] 4762 	mov	dph,r3
      003810 8C F0            [24] 4763 	mov	b,r4
      003812 12 4C 95         [24] 4764 	lcall	__gptrget
      003815 FA               [12] 4765 	mov	r2,a
      003816 8D 82            [24] 4766 	mov	dpl,r5
      003818 8E 83            [24] 4767 	mov	dph,r6
      00381A 8F F0            [24] 4768 	mov	b,r7
      00381C 12 4C 58         [24] 4769 	lcall	__gptrput
                                   4770 ;	vt100.c:526: term->state = _st_idle; 
      00381F A8 08            [24] 4771 	mov	r0,_bp
      003821 08               [12] 4772 	inc	r0
      003822 74 16            [12] 4773 	mov	a,#0x16
      003824 26               [12] 4774 	add	a,@r0
      003825 FD               [12] 4775 	mov	r5,a
      003826 E4               [12] 4776 	clr	a
      003827 08               [12] 4777 	inc	r0
      003828 36               [12] 4778 	addc	a,@r0
      003829 FE               [12] 4779 	mov	r6,a
      00382A 08               [12] 4780 	inc	r0
      00382B 86 07            [24] 4781 	mov	ar7,@r0
      00382D 8D 82            [24] 4782 	mov	dpl,r5
      00382F 8E 83            [24] 4783 	mov	dph,r6
      003831 8F F0            [24] 4784 	mov	b,r7
      003833 74 85            [12] 4785 	mov	a,#__st_idle
      003835 12 4C 58         [24] 4786 	lcall	__gptrput
      003838 A3               [24] 4787 	inc	dptr
      003839 74 44            [12] 4788 	mov	a,#(__st_idle >> 8)
      00383B 12 4C 58         [24] 4789 	lcall	__gptrput
                                   4790 ;	vt100.c:527: break;
      00383E 02 3C E3         [24] 4791 	ljmp	00200$
                                   4792 ;	vt100.c:529: case 'u':{// restore cursor pos
      003841                       4793 00157$:
                                   4794 ;	vt100.c:530: term->cursor_x = term->saved_cursor_x;
      003841 A8 08            [24] 4795 	mov	r0,_bp
      003843 08               [12] 4796 	inc	r0
      003844 74 01            [12] 4797 	mov	a,#0x01
      003846 26               [12] 4798 	add	a,@r0
      003847 FD               [12] 4799 	mov	r5,a
      003848 E4               [12] 4800 	clr	a
      003849 08               [12] 4801 	inc	r0
      00384A 36               [12] 4802 	addc	a,@r0
      00384B FE               [12] 4803 	mov	r6,a
      00384C 08               [12] 4804 	inc	r0
      00384D 86 07            [24] 4805 	mov	ar7,@r0
      00384F A8 08            [24] 4806 	mov	r0,_bp
      003851 08               [12] 4807 	inc	r0
      003852 74 03            [12] 4808 	mov	a,#0x03
      003854 26               [12] 4809 	add	a,@r0
      003855 FA               [12] 4810 	mov	r2,a
      003856 E4               [12] 4811 	clr	a
      003857 08               [12] 4812 	inc	r0
      003858 36               [12] 4813 	addc	a,@r0
      003859 FB               [12] 4814 	mov	r3,a
      00385A 08               [12] 4815 	inc	r0
      00385B 86 04            [24] 4816 	mov	ar4,@r0
      00385D 8A 82            [24] 4817 	mov	dpl,r2
      00385F 8B 83            [24] 4818 	mov	dph,r3
      003861 8C F0            [24] 4819 	mov	b,r4
      003863 12 4C 95         [24] 4820 	lcall	__gptrget
      003866 8D 82            [24] 4821 	mov	dpl,r5
      003868 8E 83            [24] 4822 	mov	dph,r6
      00386A 8F F0            [24] 4823 	mov	b,r7
      00386C 12 4C 58         [24] 4824 	lcall	__gptrput
                                   4825 ;	vt100.c:531: term->cursor_y = term->saved_cursor_y; 
      00386F A8 08            [24] 4826 	mov	r0,_bp
      003871 08               [12] 4827 	inc	r0
      003872 74 02            [12] 4828 	mov	a,#0x02
      003874 26               [12] 4829 	add	a,@r0
      003875 FD               [12] 4830 	mov	r5,a
      003876 E4               [12] 4831 	clr	a
      003877 08               [12] 4832 	inc	r0
      003878 36               [12] 4833 	addc	a,@r0
      003879 FE               [12] 4834 	mov	r6,a
      00387A 08               [12] 4835 	inc	r0
      00387B 86 07            [24] 4836 	mov	ar7,@r0
      00387D A8 08            [24] 4837 	mov	r0,_bp
      00387F 08               [12] 4838 	inc	r0
      003880 74 04            [12] 4839 	mov	a,#0x04
      003882 26               [12] 4840 	add	a,@r0
      003883 FA               [12] 4841 	mov	r2,a
      003884 E4               [12] 4842 	clr	a
      003885 08               [12] 4843 	inc	r0
      003886 36               [12] 4844 	addc	a,@r0
      003887 FB               [12] 4845 	mov	r3,a
      003888 08               [12] 4846 	inc	r0
      003889 86 04            [24] 4847 	mov	ar4,@r0
      00388B 8A 82            [24] 4848 	mov	dpl,r2
      00388D 8B 83            [24] 4849 	mov	dph,r3
      00388F 8C F0            [24] 4850 	mov	b,r4
      003891 12 4C 95         [24] 4851 	lcall	__gptrget
      003894 FA               [12] 4852 	mov	r2,a
      003895 8D 82            [24] 4853 	mov	dpl,r5
      003897 8E 83            [24] 4854 	mov	dph,r6
      003899 8F F0            [24] 4855 	mov	b,r7
      00389B 12 4C 58         [24] 4856 	lcall	__gptrput
                                   4857 ;	vt100.c:533: term->state = _st_idle; 
      00389E A8 08            [24] 4858 	mov	r0,_bp
      0038A0 08               [12] 4859 	inc	r0
      0038A1 74 16            [12] 4860 	mov	a,#0x16
      0038A3 26               [12] 4861 	add	a,@r0
      0038A4 FD               [12] 4862 	mov	r5,a
      0038A5 E4               [12] 4863 	clr	a
      0038A6 08               [12] 4864 	inc	r0
      0038A7 36               [12] 4865 	addc	a,@r0
      0038A8 FE               [12] 4866 	mov	r6,a
      0038A9 08               [12] 4867 	inc	r0
      0038AA 86 07            [24] 4868 	mov	ar7,@r0
      0038AC 8D 82            [24] 4869 	mov	dpl,r5
      0038AE 8E 83            [24] 4870 	mov	dph,r6
      0038B0 8F F0            [24] 4871 	mov	b,r7
      0038B2 74 85            [12] 4872 	mov	a,#__st_idle
      0038B4 12 4C 58         [24] 4873 	lcall	__gptrput
      0038B7 A3               [24] 4874 	inc	dptr
      0038B8 74 44            [12] 4875 	mov	a,#(__st_idle >> 8)
      0038BA 12 4C 58         [24] 4876 	lcall	__gptrput
                                   4877 ;	vt100.c:534: break;
      0038BD 02 3C E3         [24] 4878 	ljmp	00200$
                                   4879 ;	vt100.c:537: case 'l': {
      0038C0                       4880 00159$:
                                   4881 ;	vt100.c:538: term->state = _st_idle;
      0038C0 A8 08            [24] 4882 	mov	r0,_bp
      0038C2 08               [12] 4883 	inc	r0
      0038C3 74 16            [12] 4884 	mov	a,#0x16
      0038C5 26               [12] 4885 	add	a,@r0
      0038C6 FD               [12] 4886 	mov	r5,a
      0038C7 E4               [12] 4887 	clr	a
      0038C8 08               [12] 4888 	inc	r0
      0038C9 36               [12] 4889 	addc	a,@r0
      0038CA FE               [12] 4890 	mov	r6,a
      0038CB 08               [12] 4891 	inc	r0
      0038CC 86 07            [24] 4892 	mov	ar7,@r0
      0038CE 8D 82            [24] 4893 	mov	dpl,r5
      0038D0 8E 83            [24] 4894 	mov	dph,r6
      0038D2 8F F0            [24] 4895 	mov	b,r7
      0038D4 74 85            [12] 4896 	mov	a,#__st_idle
      0038D6 12 4C 58         [24] 4897 	lcall	__gptrput
      0038D9 A3               [24] 4898 	inc	dptr
      0038DA 74 44            [12] 4899 	mov	a,#(__st_idle >> 8)
      0038DC 12 4C 58         [24] 4900 	lcall	__gptrput
                                   4901 ;	vt100.c:539: break;
      0038DF 02 3C E3         [24] 4902 	ljmp	00200$
                                   4903 ;	vt100.c:542: case 'g': {
      0038E2                       4904 00160$:
                                   4905 ;	vt100.c:543: term->state = _st_idle;
      0038E2 A8 08            [24] 4906 	mov	r0,_bp
      0038E4 08               [12] 4907 	inc	r0
      0038E5 74 16            [12] 4908 	mov	a,#0x16
      0038E7 26               [12] 4909 	add	a,@r0
      0038E8 FD               [12] 4910 	mov	r5,a
      0038E9 E4               [12] 4911 	clr	a
      0038EA 08               [12] 4912 	inc	r0
      0038EB 36               [12] 4913 	addc	a,@r0
      0038EC FE               [12] 4914 	mov	r6,a
      0038ED 08               [12] 4915 	inc	r0
      0038EE 86 07            [24] 4916 	mov	ar7,@r0
      0038F0 8D 82            [24] 4917 	mov	dpl,r5
      0038F2 8E 83            [24] 4918 	mov	dph,r6
      0038F4 8F F0            [24] 4919 	mov	b,r7
      0038F6 74 85            [12] 4920 	mov	a,#__st_idle
      0038F8 12 4C 58         [24] 4921 	lcall	__gptrput
      0038FB A3               [24] 4922 	inc	dptr
      0038FC 74 44            [12] 4923 	mov	a,#(__st_idle >> 8)
      0038FE 12 4C 58         [24] 4924 	lcall	__gptrput
                                   4925 ;	vt100.c:544: break;
      003901 02 3C E3         [24] 4926 	ljmp	00200$
                                   4927 ;	vt100.c:546: case 'm': { // sets colors. Accepts up to 3 args
      003904                       4928 00161$:
                                   4929 ;	vt100.c:548: if(!term->narg){
      003904 A8 08            [24] 4930 	mov	r0,_bp
      003906 08               [12] 4931 	inc	r0
      003907 74 0C            [12] 4932 	mov	a,#0x0c
      003909 26               [12] 4933 	add	a,@r0
      00390A FD               [12] 4934 	mov	r5,a
      00390B E4               [12] 4935 	clr	a
      00390C 08               [12] 4936 	inc	r0
      00390D 36               [12] 4937 	addc	a,@r0
      00390E FE               [12] 4938 	mov	r6,a
      00390F 08               [12] 4939 	inc	r0
      003910 86 07            [24] 4940 	mov	ar7,@r0
      003912 8D 82            [24] 4941 	mov	dpl,r5
      003914 8E 83            [24] 4942 	mov	dph,r6
      003916 8F F0            [24] 4943 	mov	b,r7
      003918 12 4C 95         [24] 4944 	lcall	__gptrget
      00391B 70 31            [24] 4945 	jnz	00259$
                                   4946 ;	vt100.c:549: term->front_color = 0xff;
      00391D A8 08            [24] 4947 	mov	r0,_bp
      00391F 08               [12] 4948 	inc	r0
      003920 74 0A            [12] 4949 	mov	a,#0x0a
      003922 26               [12] 4950 	add	a,@r0
      003923 FA               [12] 4951 	mov	r2,a
      003924 E4               [12] 4952 	clr	a
      003925 08               [12] 4953 	inc	r0
      003926 36               [12] 4954 	addc	a,@r0
      003927 FB               [12] 4955 	mov	r3,a
      003928 08               [12] 4956 	inc	r0
      003929 86 04            [24] 4957 	mov	ar4,@r0
      00392B 8A 82            [24] 4958 	mov	dpl,r2
      00392D 8B 83            [24] 4959 	mov	dph,r3
      00392F 8C F0            [24] 4960 	mov	b,r4
      003931 74 FF            [12] 4961 	mov	a,#0xff
      003933 12 4C 58         [24] 4962 	lcall	__gptrput
                                   4963 ;	vt100.c:550: term->back_color = 0x00;
      003936 A8 08            [24] 4964 	mov	r0,_bp
      003938 08               [12] 4965 	inc	r0
      003939 74 09            [12] 4966 	mov	a,#0x09
      00393B 26               [12] 4967 	add	a,@r0
      00393C FA               [12] 4968 	mov	r2,a
      00393D E4               [12] 4969 	clr	a
      00393E 08               [12] 4970 	inc	r0
      00393F 36               [12] 4971 	addc	a,@r0
      003940 FB               [12] 4972 	mov	r3,a
      003941 08               [12] 4973 	inc	r0
      003942 86 04            [24] 4974 	mov	ar4,@r0
      003944 8A 82            [24] 4975 	mov	dpl,r2
      003946 8B 83            [24] 4976 	mov	dph,r3
      003948 8C F0            [24] 4977 	mov	b,r4
      00394A E4               [12] 4978 	clr	a
      00394B 12 4C 58         [24] 4979 	lcall	__gptrput
                                   4980 ;	vt100.c:552: while(term->narg){
      00394E                       4981 00259$:
      00394E A8 08            [24] 4982 	mov	r0,_bp
      003950 08               [12] 4983 	inc	r0
      003951 E5 08            [12] 4984 	mov	a,_bp
      003953 24 09            [12] 4985 	add	a,#0x09
      003955 F9               [12] 4986 	mov	r1,a
      003956 74 0D            [12] 4987 	mov	a,#0x0d
      003958 26               [12] 4988 	add	a,@r0
      003959 F7               [12] 4989 	mov	@r1,a
      00395A E4               [12] 4990 	clr	a
      00395B 08               [12] 4991 	inc	r0
      00395C 36               [12] 4992 	addc	a,@r0
      00395D 09               [12] 4993 	inc	r1
      00395E F7               [12] 4994 	mov	@r1,a
      00395F 08               [12] 4995 	inc	r0
      003960 E6               [12] 4996 	mov	a,@r0
      003961 09               [12] 4997 	inc	r1
      003962 F7               [12] 4998 	mov	@r1,a
      003963                       4999 00173$:
      003963 8D 82            [24] 5000 	mov	dpl,r5
      003965 8E 83            [24] 5001 	mov	dph,r6
      003967 8F F0            [24] 5002 	mov	b,r7
      003969 12 4C 95         [24] 5003 	lcall	__gptrget
      00396C 70 03            [24] 5004 	jnz	00454$
      00396E 02 3B 14         [24] 5005 	ljmp	00175$
      003971                       5006 00454$:
                                   5007 ;	vt100.c:553: term->narg--; 
      003971 8D 82            [24] 5008 	mov	dpl,r5
      003973 8E 83            [24] 5009 	mov	dph,r6
      003975 8F F0            [24] 5010 	mov	b,r7
      003977 12 4C 95         [24] 5011 	lcall	__gptrget
      00397A FC               [12] 5012 	mov	r4,a
      00397B 1C               [12] 5013 	dec	r4
      00397C 8D 82            [24] 5014 	mov	dpl,r5
      00397E 8E 83            [24] 5015 	mov	dph,r6
      003980 8F F0            [24] 5016 	mov	b,r7
                                   5017 ;	vt100.c:554: int n = term->args[term->narg];
      003982 EC               [12] 5018 	mov	a,r4
      003983 12 4C 58         [24] 5019 	lcall	__gptrput
      003986 25 E0            [12] 5020 	add	a,acc
      003988 FC               [12] 5021 	mov	r4,a
      003989 E5 08            [12] 5022 	mov	a,_bp
      00398B 24 09            [12] 5023 	add	a,#0x09
      00398D F8               [12] 5024 	mov	r0,a
      00398E EC               [12] 5025 	mov	a,r4
      00398F 26               [12] 5026 	add	a,@r0
      003990 FB               [12] 5027 	mov	r3,a
      003991 E4               [12] 5028 	clr	a
      003992 08               [12] 5029 	inc	r0
      003993 36               [12] 5030 	addc	a,@r0
      003994 FC               [12] 5031 	mov	r4,a
      003995 08               [12] 5032 	inc	r0
      003996 86 02            [24] 5033 	mov	ar2,@r0
      003998 8B 82            [24] 5034 	mov	dpl,r3
      00399A 8C 83            [24] 5035 	mov	dph,r4
      00399C 8A F0            [24] 5036 	mov	b,r2
      00399E E5 08            [12] 5037 	mov	a,_bp
      0039A0 24 0C            [12] 5038 	add	a,#0x0c
      0039A2 F8               [12] 5039 	mov	r0,a
      0039A3 12 4C 95         [24] 5040 	lcall	__gptrget
      0039A6 F6               [12] 5041 	mov	@r0,a
      0039A7 A3               [24] 5042 	inc	dptr
      0039A8 12 4C 95         [24] 5043 	lcall	__gptrget
      0039AB 08               [12] 5044 	inc	r0
      0039AC F6               [12] 5045 	mov	@r0,a
                                   5046 ;	vt100.c:565: if(n == 0){ // all attributes off
      0039AD E5 08            [12] 5047 	mov	a,_bp
      0039AF 24 0C            [12] 5048 	add	a,#0x0c
      0039B1 F8               [12] 5049 	mov	r0,a
      0039B2 E6               [12] 5050 	mov	a,@r0
      0039B3 08               [12] 5051 	inc	r0
      0039B4 46               [12] 5052 	orl	a,@r0
      0039B5 70 71            [24] 5053 	jnz	00165$
                                   5054 ;	vt100.c:566: term->front_color = 0xff;
      0039B7 C0 05            [24] 5055 	push	ar5
      0039B9 C0 06            [24] 5056 	push	ar6
      0039BB C0 07            [24] 5057 	push	ar7
      0039BD A8 08            [24] 5058 	mov	r0,_bp
      0039BF 08               [12] 5059 	inc	r0
      0039C0 74 0A            [12] 5060 	mov	a,#0x0a
      0039C2 26               [12] 5061 	add	a,@r0
      0039C3 FA               [12] 5062 	mov	r2,a
      0039C4 E4               [12] 5063 	clr	a
      0039C5 08               [12] 5064 	inc	r0
      0039C6 36               [12] 5065 	addc	a,@r0
      0039C7 FE               [12] 5066 	mov	r6,a
      0039C8 08               [12] 5067 	inc	r0
      0039C9 86 07            [24] 5068 	mov	ar7,@r0
      0039CB 8A 82            [24] 5069 	mov	dpl,r2
      0039CD 8E 83            [24] 5070 	mov	dph,r6
      0039CF 8F F0            [24] 5071 	mov	b,r7
      0039D1 74 FF            [12] 5072 	mov	a,#0xff
      0039D3 12 4C 58         [24] 5073 	lcall	__gptrput
                                   5074 ;	vt100.c:567: term->back_color = 0x00;
      0039D6 A8 08            [24] 5075 	mov	r0,_bp
      0039D8 08               [12] 5076 	inc	r0
      0039D9 74 09            [12] 5077 	mov	a,#0x09
      0039DB 26               [12] 5078 	add	a,@r0
      0039DC FB               [12] 5079 	mov	r3,a
      0039DD E4               [12] 5080 	clr	a
      0039DE 08               [12] 5081 	inc	r0
      0039DF 36               [12] 5082 	addc	a,@r0
      0039E0 FC               [12] 5083 	mov	r4,a
      0039E1 08               [12] 5084 	inc	r0
      0039E2 86 05            [24] 5085 	mov	ar5,@r0
      0039E4 8B 82            [24] 5086 	mov	dpl,r3
      0039E6 8C 83            [24] 5087 	mov	dph,r4
      0039E8 8D F0            [24] 5088 	mov	b,r5
      0039EA E4               [12] 5089 	clr	a
      0039EB 12 4C 58         [24] 5090 	lcall	__gptrput
                                   5091 ;	vt100.c:569: vga_setFrontColor(term->front_color);
      0039EE 8A 82            [24] 5092 	mov	dpl,r2
      0039F0 8E 83            [24] 5093 	mov	dph,r6
      0039F2 8F F0            [24] 5094 	mov	b,r7
      0039F4 12 4C 95         [24] 5095 	lcall	__gptrget
      0039F7 F5 82            [12] 5096 	mov	dpl,a
      0039F9 C0 07            [24] 5097 	push	ar7
      0039FB C0 06            [24] 5098 	push	ar6
      0039FD C0 05            [24] 5099 	push	ar5
      0039FF C0 04            [24] 5100 	push	ar4
      003A01 C0 03            [24] 5101 	push	ar3
      003A03 12 20 CD         [24] 5102 	lcall	_vga_setFrontColor
      003A06 D0 03            [24] 5103 	pop	ar3
      003A08 D0 04            [24] 5104 	pop	ar4
      003A0A D0 05            [24] 5105 	pop	ar5
                                   5106 ;	vt100.c:570: vga_setBackColor(term->back_color);
      003A0C 8B 82            [24] 5107 	mov	dpl,r3
      003A0E 8C 83            [24] 5108 	mov	dph,r4
      003A10 8D F0            [24] 5109 	mov	b,r5
      003A12 12 4C 95         [24] 5110 	lcall	__gptrget
      003A15 F5 82            [12] 5111 	mov	dpl,a
      003A17 C0 05            [24] 5112 	push	ar5
      003A19 12 20 C1         [24] 5113 	lcall	_vga_setBackColor
      003A1C D0 05            [24] 5114 	pop	ar5
      003A1E D0 06            [24] 5115 	pop	ar6
      003A20 D0 07            [24] 5116 	pop	ar7
                                   5117 ;	vt100.c:627: term->state = _st_idle; 
      003A22 D0 07            [24] 5118 	pop	ar7
      003A24 D0 06            [24] 5119 	pop	ar6
      003A26 D0 05            [24] 5120 	pop	ar5
                                   5121 ;	vt100.c:570: vga_setBackColor(term->back_color);
      003A28                       5122 00165$:
                                   5123 ;	vt100.c:572: if(n >= 30 && n < 38){ // fg colors
      003A28 E5 08            [12] 5124 	mov	a,_bp
      003A2A 24 0C            [12] 5125 	add	a,#0x0c
      003A2C F8               [12] 5126 	mov	r0,a
      003A2D C3               [12] 5127 	clr	c
      003A2E E6               [12] 5128 	mov	a,@r0
      003A2F 94 1E            [12] 5129 	subb	a,#0x1e
      003A31 08               [12] 5130 	inc	r0
      003A32 E6               [12] 5131 	mov	a,@r0
      003A33 64 80            [12] 5132 	xrl	a,#0x80
      003A35 94 80            [12] 5133 	subb	a,#0x80
      003A37 40 62            [24] 5134 	jc	00170$
      003A39 E5 08            [12] 5135 	mov	a,_bp
      003A3B 24 0C            [12] 5136 	add	a,#0x0c
      003A3D F8               [12] 5137 	mov	r0,a
      003A3E C3               [12] 5138 	clr	c
      003A3F E6               [12] 5139 	mov	a,@r0
      003A40 94 26            [12] 5140 	subb	a,#0x26
      003A42 08               [12] 5141 	inc	r0
      003A43 E6               [12] 5142 	mov	a,@r0
      003A44 64 80            [12] 5143 	xrl	a,#0x80
      003A46 94 80            [12] 5144 	subb	a,#0x80
      003A48 50 51            [24] 5145 	jnc	00170$
                                   5146 ;	vt100.c:573: term->front_color = colors[n-30]; 
      003A4A C0 05            [24] 5147 	push	ar5
      003A4C C0 06            [24] 5148 	push	ar6
      003A4E C0 07            [24] 5149 	push	ar7
      003A50 A8 08            [24] 5150 	mov	r0,_bp
      003A52 08               [12] 5151 	inc	r0
      003A53 74 0A            [12] 5152 	mov	a,#0x0a
      003A55 26               [12] 5153 	add	a,@r0
      003A56 FA               [12] 5154 	mov	r2,a
      003A57 E4               [12] 5155 	clr	a
      003A58 08               [12] 5156 	inc	r0
      003A59 36               [12] 5157 	addc	a,@r0
      003A5A FB               [12] 5158 	mov	r3,a
      003A5B 08               [12] 5159 	inc	r0
      003A5C 86 04            [24] 5160 	mov	ar4,@r0
      003A5E E5 08            [12] 5161 	mov	a,_bp
      003A60 24 0C            [12] 5162 	add	a,#0x0c
      003A62 F8               [12] 5163 	mov	r0,a
      003A63 E6               [12] 5164 	mov	a,@r0
      003A64 24 E2            [12] 5165 	add	a,#0xe2
      003A66 FF               [12] 5166 	mov	r7,a
      003A67 33               [12] 5167 	rlc	a
      003A68 95 E0            [12] 5168 	subb	a,acc
      003A6A FE               [12] 5169 	mov	r6,a
      003A6B EF               [12] 5170 	mov	a,r7
      003A6C 24 B6            [12] 5171 	add	a,#__st_esc_sq_bracket_colors_458753_206
      003A6E F5 82            [12] 5172 	mov	dpl,a
      003A70 EE               [12] 5173 	mov	a,r6
      003A71 34 4D            [12] 5174 	addc	a,#(__st_esc_sq_bracket_colors_458753_206 >> 8)
      003A73 F5 83            [12] 5175 	mov	dph,a
      003A75 E4               [12] 5176 	clr	a
      003A76 93               [24] 5177 	movc	a,@a+dptr
      003A77 FF               [12] 5178 	mov	r7,a
      003A78 8A 82            [24] 5179 	mov	dpl,r2
      003A7A 8B 83            [24] 5180 	mov	dph,r3
      003A7C 8C F0            [24] 5181 	mov	b,r4
      003A7E 12 4C 58         [24] 5182 	lcall	__gptrput
                                   5183 ;	vt100.c:574: vga_setFrontColor(term->front_color);
      003A81 8F 82            [24] 5184 	mov	dpl,r7
      003A83 C0 07            [24] 5185 	push	ar7
      003A85 C0 06            [24] 5186 	push	ar6
      003A87 C0 05            [24] 5187 	push	ar5
      003A89 12 20 CD         [24] 5188 	lcall	_vga_setFrontColor
      003A8C D0 05            [24] 5189 	pop	ar5
      003A8E D0 06            [24] 5190 	pop	ar6
      003A90 D0 07            [24] 5191 	pop	ar7
      003A92 D0 07            [24] 5192 	pop	ar7
      003A94 D0 06            [24] 5193 	pop	ar6
      003A96 D0 05            [24] 5194 	pop	ar5
      003A98 02 39 63         [24] 5195 	ljmp	00173$
      003A9B                       5196 00170$:
                                   5197 ;	vt100.c:575: } else if(n >= 40 && n < 48){
      003A9B E5 08            [12] 5198 	mov	a,_bp
      003A9D 24 0C            [12] 5199 	add	a,#0x0c
      003A9F F8               [12] 5200 	mov	r0,a
      003AA0 C3               [12] 5201 	clr	c
      003AA1 E6               [12] 5202 	mov	a,@r0
      003AA2 94 28            [12] 5203 	subb	a,#0x28
      003AA4 08               [12] 5204 	inc	r0
      003AA5 E6               [12] 5205 	mov	a,@r0
      003AA6 64 80            [12] 5206 	xrl	a,#0x80
      003AA8 94 80            [12] 5207 	subb	a,#0x80
      003AAA 50 03            [24] 5208 	jnc	00458$
      003AAC 02 39 63         [24] 5209 	ljmp	00173$
      003AAF                       5210 00458$:
      003AAF E5 08            [12] 5211 	mov	a,_bp
      003AB1 24 0C            [12] 5212 	add	a,#0x0c
      003AB3 F8               [12] 5213 	mov	r0,a
      003AB4 C3               [12] 5214 	clr	c
      003AB5 E6               [12] 5215 	mov	a,@r0
      003AB6 94 30            [12] 5216 	subb	a,#0x30
      003AB8 08               [12] 5217 	inc	r0
      003AB9 E6               [12] 5218 	mov	a,@r0
      003ABA 64 80            [12] 5219 	xrl	a,#0x80
      003ABC 94 80            [12] 5220 	subb	a,#0x80
      003ABE 40 03            [24] 5221 	jc	00459$
      003AC0 02 39 63         [24] 5222 	ljmp	00173$
      003AC3                       5223 00459$:
                                   5224 ;	vt100.c:576: term->back_color = colors[n-40]; 
      003AC3 C0 05            [24] 5225 	push	ar5
      003AC5 C0 06            [24] 5226 	push	ar6
      003AC7 C0 07            [24] 5227 	push	ar7
      003AC9 A8 08            [24] 5228 	mov	r0,_bp
      003ACB 08               [12] 5229 	inc	r0
      003ACC 74 09            [12] 5230 	mov	a,#0x09
      003ACE 26               [12] 5231 	add	a,@r0
      003ACF FA               [12] 5232 	mov	r2,a
      003AD0 E4               [12] 5233 	clr	a
      003AD1 08               [12] 5234 	inc	r0
      003AD2 36               [12] 5235 	addc	a,@r0
      003AD3 FB               [12] 5236 	mov	r3,a
      003AD4 08               [12] 5237 	inc	r0
      003AD5 86 04            [24] 5238 	mov	ar4,@r0
      003AD7 E5 08            [12] 5239 	mov	a,_bp
      003AD9 24 0C            [12] 5240 	add	a,#0x0c
      003ADB F8               [12] 5241 	mov	r0,a
      003ADC E6               [12] 5242 	mov	a,@r0
      003ADD 24 D8            [12] 5243 	add	a,#0xd8
      003ADF FF               [12] 5244 	mov	r7,a
      003AE0 33               [12] 5245 	rlc	a
      003AE1 95 E0            [12] 5246 	subb	a,acc
      003AE3 FE               [12] 5247 	mov	r6,a
      003AE4 EF               [12] 5248 	mov	a,r7
      003AE5 24 B6            [12] 5249 	add	a,#__st_esc_sq_bracket_colors_458753_206
      003AE7 F5 82            [12] 5250 	mov	dpl,a
      003AE9 EE               [12] 5251 	mov	a,r6
      003AEA 34 4D            [12] 5252 	addc	a,#(__st_esc_sq_bracket_colors_458753_206 >> 8)
      003AEC F5 83            [12] 5253 	mov	dph,a
      003AEE E4               [12] 5254 	clr	a
      003AEF 93               [24] 5255 	movc	a,@a+dptr
      003AF0 FF               [12] 5256 	mov	r7,a
      003AF1 8A 82            [24] 5257 	mov	dpl,r2
      003AF3 8B 83            [24] 5258 	mov	dph,r3
      003AF5 8C F0            [24] 5259 	mov	b,r4
      003AF7 12 4C 58         [24] 5260 	lcall	__gptrput
                                   5261 ;	vt100.c:577: vga_setBackColor(term->back_color); 
      003AFA 8F 82            [24] 5262 	mov	dpl,r7
      003AFC C0 07            [24] 5263 	push	ar7
      003AFE C0 06            [24] 5264 	push	ar6
      003B00 C0 05            [24] 5265 	push	ar5
      003B02 12 20 C1         [24] 5266 	lcall	_vga_setBackColor
      003B05 D0 05            [24] 5267 	pop	ar5
      003B07 D0 06            [24] 5268 	pop	ar6
      003B09 D0 07            [24] 5269 	pop	ar7
      003B0B D0 07            [24] 5270 	pop	ar7
      003B0D D0 06            [24] 5271 	pop	ar6
      003B0F D0 05            [24] 5272 	pop	ar5
      003B11 02 39 63         [24] 5273 	ljmp	00173$
      003B14                       5274 00175$:
                                   5275 ;	vt100.c:580: term->state = _st_idle; 
      003B14 A8 08            [24] 5276 	mov	r0,_bp
      003B16 08               [12] 5277 	inc	r0
      003B17 74 16            [12] 5278 	mov	a,#0x16
      003B19 26               [12] 5279 	add	a,@r0
      003B1A FD               [12] 5280 	mov	r5,a
      003B1B E4               [12] 5281 	clr	a
      003B1C 08               [12] 5282 	inc	r0
      003B1D 36               [12] 5283 	addc	a,@r0
      003B1E FE               [12] 5284 	mov	r6,a
      003B1F 08               [12] 5285 	inc	r0
      003B20 86 07            [24] 5286 	mov	ar7,@r0
      003B22 8D 82            [24] 5287 	mov	dpl,r5
      003B24 8E 83            [24] 5288 	mov	dph,r6
      003B26 8F F0            [24] 5289 	mov	b,r7
      003B28 74 85            [12] 5290 	mov	a,#__st_idle
      003B2A 12 4C 58         [24] 5291 	lcall	__gptrput
      003B2D A3               [24] 5292 	inc	dptr
      003B2E 74 44            [12] 5293 	mov	a,#(__st_idle >> 8)
      003B30 12 4C 58         [24] 5294 	lcall	__gptrput
                                   5295 ;	vt100.c:581: break;
      003B33 02 3C E3         [24] 5296 	ljmp	00200$
                                   5297 ;	vt100.c:584: case '@': // Insert Characters          
      003B36                       5298 00176$:
                                   5299 ;	vt100.c:585: term->state = _st_idle;
      003B36 A8 08            [24] 5300 	mov	r0,_bp
      003B38 08               [12] 5301 	inc	r0
      003B39 74 16            [12] 5302 	mov	a,#0x16
      003B3B 26               [12] 5303 	add	a,@r0
      003B3C FD               [12] 5304 	mov	r5,a
      003B3D E4               [12] 5305 	clr	a
      003B3E 08               [12] 5306 	inc	r0
      003B3F 36               [12] 5307 	addc	a,@r0
      003B40 FE               [12] 5308 	mov	r6,a
      003B41 08               [12] 5309 	inc	r0
      003B42 86 07            [24] 5310 	mov	ar7,@r0
      003B44 8D 82            [24] 5311 	mov	dpl,r5
      003B46 8E 83            [24] 5312 	mov	dph,r6
      003B48 8F F0            [24] 5313 	mov	b,r7
      003B4A 74 85            [12] 5314 	mov	a,#__st_idle
      003B4C 12 4C 58         [24] 5315 	lcall	__gptrput
      003B4F A3               [24] 5316 	inc	dptr
      003B50 74 44            [12] 5317 	mov	a,#(__st_idle >> 8)
      003B52 12 4C 58         [24] 5318 	lcall	__gptrput
                                   5319 ;	vt100.c:586: break; 
      003B55 02 3C E3         [24] 5320 	ljmp	00200$
                                   5321 ;	vt100.c:587: case 'r': // Set scroll region (top and bottom margins)
      003B58                       5322 00177$:
                                   5323 ;	vt100.c:590: if(term->narg == 2 && term->args[0] < term->args[1]){
      003B58 A8 08            [24] 5324 	mov	r0,_bp
      003B5A 08               [12] 5325 	inc	r0
      003B5B 74 0C            [12] 5326 	mov	a,#0x0c
      003B5D 26               [12] 5327 	add	a,@r0
      003B5E FD               [12] 5328 	mov	r5,a
      003B5F E4               [12] 5329 	clr	a
      003B60 08               [12] 5330 	inc	r0
      003B61 36               [12] 5331 	addc	a,@r0
      003B62 FE               [12] 5332 	mov	r6,a
      003B63 08               [12] 5333 	inc	r0
      003B64 86 07            [24] 5334 	mov	ar7,@r0
      003B66 8D 82            [24] 5335 	mov	dpl,r5
      003B68 8E 83            [24] 5336 	mov	dph,r6
      003B6A 8F F0            [24] 5337 	mov	b,r7
      003B6C 12 4C 95         [24] 5338 	lcall	__gptrget
      003B6F FD               [12] 5339 	mov	r5,a
      003B70 BD 02 02         [24] 5340 	cjne	r5,#0x02,00460$
      003B73 80 03            [24] 5341 	sjmp	00461$
      003B75                       5342 00460$:
      003B75 02 3C 3C         [24] 5343 	ljmp	00179$
      003B78                       5344 00461$:
      003B78 A8 08            [24] 5345 	mov	r0,_bp
      003B7A 08               [12] 5346 	inc	r0
      003B7B 74 0D            [12] 5347 	mov	a,#0x0d
      003B7D 26               [12] 5348 	add	a,@r0
      003B7E FE               [12] 5349 	mov	r6,a
      003B7F E4               [12] 5350 	clr	a
      003B80 08               [12] 5351 	inc	r0
      003B81 36               [12] 5352 	addc	a,@r0
      003B82 FD               [12] 5353 	mov	r5,a
      003B83 08               [12] 5354 	inc	r0
      003B84 86 07            [24] 5355 	mov	ar7,@r0
      003B86 74 02            [12] 5356 	mov	a,#0x02
      003B88 2E               [12] 5357 	add	a,r6
      003B89 FA               [12] 5358 	mov	r2,a
      003B8A E4               [12] 5359 	clr	a
      003B8B 3D               [12] 5360 	addc	a,r5
      003B8C FB               [12] 5361 	mov	r3,a
      003B8D 8F 04            [24] 5362 	mov	ar4,r7
      003B8F 8E 82            [24] 5363 	mov	dpl,r6
      003B91 8D 83            [24] 5364 	mov	dph,r5
      003B93 8F F0            [24] 5365 	mov	b,r7
      003B95 E5 08            [12] 5366 	mov	a,_bp
      003B97 24 09            [12] 5367 	add	a,#0x09
      003B99 F8               [12] 5368 	mov	r0,a
      003B9A 12 4C 95         [24] 5369 	lcall	__gptrget
      003B9D F6               [12] 5370 	mov	@r0,a
      003B9E A3               [24] 5371 	inc	dptr
      003B9F 12 4C 95         [24] 5372 	lcall	__gptrget
      003BA2 08               [12] 5373 	inc	r0
      003BA3 F6               [12] 5374 	mov	@r0,a
      003BA4 8A 82            [24] 5375 	mov	dpl,r2
      003BA6 8B 83            [24] 5376 	mov	dph,r3
      003BA8 8C F0            [24] 5377 	mov	b,r4
      003BAA 12 4C 95         [24] 5378 	lcall	__gptrget
      003BAD FD               [12] 5379 	mov	r5,a
      003BAE A3               [24] 5380 	inc	dptr
      003BAF 12 4C 95         [24] 5381 	lcall	__gptrget
      003BB2 FF               [12] 5382 	mov	r7,a
      003BB3 E5 08            [12] 5383 	mov	a,_bp
      003BB5 24 09            [12] 5384 	add	a,#0x09
      003BB7 F8               [12] 5385 	mov	r0,a
      003BB8 C3               [12] 5386 	clr	c
      003BB9 E6               [12] 5387 	mov	a,@r0
      003BBA 9D               [12] 5388 	subb	a,r5
      003BBB 08               [12] 5389 	inc	r0
      003BBC E6               [12] 5390 	mov	a,@r0
      003BBD 9F               [12] 5391 	subb	a,r7
      003BBE 50 7C            [24] 5392 	jnc	00179$
                                   5393 ;	vt100.c:593: term->scroll_start_row = term->args[0] - 1;
      003BC0 A8 08            [24] 5394 	mov	r0,_bp
      003BC2 08               [12] 5395 	inc	r0
      003BC3 E5 08            [12] 5396 	mov	a,_bp
      003BC5 24 04            [12] 5397 	add	a,#0x04
      003BC7 F9               [12] 5398 	mov	r1,a
      003BC8 74 05            [12] 5399 	mov	a,#0x05
      003BCA 26               [12] 5400 	add	a,@r0
      003BCB F7               [12] 5401 	mov	@r1,a
      003BCC E4               [12] 5402 	clr	a
      003BCD 08               [12] 5403 	inc	r0
      003BCE 36               [12] 5404 	addc	a,@r0
      003BCF 09               [12] 5405 	inc	r1
      003BD0 F7               [12] 5406 	mov	@r1,a
      003BD1 08               [12] 5407 	inc	r0
      003BD2 E6               [12] 5408 	mov	a,@r0
      003BD3 09               [12] 5409 	inc	r1
      003BD4 F7               [12] 5410 	mov	@r1,a
      003BD5 E5 08            [12] 5411 	mov	a,_bp
      003BD7 24 09            [12] 5412 	add	a,#0x09
      003BD9 F8               [12] 5413 	mov	r0,a
      003BDA 86 07            [24] 5414 	mov	ar7,@r0
      003BDC 1F               [12] 5415 	dec	r7
      003BDD E5 08            [12] 5416 	mov	a,_bp
      003BDF 24 04            [12] 5417 	add	a,#0x04
      003BE1 F8               [12] 5418 	mov	r0,a
      003BE2 86 82            [24] 5419 	mov	dpl,@r0
      003BE4 08               [12] 5420 	inc	r0
      003BE5 86 83            [24] 5421 	mov	dph,@r0
      003BE7 08               [12] 5422 	inc	r0
      003BE8 86 F0            [24] 5423 	mov	b,@r0
      003BEA EF               [12] 5424 	mov	a,r7
      003BEB 12 4C 58         [24] 5425 	lcall	__gptrput
                                   5426 ;	vt100.c:594: term->scroll_end_row = term->args[1] - 1; 
      003BEE A8 08            [24] 5427 	mov	r0,_bp
      003BF0 08               [12] 5428 	inc	r0
      003BF1 74 06            [12] 5429 	mov	a,#0x06
      003BF3 26               [12] 5430 	add	a,@r0
      003BF4 FD               [12] 5431 	mov	r5,a
      003BF5 E4               [12] 5432 	clr	a
      003BF6 08               [12] 5433 	inc	r0
      003BF7 36               [12] 5434 	addc	a,@r0
      003BF8 FE               [12] 5435 	mov	r6,a
      003BF9 08               [12] 5436 	inc	r0
      003BFA 86 07            [24] 5437 	mov	ar7,@r0
      003BFC 8A 82            [24] 5438 	mov	dpl,r2
      003BFE 8B 83            [24] 5439 	mov	dph,r3
      003C00 8C F0            [24] 5440 	mov	b,r4
      003C02 12 4C 95         [24] 5441 	lcall	__gptrget
      003C05 FA               [12] 5442 	mov	r2,a
      003C06 1A               [12] 5443 	dec	r2
      003C07 8D 82            [24] 5444 	mov	dpl,r5
      003C09 8E 83            [24] 5445 	mov	dph,r6
      003C0B 8F F0            [24] 5446 	mov	b,r7
      003C0D EA               [12] 5447 	mov	a,r2
      003C0E 12 4C 58         [24] 5448 	lcall	__gptrput
                                   5449 ;	vt100.c:595: uint16_t top_margin = term->scroll_start_row * VT100_CHAR_HEIGHT;
      003C11 E5 08            [12] 5450 	mov	a,_bp
      003C13 24 04            [12] 5451 	add	a,#0x04
      003C15 F8               [12] 5452 	mov	r0,a
      003C16 86 82            [24] 5453 	mov	dpl,@r0
      003C18 08               [12] 5454 	inc	r0
      003C19 86 83            [24] 5455 	mov	dph,@r0
      003C1B 08               [12] 5456 	inc	r0
      003C1C 86 F0            [24] 5457 	mov	b,@r0
      003C1E 12 4C 95         [24] 5458 	lcall	__gptrget
      003C21 FF               [12] 5459 	mov	r7,a
      003C22 33               [12] 5460 	rlc	a
      003C23 95 E0            [12] 5461 	subb	a,acc
                                   5462 ;	vt100.c:596: uint16_t bottom_margin = VT100_SCREEN_HEIGHT -
      003C25 EA               [12] 5463 	mov	a,r2
      003C26 33               [12] 5464 	rlc	a
      003C27 95 E0            [12] 5465 	subb	a,acc
      003C29 FD               [12] 5466 	mov	r5,a
      003C2A 74 18            [12] 5467 	mov	a,#0x18
      003C2C C3               [12] 5468 	clr	c
      003C2D 9A               [12] 5469 	subb	a,r2
      003C2E FA               [12] 5470 	mov	r2,a
      003C2F E4               [12] 5471 	clr	a
      003C30 9D               [12] 5472 	subb	a,r5
                                   5473 ;	vt100.c:598: vga_setScrollMargins(top_margin, bottom_margin);
      003C31 C0 02            [24] 5474 	push	ar2
      003C33 8F 82            [24] 5475 	mov	dpl,r7
      003C35 12 21 93         [24] 5476 	lcall	_vga_setScrollMargins
      003C38 15 81            [12] 5477 	dec	sp
      003C3A 80 03            [24] 5478 	sjmp	00180$
      003C3C                       5479 00179$:
                                   5480 ;	vt100.c:601: _vt100_resetScroll(); 
      003C3C 12 22 26         [24] 5481 	lcall	__vt100_resetScroll
      003C3F                       5482 00180$:
                                   5483 ;	vt100.c:603: term->state = _st_idle; 
      003C3F A8 08            [24] 5484 	mov	r0,_bp
      003C41 08               [12] 5485 	inc	r0
      003C42 74 16            [12] 5486 	mov	a,#0x16
      003C44 26               [12] 5487 	add	a,@r0
      003C45 FD               [12] 5488 	mov	r5,a
      003C46 E4               [12] 5489 	clr	a
      003C47 08               [12] 5490 	inc	r0
      003C48 36               [12] 5491 	addc	a,@r0
      003C49 FE               [12] 5492 	mov	r6,a
      003C4A 08               [12] 5493 	inc	r0
      003C4B 86 07            [24] 5494 	mov	ar7,@r0
      003C4D 8D 82            [24] 5495 	mov	dpl,r5
      003C4F 8E 83            [24] 5496 	mov	dph,r6
      003C51 8F F0            [24] 5497 	mov	b,r7
      003C53 74 85            [12] 5498 	mov	a,#__st_idle
      003C55 12 4C 58         [24] 5499 	lcall	__gptrput
      003C58 A3               [24] 5500 	inc	dptr
      003C59 74 44            [12] 5501 	mov	a,#(__st_idle >> 8)
      003C5B 12 4C 58         [24] 5502 	lcall	__gptrput
                                   5503 ;	vt100.c:604: break;  
      003C5E 02 3C E3         [24] 5504 	ljmp	00200$
                                   5505 ;	vt100.c:607: case '=':{ // argument follows... 
      003C61                       5506 00184$:
                                   5507 ;	vt100.c:609: term->state = _st_idle; 
      003C61 A8 08            [24] 5508 	mov	r0,_bp
      003C63 08               [12] 5509 	inc	r0
      003C64 74 16            [12] 5510 	mov	a,#0x16
      003C66 26               [12] 5511 	add	a,@r0
      003C67 FD               [12] 5512 	mov	r5,a
      003C68 E4               [12] 5513 	clr	a
      003C69 08               [12] 5514 	inc	r0
      003C6A 36               [12] 5515 	addc	a,@r0
      003C6B FE               [12] 5516 	mov	r6,a
      003C6C 08               [12] 5517 	inc	r0
      003C6D 86 07            [24] 5518 	mov	ar7,@r0
      003C6F 8D 82            [24] 5519 	mov	dpl,r5
      003C71 8E 83            [24] 5520 	mov	dph,r6
      003C73 8F F0            [24] 5521 	mov	b,r7
      003C75 74 85            [12] 5522 	mov	a,#__st_idle
      003C77 12 4C 58         [24] 5523 	lcall	__gptrput
      003C7A A3               [24] 5524 	inc	dptr
      003C7B 74 44            [12] 5525 	mov	a,#(__st_idle >> 8)
      003C7D 12 4C 58         [24] 5526 	lcall	__gptrput
                                   5527 ;	vt100.c:610: break; 
                                   5528 ;	vt100.c:612: case '?': // '[?' escape mode
      003C80 80 61            [24] 5529 	sjmp	00200$
      003C82                       5530 00185$:
                                   5531 ;	vt100.c:613: term->state = _st_esc_question;
      003C82 A8 08            [24] 5532 	mov	r0,_bp
      003C84 08               [12] 5533 	inc	r0
      003C85 74 16            [12] 5534 	mov	a,#0x16
      003C87 26               [12] 5535 	add	a,@r0
      003C88 FD               [12] 5536 	mov	r5,a
      003C89 E4               [12] 5537 	clr	a
      003C8A 08               [12] 5538 	inc	r0
      003C8B 36               [12] 5539 	addc	a,@r0
      003C8C FE               [12] 5540 	mov	r6,a
      003C8D 08               [12] 5541 	inc	r0
      003C8E 86 07            [24] 5542 	mov	ar7,@r0
      003C90 8D 82            [24] 5543 	mov	dpl,r5
      003C92 8E 83            [24] 5544 	mov	dph,r6
      003C94 8F F0            [24] 5545 	mov	b,r7
      003C96 74 0C            [12] 5546 	mov	a,#__st_esc_question
      003C98 12 4C 58         [24] 5547 	lcall	__gptrput
      003C9B A3               [24] 5548 	inc	dptr
      003C9C 74 2C            [12] 5549 	mov	a,#(__st_esc_question >> 8)
      003C9E 12 4C 58         [24] 5550 	lcall	__gptrput
                                   5551 ;	vt100.c:614: break; 
                                   5552 ;	vt100.c:615: default: { // unknown sequence
      003CA1 80 40            [24] 5553 	sjmp	00200$
      003CA3                       5554 00186$:
                                   5555 ;	vt100.c:617: term->state = _st_idle;
      003CA3 A8 08            [24] 5556 	mov	r0,_bp
      003CA5 08               [12] 5557 	inc	r0
      003CA6 74 16            [12] 5558 	mov	a,#0x16
      003CA8 26               [12] 5559 	add	a,@r0
      003CA9 FD               [12] 5560 	mov	r5,a
      003CAA E4               [12] 5561 	clr	a
      003CAB 08               [12] 5562 	inc	r0
      003CAC 36               [12] 5563 	addc	a,@r0
      003CAD FE               [12] 5564 	mov	r6,a
      003CAE 08               [12] 5565 	inc	r0
      003CAF 86 07            [24] 5566 	mov	ar7,@r0
      003CB1 8D 82            [24] 5567 	mov	dpl,r5
      003CB3 8E 83            [24] 5568 	mov	dph,r6
      003CB5 8F F0            [24] 5569 	mov	b,r7
      003CB7 74 85            [12] 5570 	mov	a,#__st_idle
      003CB9 12 4C 58         [24] 5571 	lcall	__gptrput
      003CBC A3               [24] 5572 	inc	dptr
      003CBD 74 44            [12] 5573 	mov	a,#(__st_idle >> 8)
      003CBF 12 4C 58         [24] 5574 	lcall	__gptrput
                                   5575 ;	vt100.c:623: break;
                                   5576 ;	vt100.c:625: default: { // switch (ev)
      003CC2 80 1F            [24] 5577 	sjmp	00200$
      003CC4                       5578 00194$:
                                   5579 ;	vt100.c:627: term->state = _st_idle; 
      003CC4 A8 08            [24] 5580 	mov	r0,_bp
      003CC6 08               [12] 5581 	inc	r0
      003CC7 74 16            [12] 5582 	mov	a,#0x16
      003CC9 26               [12] 5583 	add	a,@r0
      003CCA FD               [12] 5584 	mov	r5,a
      003CCB E4               [12] 5585 	clr	a
      003CCC 08               [12] 5586 	inc	r0
      003CCD 36               [12] 5587 	addc	a,@r0
      003CCE FE               [12] 5588 	mov	r6,a
      003CCF 08               [12] 5589 	inc	r0
      003CD0 86 07            [24] 5590 	mov	ar7,@r0
      003CD2 8D 82            [24] 5591 	mov	dpl,r5
      003CD4 8E 83            [24] 5592 	mov	dph,r6
      003CD6 8F F0            [24] 5593 	mov	b,r7
      003CD8 74 85            [12] 5594 	mov	a,#__st_idle
      003CDA 12 4C 58         [24] 5595 	lcall	__gptrput
      003CDD A3               [24] 5596 	inc	dptr
      003CDE 74 44            [12] 5597 	mov	a,#(__st_idle >> 8)
      003CE0 12 4C 58         [24] 5598 	lcall	__gptrput
                                   5599 ;	vt100.c:629: }
      003CE3                       5600 00200$:
                                   5601 ;	vt100.c:630: }
      003CE3 85 08 81         [24] 5602 	mov	sp,_bp
      003CE6 D0 08            [24] 5603 	pop	_bp
      003CE8 22               [24] 5604 	ret
                                   5605 ;------------------------------------------------------------
                                   5606 ;Allocation info for local variables in function '_st_esc_left_br'
                                   5607 ;------------------------------------------------------------
                                   5608 ;ev                        Allocated to stack - _bp -3
                                   5609 ;arg                       Allocated to stack - _bp -4
                                   5610 ;term                      Allocated to registers r5 r6 r7 
                                   5611 ;------------------------------------------------------------
                                   5612 ;	vt100.c:632: STATE(_st_esc_left_br, term, ev, arg) {
                                   5613 ;	-----------------------------------------
                                   5614 ;	 function _st_esc_left_br
                                   5615 ;	-----------------------------------------
      003CE9                       5616 __st_esc_left_br:
      003CE9 C0 08            [24] 5617 	push	_bp
      003CEB 85 81 08         [24] 5618 	mov	_bp,sp
      003CEE AD 82            [24] 5619 	mov	r5,dpl
      003CF0 AE 83            [24] 5620 	mov	r6,dph
      003CF2 AF F0            [24] 5621 	mov	r7,b
                                   5622 ;	vt100.c:633: switch(ev){
      003CF4 E5 08            [12] 5623 	mov	a,_bp
      003CF6 24 FD            [12] 5624 	add	a,#0xfd
      003CF8 F8               [12] 5625 	mov	r0,a
      003CF9 B6 01 5A         [24] 5626 	cjne	@r0,#0x01,00109$
                                   5627 ;	vt100.c:635: switch(arg) {  
      003CFC E5 08            [12] 5628 	mov	a,_bp
      003CFE 24 FC            [12] 5629 	add	a,#0xfc
      003D00 F8               [12] 5630 	mov	r0,a
      003D01 B6 30 02         [24] 5631 	cjne	@r0,#0x30,00129$
      003D04 80 1C            [24] 5632 	sjmp	00105$
      003D06                       5633 00129$:
      003D06 E5 08            [12] 5634 	mov	a,_bp
      003D08 24 FC            [12] 5635 	add	a,#0xfc
      003D0A F8               [12] 5636 	mov	r0,a
      003D0B B6 41 02         [24] 5637 	cjne	@r0,#0x41,00130$
      003D0E 80 12            [24] 5638 	sjmp	00105$
      003D10                       5639 00130$:
      003D10 E5 08            [12] 5640 	mov	a,_bp
      003D12 24 FC            [12] 5641 	add	a,#0xfc
      003D14 F8               [12] 5642 	mov	r0,a
      003D15 B6 42 02         [24] 5643 	cjne	@r0,#0x42,00131$
      003D18 80 08            [24] 5644 	sjmp	00105$
      003D1A                       5645 00131$:
      003D1A E5 08            [12] 5646 	mov	a,_bp
      003D1C 24 FC            [12] 5647 	add	a,#0xfc
      003D1E F8               [12] 5648 	mov	r0,a
      003D1F B6 4F 1C         [24] 5649 	cjne	@r0,#0x4f,00106$
                                   5650 ;	vt100.c:640: case 'O':
      003D22                       5651 00105$:
                                   5652 ;	vt100.c:642: term->state = _st_idle;
      003D22 74 16            [12] 5653 	mov	a,#0x16
      003D24 2D               [12] 5654 	add	a,r5
      003D25 FA               [12] 5655 	mov	r2,a
      003D26 E4               [12] 5656 	clr	a
      003D27 3E               [12] 5657 	addc	a,r6
      003D28 FB               [12] 5658 	mov	r3,a
      003D29 8F 04            [24] 5659 	mov	ar4,r7
      003D2B 8A 82            [24] 5660 	mov	dpl,r2
      003D2D 8B 83            [24] 5661 	mov	dph,r3
      003D2F 8C F0            [24] 5662 	mov	b,r4
      003D31 74 85            [12] 5663 	mov	a,#__st_idle
      003D33 12 4C 58         [24] 5664 	lcall	__gptrput
      003D36 A3               [24] 5665 	inc	dptr
      003D37 74 44            [12] 5666 	mov	a,#(__st_idle >> 8)
      003D39 12 4C 58         [24] 5667 	lcall	__gptrput
                                   5668 ;	vt100.c:643: break;
                                   5669 ;	vt100.c:644: default:
      003D3C 80 18            [24] 5670 	sjmp	00109$
      003D3E                       5671 00106$:
                                   5672 ;	vt100.c:645: term->state = _st_idle;
      003D3E 74 16            [12] 5673 	mov	a,#0x16
      003D40 2D               [12] 5674 	add	a,r5
      003D41 FD               [12] 5675 	mov	r5,a
      003D42 E4               [12] 5676 	clr	a
      003D43 3E               [12] 5677 	addc	a,r6
      003D44 FE               [12] 5678 	mov	r6,a
      003D45 8D 82            [24] 5679 	mov	dpl,r5
      003D47 8E 83            [24] 5680 	mov	dph,r6
      003D49 8F F0            [24] 5681 	mov	b,r7
      003D4B 74 85            [12] 5682 	mov	a,#__st_idle
      003D4D 12 4C 58         [24] 5683 	lcall	__gptrput
      003D50 A3               [24] 5684 	inc	dptr
      003D51 74 44            [12] 5685 	mov	a,#(__st_idle >> 8)
      003D53 12 4C 58         [24] 5686 	lcall	__gptrput
                                   5687 ;	vt100.c:649: }
      003D56                       5688 00109$:
                                   5689 ;	vt100.c:650: }
      003D56 D0 08            [24] 5690 	pop	_bp
      003D58 22               [24] 5691 	ret
                                   5692 ;------------------------------------------------------------
                                   5693 ;Allocation info for local variables in function '_st_esc_right_br'
                                   5694 ;------------------------------------------------------------
                                   5695 ;ev                        Allocated to stack - _bp -3
                                   5696 ;arg                       Allocated to stack - _bp -4
                                   5697 ;term                      Allocated to registers r5 r6 r7 
                                   5698 ;------------------------------------------------------------
                                   5699 ;	vt100.c:652: STATE(_st_esc_right_br, term, ev, arg) {
                                   5700 ;	-----------------------------------------
                                   5701 ;	 function _st_esc_right_br
                                   5702 ;	-----------------------------------------
      003D59                       5703 __st_esc_right_br:
      003D59 C0 08            [24] 5704 	push	_bp
      003D5B 85 81 08         [24] 5705 	mov	_bp,sp
      003D5E AD 82            [24] 5706 	mov	r5,dpl
      003D60 AE 83            [24] 5707 	mov	r6,dph
      003D62 AF F0            [24] 5708 	mov	r7,b
                                   5709 ;	vt100.c:653: switch(ev){
      003D64 E5 08            [12] 5710 	mov	a,_bp
      003D66 24 FD            [12] 5711 	add	a,#0xfd
      003D68 F8               [12] 5712 	mov	r0,a
      003D69 B6 01 5A         [24] 5713 	cjne	@r0,#0x01,00109$
                                   5714 ;	vt100.c:655: switch(arg) {  
      003D6C E5 08            [12] 5715 	mov	a,_bp
      003D6E 24 FC            [12] 5716 	add	a,#0xfc
      003D70 F8               [12] 5717 	mov	r0,a
      003D71 B6 30 02         [24] 5718 	cjne	@r0,#0x30,00129$
      003D74 80 1C            [24] 5719 	sjmp	00105$
      003D76                       5720 00129$:
      003D76 E5 08            [12] 5721 	mov	a,_bp
      003D78 24 FC            [12] 5722 	add	a,#0xfc
      003D7A F8               [12] 5723 	mov	r0,a
      003D7B B6 41 02         [24] 5724 	cjne	@r0,#0x41,00130$
      003D7E 80 12            [24] 5725 	sjmp	00105$
      003D80                       5726 00130$:
      003D80 E5 08            [12] 5727 	mov	a,_bp
      003D82 24 FC            [12] 5728 	add	a,#0xfc
      003D84 F8               [12] 5729 	mov	r0,a
      003D85 B6 42 02         [24] 5730 	cjne	@r0,#0x42,00131$
      003D88 80 08            [24] 5731 	sjmp	00105$
      003D8A                       5732 00131$:
      003D8A E5 08            [12] 5733 	mov	a,_bp
      003D8C 24 FC            [12] 5734 	add	a,#0xfc
      003D8E F8               [12] 5735 	mov	r0,a
      003D8F B6 4F 1C         [24] 5736 	cjne	@r0,#0x4f,00106$
                                   5737 ;	vt100.c:660: case 'O':
      003D92                       5738 00105$:
                                   5739 ;	vt100.c:662: term->state = _st_idle;
      003D92 74 16            [12] 5740 	mov	a,#0x16
      003D94 2D               [12] 5741 	add	a,r5
      003D95 FA               [12] 5742 	mov	r2,a
      003D96 E4               [12] 5743 	clr	a
      003D97 3E               [12] 5744 	addc	a,r6
      003D98 FB               [12] 5745 	mov	r3,a
      003D99 8F 04            [24] 5746 	mov	ar4,r7
      003D9B 8A 82            [24] 5747 	mov	dpl,r2
      003D9D 8B 83            [24] 5748 	mov	dph,r3
      003D9F 8C F0            [24] 5749 	mov	b,r4
      003DA1 74 85            [12] 5750 	mov	a,#__st_idle
      003DA3 12 4C 58         [24] 5751 	lcall	__gptrput
      003DA6 A3               [24] 5752 	inc	dptr
      003DA7 74 44            [12] 5753 	mov	a,#(__st_idle >> 8)
      003DA9 12 4C 58         [24] 5754 	lcall	__gptrput
                                   5755 ;	vt100.c:663: break;
                                   5756 ;	vt100.c:664: default:
      003DAC 80 18            [24] 5757 	sjmp	00109$
      003DAE                       5758 00106$:
                                   5759 ;	vt100.c:665: term->state = _st_idle;
      003DAE 74 16            [12] 5760 	mov	a,#0x16
      003DB0 2D               [12] 5761 	add	a,r5
      003DB1 FD               [12] 5762 	mov	r5,a
      003DB2 E4               [12] 5763 	clr	a
      003DB3 3E               [12] 5764 	addc	a,r6
      003DB4 FE               [12] 5765 	mov	r6,a
      003DB5 8D 82            [24] 5766 	mov	dpl,r5
      003DB7 8E 83            [24] 5767 	mov	dph,r6
      003DB9 8F F0            [24] 5768 	mov	b,r7
      003DBB 74 85            [12] 5769 	mov	a,#__st_idle
      003DBD 12 4C 58         [24] 5770 	lcall	__gptrput
      003DC0 A3               [24] 5771 	inc	dptr
      003DC1 74 44            [12] 5772 	mov	a,#(__st_idle >> 8)
      003DC3 12 4C 58         [24] 5773 	lcall	__gptrput
                                   5774 ;	vt100.c:669: }
      003DC6                       5775 00109$:
                                   5776 ;	vt100.c:670: }
      003DC6 D0 08            [24] 5777 	pop	_bp
      003DC8 22               [24] 5778 	ret
                                   5779 ;------------------------------------------------------------
                                   5780 ;Allocation info for local variables in function '_st_esc_hash'
                                   5781 ;------------------------------------------------------------
                                   5782 ;ev                        Allocated to stack - _bp -3
                                   5783 ;arg                       Allocated to stack - _bp -4
                                   5784 ;term                      Allocated to registers r5 r6 r7 
                                   5785 ;------------------------------------------------------------
                                   5786 ;	vt100.c:672: STATE(_st_esc_hash, term, ev, arg) {
                                   5787 ;	-----------------------------------------
                                   5788 ;	 function _st_esc_hash
                                   5789 ;	-----------------------------------------
      003DC9                       5790 __st_esc_hash:
      003DC9 C0 08            [24] 5791 	push	_bp
      003DCB 85 81 08         [24] 5792 	mov	_bp,sp
      003DCE AD 82            [24] 5793 	mov	r5,dpl
      003DD0 AE 83            [24] 5794 	mov	r6,dph
      003DD2 AF F0            [24] 5795 	mov	r7,b
                                   5796 ;	vt100.c:673: switch(ev){
      003DD4 E5 08            [12] 5797 	mov	a,_bp
      003DD6 24 FD            [12] 5798 	add	a,#0xfd
      003DD8 F8               [12] 5799 	mov	r0,a
      003DD9 B6 01 3C         [24] 5800 	cjne	@r0,#0x01,00106$
                                   5801 ;	vt100.c:675: switch(arg) {  
      003DDC E5 08            [12] 5802 	mov	a,_bp
      003DDE 24 FC            [12] 5803 	add	a,#0xfc
      003DE0 F8               [12] 5804 	mov	r0,a
      003DE1 B6 38 1C         [24] 5805 	cjne	@r0,#0x38,00103$
                                   5806 ;	vt100.c:679: term->state = _st_idle;
      003DE4 74 16            [12] 5807 	mov	a,#0x16
      003DE6 2D               [12] 5808 	add	a,r5
      003DE7 FA               [12] 5809 	mov	r2,a
      003DE8 E4               [12] 5810 	clr	a
      003DE9 3E               [12] 5811 	addc	a,r6
      003DEA FB               [12] 5812 	mov	r3,a
      003DEB 8F 04            [24] 5813 	mov	ar4,r7
      003DED 8A 82            [24] 5814 	mov	dpl,r2
      003DEF 8B 83            [24] 5815 	mov	dph,r3
      003DF1 8C F0            [24] 5816 	mov	b,r4
      003DF3 74 85            [12] 5817 	mov	a,#__st_idle
      003DF5 12 4C 58         [24] 5818 	lcall	__gptrput
      003DF8 A3               [24] 5819 	inc	dptr
      003DF9 74 44            [12] 5820 	mov	a,#(__st_idle >> 8)
      003DFB 12 4C 58         [24] 5821 	lcall	__gptrput
                                   5822 ;	vt100.c:680: break;
                                   5823 ;	vt100.c:682: default:
      003DFE 80 18            [24] 5824 	sjmp	00106$
      003E00                       5825 00103$:
                                   5826 ;	vt100.c:683: term->state = _st_idle;
      003E00 74 16            [12] 5827 	mov	a,#0x16
      003E02 2D               [12] 5828 	add	a,r5
      003E03 FD               [12] 5829 	mov	r5,a
      003E04 E4               [12] 5830 	clr	a
      003E05 3E               [12] 5831 	addc	a,r6
      003E06 FE               [12] 5832 	mov	r6,a
      003E07 8D 82            [24] 5833 	mov	dpl,r5
      003E09 8E 83            [24] 5834 	mov	dph,r6
      003E0B 8F F0            [24] 5835 	mov	b,r7
      003E0D 74 85            [12] 5836 	mov	a,#__st_idle
      003E0F 12 4C 58         [24] 5837 	lcall	__gptrput
      003E12 A3               [24] 5838 	inc	dptr
      003E13 74 44            [12] 5839 	mov	a,#(__st_idle >> 8)
      003E15 12 4C 58         [24] 5840 	lcall	__gptrput
                                   5841 ;	vt100.c:686: }
      003E18                       5842 00106$:
                                   5843 ;	vt100.c:687: }
      003E18 D0 08            [24] 5844 	pop	_bp
      003E1A 22               [24] 5845 	ret
                                   5846 ;------------------------------------------------------------
                                   5847 ;Allocation info for local variables in function '_st_escape'
                                   5848 ;------------------------------------------------------------
                                   5849 ;ev                        Allocated to stack - _bp -3
                                   5850 ;arg                       Allocated to stack - _bp -4
                                   5851 ;term                      Allocated to stack - _bp +1
                                   5852 ;c                         Allocated to stack - _bp +4
                                   5853 ;c                         Allocated to stack - _bp +4
                                   5854 ;c                         Allocated to stack - _bp +4
                                   5855 ;c                         Allocated to stack - _bp +4
                                   5856 ;------------------------------------------------------------
                                   5857 ;	vt100.c:689: STATE(_st_escape, term, ev, arg) {
                                   5858 ;	-----------------------------------------
                                   5859 ;	 function _st_escape
                                   5860 ;	-----------------------------------------
      003E1B                       5861 __st_escape:
      003E1B C0 08            [24] 5862 	push	_bp
      003E1D 85 81 08         [24] 5863 	mov	_bp,sp
      003E20 C0 82            [24] 5864 	push	dpl
      003E22 C0 83            [24] 5865 	push	dph
      003E24 C0 F0            [24] 5866 	push	b
      003E26 05 81            [12] 5867 	inc	sp
      003E28 05 81            [12] 5868 	inc	sp
                                   5869 ;	vt100.c:692: switch(ev){
      003E2A E5 08            [12] 5870 	mov	a,_bp
      003E2C 24 FD            [12] 5871 	add	a,#0xfd
      003E2E F8               [12] 5872 	mov	r0,a
      003E2F B6 01 02         [24] 5873 	cjne	@r0,#0x01,00269$
      003E32 80 03            [24] 5874 	sjmp	00270$
      003E34                       5875 00269$:
      003E34 02 44 60         [24] 5876 	ljmp	00129$
      003E37                       5877 00270$:
                                   5878 ;	vt100.c:699: switch(arg){
      003E37 E5 08            [12] 5879 	mov	a,_bp
      003E39 24 FC            [12] 5880 	add	a,#0xfc
      003E3B F8               [12] 5881 	mov	r0,a
      003E3C B6 1B 03         [24] 5882 	cjne	@r0,#0x1b,00271$
      003E3F 02 44 7F         [24] 5883 	ljmp	00143$
      003E42                       5884 00271$:
      003E42 E5 08            [12] 5885 	mov	a,_bp
      003E44 24 FC            [12] 5886 	add	a,#0xfc
      003E46 F8               [12] 5887 	mov	r0,a
      003E47 B6 23 03         [24] 5888 	cjne	@r0,#0x23,00272$
      003E4A 02 40 D3         [24] 5889 	ljmp	00108$
      003E4D                       5890 00272$:
      003E4D E5 08            [12] 5891 	mov	a,_bp
      003E4F 24 FC            [12] 5892 	add	a,#0xfc
      003E51 F8               [12] 5893 	mov	r0,a
      003E52 B6 28 03         [24] 5894 	cjne	@r0,#0x28,00273$
      003E55 02 3F B1         [24] 5895 	ljmp	00104$
      003E58                       5896 00273$:
      003E58 E5 08            [12] 5897 	mov	a,_bp
      003E5A 24 FC            [12] 5898 	add	a,#0xfc
      003E5C F8               [12] 5899 	mov	r0,a
      003E5D B6 29 03         [24] 5900 	cjne	@r0,#0x29,00274$
      003E60 02 40 42         [24] 5901 	ljmp	00106$
      003E63                       5902 00274$:
      003E63 E5 08            [12] 5903 	mov	a,_bp
      003E65 24 FC            [12] 5904 	add	a,#0xfc
      003E67 F8               [12] 5905 	mov	r0,a
      003E68 B6 37 03         [24] 5906 	cjne	@r0,#0x37,00275$
      003E6B 02 42 61         [24] 5907 	ljmp	00115$
      003E6E                       5908 00275$:
      003E6E E5 08            [12] 5909 	mov	a,_bp
      003E70 24 FC            [12] 5910 	add	a,#0xfc
      003E72 F8               [12] 5911 	mov	r0,a
      003E73 B6 38 03         [24] 5912 	cjne	@r0,#0x38,00276$
      003E76 02 42 E0         [24] 5913 	ljmp	00117$
      003E79                       5914 00276$:
      003E79 E5 08            [12] 5915 	mov	a,_bp
      003E7B 24 FC            [12] 5916 	add	a,#0xfc
      003E7D F8               [12] 5917 	mov	r0,a
      003E7E B6 3C 03         [24] 5918 	cjne	@r0,#0x3c,00277$
      003E81 02 44 1E         [24] 5919 	ljmp	00125$
      003E84                       5920 00277$:
      003E84 E5 08            [12] 5921 	mov	a,_bp
      003E86 24 FC            [12] 5922 	add	a,#0xfc
      003E88 F8               [12] 5923 	mov	r0,a
      003E89 B6 3D 03         [24] 5924 	cjne	@r0,#0x3d,00278$
      003E8C 02 43 5F         [24] 5925 	ljmp	00118$
      003E8F                       5926 00278$:
      003E8F E5 08            [12] 5927 	mov	a,_bp
      003E91 24 FC            [12] 5928 	add	a,#0xfc
      003E93 F8               [12] 5929 	mov	r0,a
      003E94 B6 3E 03         [24] 5930 	cjne	@r0,#0x3e,00279$
      003E97 02 43 81         [24] 5931 	ljmp	00119$
      003E9A                       5932 00279$:
      003E9A E5 08            [12] 5933 	mov	a,_bp
      003E9C 24 FC            [12] 5934 	add	a,#0xfc
      003E9E F8               [12] 5935 	mov	r0,a
      003E9F B6 44 03         [24] 5936 	cjne	@r0,#0x44,00280$
      003EA2 02 41 86         [24] 5937 	ljmp	00111$
      003EA5                       5938 00280$:
      003EA5 E5 08            [12] 5939 	mov	a,_bp
      003EA7 24 FC            [12] 5940 	add	a,#0xfc
      003EA9 F8               [12] 5941 	mov	r0,a
      003EAA B6 45 03         [24] 5942 	cjne	@r0,#0x45,00281$
      003EAD 02 42 08         [24] 5943 	ljmp	00113$
      003EB0                       5944 00281$:
      003EB0 E5 08            [12] 5945 	mov	a,_bp
      003EB2 24 FC            [12] 5946 	add	a,#0xfc
      003EB4 F8               [12] 5947 	mov	r0,a
      003EB5 B6 48 03         [24] 5948 	cjne	@r0,#0x48,00282$
      003EB8 02 44 1E         [24] 5949 	ljmp	00125$
      003EBB                       5950 00282$:
      003EBB E5 08            [12] 5951 	mov	a,_bp
      003EBD 24 FC            [12] 5952 	add	a,#0xfc
      003EBF F8               [12] 5953 	mov	r0,a
      003EC0 B6 4D 03         [24] 5954 	cjne	@r0,#0x4d,00283$
      003EC3 02 41 C7         [24] 5955 	ljmp	00112$
      003EC6                       5956 00283$:
      003EC6 E5 08            [12] 5957 	mov	a,_bp
      003EC8 24 FC            [12] 5958 	add	a,#0xfc
      003ECA F8               [12] 5959 	mov	r0,a
      003ECB B6 4E 03         [24] 5960 	cjne	@r0,#0x4e,00284$
      003ECE 02 44 1E         [24] 5961 	ljmp	00125$
      003ED1                       5962 00284$:
      003ED1 E5 08            [12] 5963 	mov	a,_bp
      003ED3 24 FC            [12] 5964 	add	a,#0xfc
      003ED5 F8               [12] 5965 	mov	r0,a
      003ED6 B6 4F 03         [24] 5966 	cjne	@r0,#0x4f,00285$
      003ED9 02 44 1E         [24] 5967 	ljmp	00125$
      003EDC                       5968 00285$:
      003EDC E5 08            [12] 5969 	mov	a,_bp
      003EDE 24 FC            [12] 5970 	add	a,#0xfc
      003EE0 F8               [12] 5971 	mov	r0,a
      003EE1 B6 50 03         [24] 5972 	cjne	@r0,#0x50,00286$
      003EE4 02 41 64         [24] 5973 	ljmp	00110$
      003EE7                       5974 00286$:
      003EE7 E5 08            [12] 5975 	mov	a,_bp
      003EE9 24 FC            [12] 5976 	add	a,#0xfc
      003EEB F8               [12] 5977 	mov	r0,a
      003EEC B6 5A 03         [24] 5978 	cjne	@r0,#0x5a,00287$
      003EEF 02 43 A3         [24] 5979 	ljmp	00120$
      003EF2                       5980 00287$:
      003EF2 E5 08            [12] 5981 	mov	a,_bp
      003EF4 24 FC            [12] 5982 	add	a,#0xfc
      003EF6 F8               [12] 5983 	mov	r0,a
      003EF7 B6 5B 02         [24] 5984 	cjne	@r0,#0x5b,00288$
      003EFA 80 24            [24] 5985 	sjmp	00102$
      003EFC                       5986 00288$:
      003EFC E5 08            [12] 5987 	mov	a,_bp
      003EFE 24 FC            [12] 5988 	add	a,#0xfc
      003F00 F8               [12] 5989 	mov	r0,a
      003F01 B6 63 03         [24] 5990 	cjne	@r0,#0x63,00289$
      003F04 02 43 FA         [24] 5991 	ljmp	00121$
      003F07                       5992 00289$:
      003F07 E5 08            [12] 5993 	mov	a,_bp
      003F09 24 FC            [12] 5994 	add	a,#0xfc
      003F0B F8               [12] 5995 	mov	r0,a
      003F0C B6 73 03         [24] 5996 	cjne	@r0,#0x73,00290$
      003F0F 02 42 61         [24] 5997 	ljmp	00115$
      003F12                       5998 00290$:
      003F12 E5 08            [12] 5999 	mov	a,_bp
      003F14 24 FC            [12] 6000 	add	a,#0xfc
      003F16 F8               [12] 6001 	mov	r0,a
      003F17 B6 75 03         [24] 6002 	cjne	@r0,#0x75,00291$
      003F1A 02 42 E0         [24] 6003 	ljmp	00117$
      003F1D                       6004 00291$:
      003F1D 02 44 3F         [24] 6005 	ljmp	00127$
                                   6006 ;	vt100.c:700: case '[': { // command
      003F20                       6007 00102$:
                                   6008 ;	vt100.c:702: CLEAR_ARGS; 
      003F20 A8 08            [24] 6009 	mov	r0,_bp
      003F22 08               [12] 6010 	inc	r0
      003F23 74 0C            [12] 6011 	mov	a,#0x0c
      003F25 26               [12] 6012 	add	a,@r0
      003F26 FA               [12] 6013 	mov	r2,a
      003F27 E4               [12] 6014 	clr	a
      003F28 08               [12] 6015 	inc	r0
      003F29 36               [12] 6016 	addc	a,@r0
      003F2A FB               [12] 6017 	mov	r3,a
      003F2B 08               [12] 6018 	inc	r0
      003F2C 86 04            [24] 6019 	mov	ar4,@r0
      003F2E 8A 82            [24] 6020 	mov	dpl,r2
      003F30 8B 83            [24] 6021 	mov	dph,r3
      003F32 8C F0            [24] 6022 	mov	b,r4
      003F34 E4               [12] 6023 	clr	a
      003F35 12 4C 58         [24] 6024 	lcall	__gptrput
      003F38 A8 08            [24] 6025 	mov	r0,_bp
      003F3A 08               [12] 6026 	inc	r0
      003F3B 74 0D            [12] 6027 	mov	a,#0x0d
      003F3D 26               [12] 6028 	add	a,@r0
      003F3E FA               [12] 6029 	mov	r2,a
      003F3F E4               [12] 6030 	clr	a
      003F40 08               [12] 6031 	inc	r0
      003F41 36               [12] 6032 	addc	a,@r0
      003F42 FB               [12] 6033 	mov	r3,a
      003F43 08               [12] 6034 	inc	r0
      003F44 86 04            [24] 6035 	mov	ar4,@r0
      003F46 E5 08            [12] 6036 	mov	a,_bp
      003F48 24 04            [12] 6037 	add	a,#0x04
      003F4A F8               [12] 6038 	mov	r0,a
      003F4B E4               [12] 6039 	clr	a
      003F4C F6               [12] 6040 	mov	@r0,a
      003F4D 08               [12] 6041 	inc	r0
      003F4E F6               [12] 6042 	mov	@r0,a
      003F4F                       6043 00132$:
      003F4F E5 08            [12] 6044 	mov	a,_bp
      003F51 24 04            [12] 6045 	add	a,#0x04
      003F53 F8               [12] 6046 	mov	r0,a
      003F54 C3               [12] 6047 	clr	c
      003F55 E6               [12] 6048 	mov	a,@r0
      003F56 94 04            [12] 6049 	subb	a,#0x04
      003F58 08               [12] 6050 	inc	r0
      003F59 E6               [12] 6051 	mov	a,@r0
      003F5A 64 80            [12] 6052 	xrl	a,#0x80
      003F5C 94 80            [12] 6053 	subb	a,#0x80
      003F5E 50 2F            [24] 6054 	jnc	00103$
      003F60 E5 08            [12] 6055 	mov	a,_bp
      003F62 24 04            [12] 6056 	add	a,#0x04
      003F64 F8               [12] 6057 	mov	r0,a
      003F65 E6               [12] 6058 	mov	a,@r0
      003F66 26               [12] 6059 	add	a,@r0
      003F67 FD               [12] 6060 	mov	r5,a
      003F68 08               [12] 6061 	inc	r0
      003F69 E6               [12] 6062 	mov	a,@r0
      003F6A 33               [12] 6063 	rlc	a
      003F6B FF               [12] 6064 	mov	r7,a
      003F6C ED               [12] 6065 	mov	a,r5
      003F6D 2A               [12] 6066 	add	a,r2
      003F6E FD               [12] 6067 	mov	r5,a
      003F6F EF               [12] 6068 	mov	a,r7
      003F70 3B               [12] 6069 	addc	a,r3
      003F71 FF               [12] 6070 	mov	r7,a
      003F72 8C 06            [24] 6071 	mov	ar6,r4
      003F74 8D 82            [24] 6072 	mov	dpl,r5
      003F76 8F 83            [24] 6073 	mov	dph,r7
      003F78 8E F0            [24] 6074 	mov	b,r6
      003F7A E4               [12] 6075 	clr	a
      003F7B 12 4C 58         [24] 6076 	lcall	__gptrput
      003F7E A3               [24] 6077 	inc	dptr
      003F7F 12 4C 58         [24] 6078 	lcall	__gptrput
      003F82 E5 08            [12] 6079 	mov	a,_bp
      003F84 24 04            [12] 6080 	add	a,#0x04
      003F86 F8               [12] 6081 	mov	r0,a
      003F87 06               [12] 6082 	inc	@r0
      003F88 B6 00 02         [24] 6083 	cjne	@r0,#0x00,00293$
      003F8B 08               [12] 6084 	inc	r0
      003F8C 06               [12] 6085 	inc	@r0
      003F8D                       6086 00293$:
      003F8D 80 C0            [24] 6087 	sjmp	00132$
      003F8F                       6088 00103$:
                                   6089 ;	vt100.c:703: term->state = _st_esc_sq_bracket;
      003F8F A8 08            [24] 6090 	mov	r0,_bp
      003F91 08               [12] 6091 	inc	r0
      003F92 74 16            [12] 6092 	mov	a,#0x16
      003F94 26               [12] 6093 	add	a,@r0
      003F95 FD               [12] 6094 	mov	r5,a
      003F96 E4               [12] 6095 	clr	a
      003F97 08               [12] 6096 	inc	r0
      003F98 36               [12] 6097 	addc	a,@r0
      003F99 FE               [12] 6098 	mov	r6,a
      003F9A 08               [12] 6099 	inc	r0
      003F9B 86 07            [24] 6100 	mov	ar7,@r0
      003F9D 8D 82            [24] 6101 	mov	dpl,r5
      003F9F 8E 83            [24] 6102 	mov	dph,r6
      003FA1 8F F0            [24] 6103 	mov	b,r7
      003FA3 74 E1            [12] 6104 	mov	a,#__st_esc_sq_bracket
      003FA5 12 4C 58         [24] 6105 	lcall	__gptrput
      003FA8 A3               [24] 6106 	inc	dptr
      003FA9 74 2D            [12] 6107 	mov	a,#(__st_esc_sq_bracket >> 8)
      003FAB 12 4C 58         [24] 6108 	lcall	__gptrput
                                   6109 ;	vt100.c:704: break;
      003FAE 02 44 7F         [24] 6110 	ljmp	00143$
                                   6111 ;	vt100.c:706: case '(': /* ESC ( */  
      003FB1                       6112 00104$:
                                   6113 ;	vt100.c:707: CLEAR_ARGS;
      003FB1 A8 08            [24] 6114 	mov	r0,_bp
      003FB3 08               [12] 6115 	inc	r0
      003FB4 74 0C            [12] 6116 	mov	a,#0x0c
      003FB6 26               [12] 6117 	add	a,@r0
      003FB7 FD               [12] 6118 	mov	r5,a
      003FB8 E4               [12] 6119 	clr	a
      003FB9 08               [12] 6120 	inc	r0
      003FBA 36               [12] 6121 	addc	a,@r0
      003FBB FE               [12] 6122 	mov	r6,a
      003FBC 08               [12] 6123 	inc	r0
      003FBD 86 07            [24] 6124 	mov	ar7,@r0
      003FBF 8D 82            [24] 6125 	mov	dpl,r5
      003FC1 8E 83            [24] 6126 	mov	dph,r6
      003FC3 8F F0            [24] 6127 	mov	b,r7
      003FC5 E4               [12] 6128 	clr	a
      003FC6 12 4C 58         [24] 6129 	lcall	__gptrput
      003FC9 A8 08            [24] 6130 	mov	r0,_bp
      003FCB 08               [12] 6131 	inc	r0
      003FCC 74 0D            [12] 6132 	mov	a,#0x0d
      003FCE 26               [12] 6133 	add	a,@r0
      003FCF FD               [12] 6134 	mov	r5,a
      003FD0 E4               [12] 6135 	clr	a
      003FD1 08               [12] 6136 	inc	r0
      003FD2 36               [12] 6137 	addc	a,@r0
      003FD3 FE               [12] 6138 	mov	r6,a
      003FD4 08               [12] 6139 	inc	r0
      003FD5 86 07            [24] 6140 	mov	ar7,@r0
      003FD7 E5 08            [12] 6141 	mov	a,_bp
      003FD9 24 04            [12] 6142 	add	a,#0x04
      003FDB F8               [12] 6143 	mov	r0,a
      003FDC E4               [12] 6144 	clr	a
      003FDD F6               [12] 6145 	mov	@r0,a
      003FDE 08               [12] 6146 	inc	r0
      003FDF F6               [12] 6147 	mov	@r0,a
      003FE0                       6148 00135$:
      003FE0 E5 08            [12] 6149 	mov	a,_bp
      003FE2 24 04            [12] 6150 	add	a,#0x04
      003FE4 F8               [12] 6151 	mov	r0,a
      003FE5 C3               [12] 6152 	clr	c
      003FE6 E6               [12] 6153 	mov	a,@r0
      003FE7 94 04            [12] 6154 	subb	a,#0x04
      003FE9 08               [12] 6155 	inc	r0
      003FEA E6               [12] 6156 	mov	a,@r0
      003FEB 64 80            [12] 6157 	xrl	a,#0x80
      003FED 94 80            [12] 6158 	subb	a,#0x80
      003FEF 50 2F            [24] 6159 	jnc	00105$
      003FF1 E5 08            [12] 6160 	mov	a,_bp
      003FF3 24 04            [12] 6161 	add	a,#0x04
      003FF5 F8               [12] 6162 	mov	r0,a
      003FF6 E6               [12] 6163 	mov	a,@r0
      003FF7 26               [12] 6164 	add	a,@r0
      003FF8 FA               [12] 6165 	mov	r2,a
      003FF9 08               [12] 6166 	inc	r0
      003FFA E6               [12] 6167 	mov	a,@r0
      003FFB 33               [12] 6168 	rlc	a
      003FFC FC               [12] 6169 	mov	r4,a
      003FFD EA               [12] 6170 	mov	a,r2
      003FFE 2D               [12] 6171 	add	a,r5
      003FFF FA               [12] 6172 	mov	r2,a
      004000 EC               [12] 6173 	mov	a,r4
      004001 3E               [12] 6174 	addc	a,r6
      004002 FC               [12] 6175 	mov	r4,a
      004003 8F 03            [24] 6176 	mov	ar3,r7
      004005 8A 82            [24] 6177 	mov	dpl,r2
      004007 8C 83            [24] 6178 	mov	dph,r4
      004009 8B F0            [24] 6179 	mov	b,r3
      00400B E4               [12] 6180 	clr	a
      00400C 12 4C 58         [24] 6181 	lcall	__gptrput
      00400F A3               [24] 6182 	inc	dptr
      004010 12 4C 58         [24] 6183 	lcall	__gptrput
      004013 E5 08            [12] 6184 	mov	a,_bp
      004015 24 04            [12] 6185 	add	a,#0x04
      004017 F8               [12] 6186 	mov	r0,a
      004018 06               [12] 6187 	inc	@r0
      004019 B6 00 02         [24] 6188 	cjne	@r0,#0x00,00295$
      00401C 08               [12] 6189 	inc	r0
      00401D 06               [12] 6190 	inc	@r0
      00401E                       6191 00295$:
      00401E 80 C0            [24] 6192 	sjmp	00135$
      004020                       6193 00105$:
                                   6194 ;	vt100.c:708: term->state = _st_esc_left_br;
      004020 A8 08            [24] 6195 	mov	r0,_bp
      004022 08               [12] 6196 	inc	r0
      004023 74 16            [12] 6197 	mov	a,#0x16
      004025 26               [12] 6198 	add	a,@r0
      004026 FD               [12] 6199 	mov	r5,a
      004027 E4               [12] 6200 	clr	a
      004028 08               [12] 6201 	inc	r0
      004029 36               [12] 6202 	addc	a,@r0
      00402A FE               [12] 6203 	mov	r6,a
      00402B 08               [12] 6204 	inc	r0
      00402C 86 07            [24] 6205 	mov	ar7,@r0
      00402E 8D 82            [24] 6206 	mov	dpl,r5
      004030 8E 83            [24] 6207 	mov	dph,r6
      004032 8F F0            [24] 6208 	mov	b,r7
      004034 74 E9            [12] 6209 	mov	a,#__st_esc_left_br
      004036 12 4C 58         [24] 6210 	lcall	__gptrput
      004039 A3               [24] 6211 	inc	dptr
      00403A 74 3C            [12] 6212 	mov	a,#(__st_esc_left_br >> 8)
      00403C 12 4C 58         [24] 6213 	lcall	__gptrput
                                   6214 ;	vt100.c:709: break; 
      00403F 02 44 7F         [24] 6215 	ljmp	00143$
                                   6216 ;	vt100.c:710: case ')': /* ESC ) */  
      004042                       6217 00106$:
                                   6218 ;	vt100.c:711: CLEAR_ARGS;
      004042 A8 08            [24] 6219 	mov	r0,_bp
      004044 08               [12] 6220 	inc	r0
      004045 74 0C            [12] 6221 	mov	a,#0x0c
      004047 26               [12] 6222 	add	a,@r0
      004048 FD               [12] 6223 	mov	r5,a
      004049 E4               [12] 6224 	clr	a
      00404A 08               [12] 6225 	inc	r0
      00404B 36               [12] 6226 	addc	a,@r0
      00404C FE               [12] 6227 	mov	r6,a
      00404D 08               [12] 6228 	inc	r0
      00404E 86 07            [24] 6229 	mov	ar7,@r0
      004050 8D 82            [24] 6230 	mov	dpl,r5
      004052 8E 83            [24] 6231 	mov	dph,r6
      004054 8F F0            [24] 6232 	mov	b,r7
      004056 E4               [12] 6233 	clr	a
      004057 12 4C 58         [24] 6234 	lcall	__gptrput
      00405A A8 08            [24] 6235 	mov	r0,_bp
      00405C 08               [12] 6236 	inc	r0
      00405D 74 0D            [12] 6237 	mov	a,#0x0d
      00405F 26               [12] 6238 	add	a,@r0
      004060 FD               [12] 6239 	mov	r5,a
      004061 E4               [12] 6240 	clr	a
      004062 08               [12] 6241 	inc	r0
      004063 36               [12] 6242 	addc	a,@r0
      004064 FE               [12] 6243 	mov	r6,a
      004065 08               [12] 6244 	inc	r0
      004066 86 07            [24] 6245 	mov	ar7,@r0
      004068 E5 08            [12] 6246 	mov	a,_bp
      00406A 24 04            [12] 6247 	add	a,#0x04
      00406C F8               [12] 6248 	mov	r0,a
      00406D E4               [12] 6249 	clr	a
      00406E F6               [12] 6250 	mov	@r0,a
      00406F 08               [12] 6251 	inc	r0
      004070 F6               [12] 6252 	mov	@r0,a
      004071                       6253 00138$:
      004071 E5 08            [12] 6254 	mov	a,_bp
      004073 24 04            [12] 6255 	add	a,#0x04
      004075 F8               [12] 6256 	mov	r0,a
      004076 C3               [12] 6257 	clr	c
      004077 E6               [12] 6258 	mov	a,@r0
      004078 94 04            [12] 6259 	subb	a,#0x04
      00407A 08               [12] 6260 	inc	r0
      00407B E6               [12] 6261 	mov	a,@r0
      00407C 64 80            [12] 6262 	xrl	a,#0x80
      00407E 94 80            [12] 6263 	subb	a,#0x80
      004080 50 2F            [24] 6264 	jnc	00107$
      004082 E5 08            [12] 6265 	mov	a,_bp
      004084 24 04            [12] 6266 	add	a,#0x04
      004086 F8               [12] 6267 	mov	r0,a
      004087 E6               [12] 6268 	mov	a,@r0
      004088 26               [12] 6269 	add	a,@r0
      004089 FA               [12] 6270 	mov	r2,a
      00408A 08               [12] 6271 	inc	r0
      00408B E6               [12] 6272 	mov	a,@r0
      00408C 33               [12] 6273 	rlc	a
      00408D FC               [12] 6274 	mov	r4,a
      00408E EA               [12] 6275 	mov	a,r2
      00408F 2D               [12] 6276 	add	a,r5
      004090 FA               [12] 6277 	mov	r2,a
      004091 EC               [12] 6278 	mov	a,r4
      004092 3E               [12] 6279 	addc	a,r6
      004093 FC               [12] 6280 	mov	r4,a
      004094 8F 03            [24] 6281 	mov	ar3,r7
      004096 8A 82            [24] 6282 	mov	dpl,r2
      004098 8C 83            [24] 6283 	mov	dph,r4
      00409A 8B F0            [24] 6284 	mov	b,r3
      00409C E4               [12] 6285 	clr	a
      00409D 12 4C 58         [24] 6286 	lcall	__gptrput
      0040A0 A3               [24] 6287 	inc	dptr
      0040A1 12 4C 58         [24] 6288 	lcall	__gptrput
      0040A4 E5 08            [12] 6289 	mov	a,_bp
      0040A6 24 04            [12] 6290 	add	a,#0x04
      0040A8 F8               [12] 6291 	mov	r0,a
      0040A9 06               [12] 6292 	inc	@r0
      0040AA B6 00 02         [24] 6293 	cjne	@r0,#0x00,00297$
      0040AD 08               [12] 6294 	inc	r0
      0040AE 06               [12] 6295 	inc	@r0
      0040AF                       6296 00297$:
      0040AF 80 C0            [24] 6297 	sjmp	00138$
      0040B1                       6298 00107$:
                                   6299 ;	vt100.c:712: term->state = _st_esc_right_br;
      0040B1 A8 08            [24] 6300 	mov	r0,_bp
      0040B3 08               [12] 6301 	inc	r0
      0040B4 74 16            [12] 6302 	mov	a,#0x16
      0040B6 26               [12] 6303 	add	a,@r0
      0040B7 FD               [12] 6304 	mov	r5,a
      0040B8 E4               [12] 6305 	clr	a
      0040B9 08               [12] 6306 	inc	r0
      0040BA 36               [12] 6307 	addc	a,@r0
      0040BB FE               [12] 6308 	mov	r6,a
      0040BC 08               [12] 6309 	inc	r0
      0040BD 86 07            [24] 6310 	mov	ar7,@r0
      0040BF 8D 82            [24] 6311 	mov	dpl,r5
      0040C1 8E 83            [24] 6312 	mov	dph,r6
      0040C3 8F F0            [24] 6313 	mov	b,r7
      0040C5 74 59            [12] 6314 	mov	a,#__st_esc_right_br
      0040C7 12 4C 58         [24] 6315 	lcall	__gptrput
      0040CA A3               [24] 6316 	inc	dptr
      0040CB 74 3D            [12] 6317 	mov	a,#(__st_esc_right_br >> 8)
      0040CD 12 4C 58         [24] 6318 	lcall	__gptrput
                                   6319 ;	vt100.c:713: break;  
      0040D0 02 44 7F         [24] 6320 	ljmp	00143$
                                   6321 ;	vt100.c:714: case '#': // ESC # 
      0040D3                       6322 00108$:
                                   6323 ;	vt100.c:715: CLEAR_ARGS;
      0040D3 A8 08            [24] 6324 	mov	r0,_bp
      0040D5 08               [12] 6325 	inc	r0
      0040D6 74 0C            [12] 6326 	mov	a,#0x0c
      0040D8 26               [12] 6327 	add	a,@r0
      0040D9 FD               [12] 6328 	mov	r5,a
      0040DA E4               [12] 6329 	clr	a
      0040DB 08               [12] 6330 	inc	r0
      0040DC 36               [12] 6331 	addc	a,@r0
      0040DD FE               [12] 6332 	mov	r6,a
      0040DE 08               [12] 6333 	inc	r0
      0040DF 86 07            [24] 6334 	mov	ar7,@r0
      0040E1 8D 82            [24] 6335 	mov	dpl,r5
      0040E3 8E 83            [24] 6336 	mov	dph,r6
      0040E5 8F F0            [24] 6337 	mov	b,r7
      0040E7 E4               [12] 6338 	clr	a
      0040E8 12 4C 58         [24] 6339 	lcall	__gptrput
      0040EB A8 08            [24] 6340 	mov	r0,_bp
      0040ED 08               [12] 6341 	inc	r0
      0040EE 74 0D            [12] 6342 	mov	a,#0x0d
      0040F0 26               [12] 6343 	add	a,@r0
      0040F1 FD               [12] 6344 	mov	r5,a
      0040F2 E4               [12] 6345 	clr	a
      0040F3 08               [12] 6346 	inc	r0
      0040F4 36               [12] 6347 	addc	a,@r0
      0040F5 FE               [12] 6348 	mov	r6,a
      0040F6 08               [12] 6349 	inc	r0
      0040F7 86 07            [24] 6350 	mov	ar7,@r0
      0040F9 E5 08            [12] 6351 	mov	a,_bp
      0040FB 24 04            [12] 6352 	add	a,#0x04
      0040FD F8               [12] 6353 	mov	r0,a
      0040FE E4               [12] 6354 	clr	a
      0040FF F6               [12] 6355 	mov	@r0,a
      004100 08               [12] 6356 	inc	r0
      004101 F6               [12] 6357 	mov	@r0,a
      004102                       6358 00141$:
      004102 E5 08            [12] 6359 	mov	a,_bp
      004104 24 04            [12] 6360 	add	a,#0x04
      004106 F8               [12] 6361 	mov	r0,a
      004107 C3               [12] 6362 	clr	c
      004108 E6               [12] 6363 	mov	a,@r0
      004109 94 04            [12] 6364 	subb	a,#0x04
      00410B 08               [12] 6365 	inc	r0
      00410C E6               [12] 6366 	mov	a,@r0
      00410D 64 80            [12] 6367 	xrl	a,#0x80
      00410F 94 80            [12] 6368 	subb	a,#0x80
      004111 50 2F            [24] 6369 	jnc	00109$
      004113 E5 08            [12] 6370 	mov	a,_bp
      004115 24 04            [12] 6371 	add	a,#0x04
      004117 F8               [12] 6372 	mov	r0,a
      004118 E6               [12] 6373 	mov	a,@r0
      004119 26               [12] 6374 	add	a,@r0
      00411A FA               [12] 6375 	mov	r2,a
      00411B 08               [12] 6376 	inc	r0
      00411C E6               [12] 6377 	mov	a,@r0
      00411D 33               [12] 6378 	rlc	a
      00411E FC               [12] 6379 	mov	r4,a
      00411F EA               [12] 6380 	mov	a,r2
      004120 2D               [12] 6381 	add	a,r5
      004121 FA               [12] 6382 	mov	r2,a
      004122 EC               [12] 6383 	mov	a,r4
      004123 3E               [12] 6384 	addc	a,r6
      004124 FC               [12] 6385 	mov	r4,a
      004125 8F 03            [24] 6386 	mov	ar3,r7
      004127 8A 82            [24] 6387 	mov	dpl,r2
      004129 8C 83            [24] 6388 	mov	dph,r4
      00412B 8B F0            [24] 6389 	mov	b,r3
      00412D E4               [12] 6390 	clr	a
      00412E 12 4C 58         [24] 6391 	lcall	__gptrput
      004131 A3               [24] 6392 	inc	dptr
      004132 12 4C 58         [24] 6393 	lcall	__gptrput
      004135 E5 08            [12] 6394 	mov	a,_bp
      004137 24 04            [12] 6395 	add	a,#0x04
      004139 F8               [12] 6396 	mov	r0,a
      00413A 06               [12] 6397 	inc	@r0
      00413B B6 00 02         [24] 6398 	cjne	@r0,#0x00,00299$
      00413E 08               [12] 6399 	inc	r0
      00413F 06               [12] 6400 	inc	@r0
      004140                       6401 00299$:
      004140 80 C0            [24] 6402 	sjmp	00141$
      004142                       6403 00109$:
                                   6404 ;	vt100.c:716: term->state = _st_esc_hash;
      004142 A8 08            [24] 6405 	mov	r0,_bp
      004144 08               [12] 6406 	inc	r0
      004145 74 16            [12] 6407 	mov	a,#0x16
      004147 26               [12] 6408 	add	a,@r0
      004148 FD               [12] 6409 	mov	r5,a
      004149 E4               [12] 6410 	clr	a
      00414A 08               [12] 6411 	inc	r0
      00414B 36               [12] 6412 	addc	a,@r0
      00414C FE               [12] 6413 	mov	r6,a
      00414D 08               [12] 6414 	inc	r0
      00414E 86 07            [24] 6415 	mov	ar7,@r0
      004150 8D 82            [24] 6416 	mov	dpl,r5
      004152 8E 83            [24] 6417 	mov	dph,r6
      004154 8F F0            [24] 6418 	mov	b,r7
      004156 74 C9            [12] 6419 	mov	a,#__st_esc_hash
      004158 12 4C 58         [24] 6420 	lcall	__gptrput
      00415B A3               [24] 6421 	inc	dptr
      00415C 74 3D            [12] 6422 	mov	a,#(__st_esc_hash >> 8)
      00415E 12 4C 58         [24] 6423 	lcall	__gptrput
                                   6424 ;	vt100.c:717: break;  
      004161 02 44 7F         [24] 6425 	ljmp	00143$
                                   6426 ;	vt100.c:718: case 'P': //ESC P (DCS, Device Control String)
      004164                       6427 00110$:
                                   6428 ;	vt100.c:719: term->state = _st_idle; 
      004164 A8 08            [24] 6429 	mov	r0,_bp
      004166 08               [12] 6430 	inc	r0
      004167 74 16            [12] 6431 	mov	a,#0x16
      004169 26               [12] 6432 	add	a,@r0
      00416A FD               [12] 6433 	mov	r5,a
      00416B E4               [12] 6434 	clr	a
      00416C 08               [12] 6435 	inc	r0
      00416D 36               [12] 6436 	addc	a,@r0
      00416E FE               [12] 6437 	mov	r6,a
      00416F 08               [12] 6438 	inc	r0
      004170 86 07            [24] 6439 	mov	ar7,@r0
      004172 8D 82            [24] 6440 	mov	dpl,r5
      004174 8E 83            [24] 6441 	mov	dph,r6
      004176 8F F0            [24] 6442 	mov	b,r7
      004178 74 85            [12] 6443 	mov	a,#__st_idle
      00417A 12 4C 58         [24] 6444 	lcall	__gptrput
      00417D A3               [24] 6445 	inc	dptr
      00417E 74 44            [12] 6446 	mov	a,#(__st_idle >> 8)
      004180 12 4C 58         [24] 6447 	lcall	__gptrput
                                   6448 ;	vt100.c:720: break;
      004183 02 44 7F         [24] 6449 	ljmp	00143$
                                   6450 ;	vt100.c:721: case 'D': // moves cursor down one line and scrolls if necessary
      004186                       6451 00111$:
                                   6452 ;	vt100.c:723: _vt100_move(term, 0, 1); 
      004186 74 01            [12] 6453 	mov	a,#0x01
      004188 C0 E0            [24] 6454 	push	acc
      00418A E4               [12] 6455 	clr	a
      00418B C0 E0            [24] 6456 	push	acc
      00418D C0 E0            [24] 6457 	push	acc
      00418F C0 E0            [24] 6458 	push	acc
      004191 A8 08            [24] 6459 	mov	r0,_bp
      004193 08               [12] 6460 	inc	r0
      004194 86 82            [24] 6461 	mov	dpl,@r0
      004196 08               [12] 6462 	inc	r0
      004197 86 83            [24] 6463 	mov	dph,@r0
      004199 08               [12] 6464 	inc	r0
      00419A 86 F0            [24] 6465 	mov	b,@r0
      00419C 12 26 07         [24] 6466 	lcall	__vt100_move
      00419F E5 81            [12] 6467 	mov	a,sp
      0041A1 24 FC            [12] 6468 	add	a,#0xfc
      0041A3 F5 81            [12] 6469 	mov	sp,a
                                   6470 ;	vt100.c:724: term->state = _st_idle;
      0041A5 A8 08            [24] 6471 	mov	r0,_bp
      0041A7 08               [12] 6472 	inc	r0
      0041A8 74 16            [12] 6473 	mov	a,#0x16
      0041AA 26               [12] 6474 	add	a,@r0
      0041AB FD               [12] 6475 	mov	r5,a
      0041AC E4               [12] 6476 	clr	a
      0041AD 08               [12] 6477 	inc	r0
      0041AE 36               [12] 6478 	addc	a,@r0
      0041AF FE               [12] 6479 	mov	r6,a
      0041B0 08               [12] 6480 	inc	r0
      0041B1 86 07            [24] 6481 	mov	ar7,@r0
      0041B3 8D 82            [24] 6482 	mov	dpl,r5
      0041B5 8E 83            [24] 6483 	mov	dph,r6
      0041B7 8F F0            [24] 6484 	mov	b,r7
      0041B9 74 85            [12] 6485 	mov	a,#__st_idle
      0041BB 12 4C 58         [24] 6486 	lcall	__gptrput
      0041BE A3               [24] 6487 	inc	dptr
      0041BF 74 44            [12] 6488 	mov	a,#(__st_idle >> 8)
      0041C1 12 4C 58         [24] 6489 	lcall	__gptrput
                                   6490 ;	vt100.c:725: break; 
      0041C4 02 44 7F         [24] 6491 	ljmp	00143$
                                   6492 ;	vt100.c:726: case 'M': // Cursor up
      0041C7                       6493 00112$:
                                   6494 ;	vt100.c:728: _vt100_move(term, 0, -1); 
      0041C7 74 FF            [12] 6495 	mov	a,#0xff
      0041C9 C0 E0            [24] 6496 	push	acc
      0041CB C0 E0            [24] 6497 	push	acc
      0041CD E4               [12] 6498 	clr	a
      0041CE C0 E0            [24] 6499 	push	acc
      0041D0 C0 E0            [24] 6500 	push	acc
      0041D2 A8 08            [24] 6501 	mov	r0,_bp
      0041D4 08               [12] 6502 	inc	r0
      0041D5 86 82            [24] 6503 	mov	dpl,@r0
      0041D7 08               [12] 6504 	inc	r0
      0041D8 86 83            [24] 6505 	mov	dph,@r0
      0041DA 08               [12] 6506 	inc	r0
      0041DB 86 F0            [24] 6507 	mov	b,@r0
      0041DD 12 26 07         [24] 6508 	lcall	__vt100_move
      0041E0 E5 81            [12] 6509 	mov	a,sp
      0041E2 24 FC            [12] 6510 	add	a,#0xfc
      0041E4 F5 81            [12] 6511 	mov	sp,a
                                   6512 ;	vt100.c:729: term->state = _st_idle;
      0041E6 A8 08            [24] 6513 	mov	r0,_bp
      0041E8 08               [12] 6514 	inc	r0
      0041E9 74 16            [12] 6515 	mov	a,#0x16
      0041EB 26               [12] 6516 	add	a,@r0
      0041EC FD               [12] 6517 	mov	r5,a
      0041ED E4               [12] 6518 	clr	a
      0041EE 08               [12] 6519 	inc	r0
      0041EF 36               [12] 6520 	addc	a,@r0
      0041F0 FE               [12] 6521 	mov	r6,a
      0041F1 08               [12] 6522 	inc	r0
      0041F2 86 07            [24] 6523 	mov	ar7,@r0
      0041F4 8D 82            [24] 6524 	mov	dpl,r5
      0041F6 8E 83            [24] 6525 	mov	dph,r6
      0041F8 8F F0            [24] 6526 	mov	b,r7
      0041FA 74 85            [12] 6527 	mov	a,#__st_idle
      0041FC 12 4C 58         [24] 6528 	lcall	__gptrput
      0041FF A3               [24] 6529 	inc	dptr
      004200 74 44            [12] 6530 	mov	a,#(__st_idle >> 8)
      004202 12 4C 58         [24] 6531 	lcall	__gptrput
                                   6532 ;	vt100.c:730: break; 
      004205 02 44 7F         [24] 6533 	ljmp	00143$
                                   6534 ;	vt100.c:731: case 'E': // next line
      004208                       6535 00113$:
                                   6536 ;	vt100.c:733: _vt100_move(term, 0, 1);
      004208 74 01            [12] 6537 	mov	a,#0x01
      00420A C0 E0            [24] 6538 	push	acc
      00420C E4               [12] 6539 	clr	a
      00420D C0 E0            [24] 6540 	push	acc
      00420F C0 E0            [24] 6541 	push	acc
      004211 C0 E0            [24] 6542 	push	acc
      004213 A8 08            [24] 6543 	mov	r0,_bp
      004215 08               [12] 6544 	inc	r0
      004216 86 82            [24] 6545 	mov	dpl,@r0
      004218 08               [12] 6546 	inc	r0
      004219 86 83            [24] 6547 	mov	dph,@r0
      00421B 08               [12] 6548 	inc	r0
      00421C 86 F0            [24] 6549 	mov	b,@r0
      00421E 12 26 07         [24] 6550 	lcall	__vt100_move
      004221 E5 81            [12] 6551 	mov	a,sp
      004223 24 FC            [12] 6552 	add	a,#0xfc
      004225 F5 81            [12] 6553 	mov	sp,a
                                   6554 ;	vt100.c:734: term->cursor_x = 0; 
      004227 A8 08            [24] 6555 	mov	r0,_bp
      004229 08               [12] 6556 	inc	r0
      00422A 74 01            [12] 6557 	mov	a,#0x01
      00422C 26               [12] 6558 	add	a,@r0
      00422D FD               [12] 6559 	mov	r5,a
      00422E E4               [12] 6560 	clr	a
      00422F 08               [12] 6561 	inc	r0
      004230 36               [12] 6562 	addc	a,@r0
      004231 FE               [12] 6563 	mov	r6,a
      004232 08               [12] 6564 	inc	r0
      004233 86 07            [24] 6565 	mov	ar7,@r0
      004235 8D 82            [24] 6566 	mov	dpl,r5
      004237 8E 83            [24] 6567 	mov	dph,r6
      004239 8F F0            [24] 6568 	mov	b,r7
      00423B E4               [12] 6569 	clr	a
      00423C 12 4C 58         [24] 6570 	lcall	__gptrput
                                   6571 ;	vt100.c:735: term->state = _st_idle;
      00423F A8 08            [24] 6572 	mov	r0,_bp
      004241 08               [12] 6573 	inc	r0
      004242 74 16            [12] 6574 	mov	a,#0x16
      004244 26               [12] 6575 	add	a,@r0
      004245 FD               [12] 6576 	mov	r5,a
      004246 E4               [12] 6577 	clr	a
      004247 08               [12] 6578 	inc	r0
      004248 36               [12] 6579 	addc	a,@r0
      004249 FE               [12] 6580 	mov	r6,a
      00424A 08               [12] 6581 	inc	r0
      00424B 86 07            [24] 6582 	mov	ar7,@r0
      00424D 8D 82            [24] 6583 	mov	dpl,r5
      00424F 8E 83            [24] 6584 	mov	dph,r6
      004251 8F F0            [24] 6585 	mov	b,r7
      004253 74 85            [12] 6586 	mov	a,#__st_idle
      004255 12 4C 58         [24] 6587 	lcall	__gptrput
      004258 A3               [24] 6588 	inc	dptr
      004259 74 44            [12] 6589 	mov	a,#(__st_idle >> 8)
      00425B 12 4C 58         [24] 6590 	lcall	__gptrput
                                   6591 ;	vt100.c:736: break;  
      00425E 02 44 7F         [24] 6592 	ljmp	00143$
                                   6593 ;	vt100.c:738: case 's':  
      004261                       6594 00115$:
                                   6595 ;	vt100.c:739: term->saved_cursor_x = term->cursor_x;
      004261 A8 08            [24] 6596 	mov	r0,_bp
      004263 08               [12] 6597 	inc	r0
      004264 74 03            [12] 6598 	mov	a,#0x03
      004266 26               [12] 6599 	add	a,@r0
      004267 FD               [12] 6600 	mov	r5,a
      004268 E4               [12] 6601 	clr	a
      004269 08               [12] 6602 	inc	r0
      00426A 36               [12] 6603 	addc	a,@r0
      00426B FE               [12] 6604 	mov	r6,a
      00426C 08               [12] 6605 	inc	r0
      00426D 86 07            [24] 6606 	mov	ar7,@r0
      00426F A8 08            [24] 6607 	mov	r0,_bp
      004271 08               [12] 6608 	inc	r0
      004272 74 01            [12] 6609 	mov	a,#0x01
      004274 26               [12] 6610 	add	a,@r0
      004275 FA               [12] 6611 	mov	r2,a
      004276 E4               [12] 6612 	clr	a
      004277 08               [12] 6613 	inc	r0
      004278 36               [12] 6614 	addc	a,@r0
      004279 FB               [12] 6615 	mov	r3,a
      00427A 08               [12] 6616 	inc	r0
      00427B 86 04            [24] 6617 	mov	ar4,@r0
      00427D 8A 82            [24] 6618 	mov	dpl,r2
      00427F 8B 83            [24] 6619 	mov	dph,r3
      004281 8C F0            [24] 6620 	mov	b,r4
      004283 12 4C 95         [24] 6621 	lcall	__gptrget
      004286 8D 82            [24] 6622 	mov	dpl,r5
      004288 8E 83            [24] 6623 	mov	dph,r6
      00428A 8F F0            [24] 6624 	mov	b,r7
      00428C 12 4C 58         [24] 6625 	lcall	__gptrput
                                   6626 ;	vt100.c:740: term->saved_cursor_y = term->cursor_y;
      00428F A8 08            [24] 6627 	mov	r0,_bp
      004291 08               [12] 6628 	inc	r0
      004292 74 04            [12] 6629 	mov	a,#0x04
      004294 26               [12] 6630 	add	a,@r0
      004295 FD               [12] 6631 	mov	r5,a
      004296 E4               [12] 6632 	clr	a
      004297 08               [12] 6633 	inc	r0
      004298 36               [12] 6634 	addc	a,@r0
      004299 FE               [12] 6635 	mov	r6,a
      00429A 08               [12] 6636 	inc	r0
      00429B 86 07            [24] 6637 	mov	ar7,@r0
      00429D A8 08            [24] 6638 	mov	r0,_bp
      00429F 08               [12] 6639 	inc	r0
      0042A0 74 02            [12] 6640 	mov	a,#0x02
      0042A2 26               [12] 6641 	add	a,@r0
      0042A3 FA               [12] 6642 	mov	r2,a
      0042A4 E4               [12] 6643 	clr	a
      0042A5 08               [12] 6644 	inc	r0
      0042A6 36               [12] 6645 	addc	a,@r0
      0042A7 FB               [12] 6646 	mov	r3,a
      0042A8 08               [12] 6647 	inc	r0
      0042A9 86 04            [24] 6648 	mov	ar4,@r0
      0042AB 8A 82            [24] 6649 	mov	dpl,r2
      0042AD 8B 83            [24] 6650 	mov	dph,r3
      0042AF 8C F0            [24] 6651 	mov	b,r4
      0042B1 12 4C 95         [24] 6652 	lcall	__gptrget
      0042B4 FA               [12] 6653 	mov	r2,a
      0042B5 8D 82            [24] 6654 	mov	dpl,r5
      0042B7 8E 83            [24] 6655 	mov	dph,r6
      0042B9 8F F0            [24] 6656 	mov	b,r7
      0042BB 12 4C 58         [24] 6657 	lcall	__gptrput
                                   6658 ;	vt100.c:741: term->state = _st_idle;
      0042BE A8 08            [24] 6659 	mov	r0,_bp
      0042C0 08               [12] 6660 	inc	r0
      0042C1 74 16            [12] 6661 	mov	a,#0x16
      0042C3 26               [12] 6662 	add	a,@r0
      0042C4 FD               [12] 6663 	mov	r5,a
      0042C5 E4               [12] 6664 	clr	a
      0042C6 08               [12] 6665 	inc	r0
      0042C7 36               [12] 6666 	addc	a,@r0
      0042C8 FE               [12] 6667 	mov	r6,a
      0042C9 08               [12] 6668 	inc	r0
      0042CA 86 07            [24] 6669 	mov	ar7,@r0
      0042CC 8D 82            [24] 6670 	mov	dpl,r5
      0042CE 8E 83            [24] 6671 	mov	dph,r6
      0042D0 8F F0            [24] 6672 	mov	b,r7
      0042D2 74 85            [12] 6673 	mov	a,#__st_idle
      0042D4 12 4C 58         [24] 6674 	lcall	__gptrput
      0042D7 A3               [24] 6675 	inc	dptr
      0042D8 74 44            [12] 6676 	mov	a,#(__st_idle >> 8)
      0042DA 12 4C 58         [24] 6677 	lcall	__gptrput
                                   6678 ;	vt100.c:742: break;  
      0042DD 02 44 7F         [24] 6679 	ljmp	00143$
                                   6680 ;	vt100.c:744: case 'u': 
      0042E0                       6681 00117$:
                                   6682 ;	vt100.c:745: term->cursor_x = term->saved_cursor_x;
      0042E0 A8 08            [24] 6683 	mov	r0,_bp
      0042E2 08               [12] 6684 	inc	r0
      0042E3 74 01            [12] 6685 	mov	a,#0x01
      0042E5 26               [12] 6686 	add	a,@r0
      0042E6 FD               [12] 6687 	mov	r5,a
      0042E7 E4               [12] 6688 	clr	a
      0042E8 08               [12] 6689 	inc	r0
      0042E9 36               [12] 6690 	addc	a,@r0
      0042EA FE               [12] 6691 	mov	r6,a
      0042EB 08               [12] 6692 	inc	r0
      0042EC 86 07            [24] 6693 	mov	ar7,@r0
      0042EE A8 08            [24] 6694 	mov	r0,_bp
      0042F0 08               [12] 6695 	inc	r0
      0042F1 74 03            [12] 6696 	mov	a,#0x03
      0042F3 26               [12] 6697 	add	a,@r0
      0042F4 FA               [12] 6698 	mov	r2,a
      0042F5 E4               [12] 6699 	clr	a
      0042F6 08               [12] 6700 	inc	r0
      0042F7 36               [12] 6701 	addc	a,@r0
      0042F8 FB               [12] 6702 	mov	r3,a
      0042F9 08               [12] 6703 	inc	r0
      0042FA 86 04            [24] 6704 	mov	ar4,@r0
      0042FC 8A 82            [24] 6705 	mov	dpl,r2
      0042FE 8B 83            [24] 6706 	mov	dph,r3
      004300 8C F0            [24] 6707 	mov	b,r4
      004302 12 4C 95         [24] 6708 	lcall	__gptrget
      004305 8D 82            [24] 6709 	mov	dpl,r5
      004307 8E 83            [24] 6710 	mov	dph,r6
      004309 8F F0            [24] 6711 	mov	b,r7
      00430B 12 4C 58         [24] 6712 	lcall	__gptrput
                                   6713 ;	vt100.c:746: term->cursor_y = term->saved_cursor_y; 
      00430E A8 08            [24] 6714 	mov	r0,_bp
      004310 08               [12] 6715 	inc	r0
      004311 74 02            [12] 6716 	mov	a,#0x02
      004313 26               [12] 6717 	add	a,@r0
      004314 FD               [12] 6718 	mov	r5,a
      004315 E4               [12] 6719 	clr	a
      004316 08               [12] 6720 	inc	r0
      004317 36               [12] 6721 	addc	a,@r0
      004318 FE               [12] 6722 	mov	r6,a
      004319 08               [12] 6723 	inc	r0
      00431A 86 07            [24] 6724 	mov	ar7,@r0
      00431C A8 08            [24] 6725 	mov	r0,_bp
      00431E 08               [12] 6726 	inc	r0
      00431F 74 04            [12] 6727 	mov	a,#0x04
      004321 26               [12] 6728 	add	a,@r0
      004322 FA               [12] 6729 	mov	r2,a
      004323 E4               [12] 6730 	clr	a
      004324 08               [12] 6731 	inc	r0
      004325 36               [12] 6732 	addc	a,@r0
      004326 FB               [12] 6733 	mov	r3,a
      004327 08               [12] 6734 	inc	r0
      004328 86 04            [24] 6735 	mov	ar4,@r0
      00432A 8A 82            [24] 6736 	mov	dpl,r2
      00432C 8B 83            [24] 6737 	mov	dph,r3
      00432E 8C F0            [24] 6738 	mov	b,r4
      004330 12 4C 95         [24] 6739 	lcall	__gptrget
      004333 FA               [12] 6740 	mov	r2,a
      004334 8D 82            [24] 6741 	mov	dpl,r5
      004336 8E 83            [24] 6742 	mov	dph,r6
      004338 8F F0            [24] 6743 	mov	b,r7
      00433A 12 4C 58         [24] 6744 	lcall	__gptrput
                                   6745 ;	vt100.c:747: term->state = _st_idle;
      00433D A8 08            [24] 6746 	mov	r0,_bp
      00433F 08               [12] 6747 	inc	r0
      004340 74 16            [12] 6748 	mov	a,#0x16
      004342 26               [12] 6749 	add	a,@r0
      004343 FD               [12] 6750 	mov	r5,a
      004344 E4               [12] 6751 	clr	a
      004345 08               [12] 6752 	inc	r0
      004346 36               [12] 6753 	addc	a,@r0
      004347 FE               [12] 6754 	mov	r6,a
      004348 08               [12] 6755 	inc	r0
      004349 86 07            [24] 6756 	mov	ar7,@r0
      00434B 8D 82            [24] 6757 	mov	dpl,r5
      00434D 8E 83            [24] 6758 	mov	dph,r6
      00434F 8F F0            [24] 6759 	mov	b,r7
      004351 74 85            [12] 6760 	mov	a,#__st_idle
      004353 12 4C 58         [24] 6761 	lcall	__gptrput
      004356 A3               [24] 6762 	inc	dptr
      004357 74 44            [12] 6763 	mov	a,#(__st_idle >> 8)
      004359 12 4C 58         [24] 6764 	lcall	__gptrput
                                   6765 ;	vt100.c:748: break; 
      00435C 02 44 7F         [24] 6766 	ljmp	00143$
                                   6767 ;	vt100.c:749: case '=': // Keypad into applications mode 
      00435F                       6768 00118$:
                                   6769 ;	vt100.c:750: term->state = _st_idle;
      00435F A8 08            [24] 6770 	mov	r0,_bp
      004361 08               [12] 6771 	inc	r0
      004362 74 16            [12] 6772 	mov	a,#0x16
      004364 26               [12] 6773 	add	a,@r0
      004365 FD               [12] 6774 	mov	r5,a
      004366 E4               [12] 6775 	clr	a
      004367 08               [12] 6776 	inc	r0
      004368 36               [12] 6777 	addc	a,@r0
      004369 FE               [12] 6778 	mov	r6,a
      00436A 08               [12] 6779 	inc	r0
      00436B 86 07            [24] 6780 	mov	ar7,@r0
      00436D 8D 82            [24] 6781 	mov	dpl,r5
      00436F 8E 83            [24] 6782 	mov	dph,r6
      004371 8F F0            [24] 6783 	mov	b,r7
      004373 74 85            [12] 6784 	mov	a,#__st_idle
      004375 12 4C 58         [24] 6785 	lcall	__gptrput
      004378 A3               [24] 6786 	inc	dptr
      004379 74 44            [12] 6787 	mov	a,#(__st_idle >> 8)
      00437B 12 4C 58         [24] 6788 	lcall	__gptrput
                                   6789 ;	vt100.c:751: break; 
      00437E 02 44 7F         [24] 6790 	ljmp	00143$
                                   6791 ;	vt100.c:752: case '>': // Keypad into numeric mode   
      004381                       6792 00119$:
                                   6793 ;	vt100.c:753: term->state = _st_idle;
      004381 A8 08            [24] 6794 	mov	r0,_bp
      004383 08               [12] 6795 	inc	r0
      004384 74 16            [12] 6796 	mov	a,#0x16
      004386 26               [12] 6797 	add	a,@r0
      004387 FD               [12] 6798 	mov	r5,a
      004388 E4               [12] 6799 	clr	a
      004389 08               [12] 6800 	inc	r0
      00438A 36               [12] 6801 	addc	a,@r0
      00438B FE               [12] 6802 	mov	r6,a
      00438C 08               [12] 6803 	inc	r0
      00438D 86 07            [24] 6804 	mov	ar7,@r0
      00438F 8D 82            [24] 6805 	mov	dpl,r5
      004391 8E 83            [24] 6806 	mov	dph,r6
      004393 8F F0            [24] 6807 	mov	b,r7
      004395 74 85            [12] 6808 	mov	a,#__st_idle
      004397 12 4C 58         [24] 6809 	lcall	__gptrput
      00439A A3               [24] 6810 	inc	dptr
      00439B 74 44            [12] 6811 	mov	a,#(__st_idle >> 8)
      00439D 12 4C 58         [24] 6812 	lcall	__gptrput
                                   6813 ;	vt100.c:754: break;  
      0043A0 02 44 7F         [24] 6814 	ljmp	00143$
                                   6815 ;	vt100.c:755: case 'Z': // Report terminal type 
      0043A3                       6816 00120$:
                                   6817 ;	vt100.c:757: term->send_response("\033[?1;0c");  
      0043A3 A8 08            [24] 6818 	mov	r0,_bp
      0043A5 08               [12] 6819 	inc	r0
      0043A6 74 18            [12] 6820 	mov	a,#0x18
      0043A8 26               [12] 6821 	add	a,@r0
      0043A9 FD               [12] 6822 	mov	r5,a
      0043AA E4               [12] 6823 	clr	a
      0043AB 08               [12] 6824 	inc	r0
      0043AC 36               [12] 6825 	addc	a,@r0
      0043AD FE               [12] 6826 	mov	r6,a
      0043AE 08               [12] 6827 	inc	r0
      0043AF 86 07            [24] 6828 	mov	ar7,@r0
      0043B1 8D 82            [24] 6829 	mov	dpl,r5
      0043B3 8E 83            [24] 6830 	mov	dph,r6
      0043B5 8F F0            [24] 6831 	mov	b,r7
      0043B7 12 4C 95         [24] 6832 	lcall	__gptrget
      0043BA FD               [12] 6833 	mov	r5,a
      0043BB A3               [24] 6834 	inc	dptr
      0043BC 12 4C 95         [24] 6835 	lcall	__gptrget
      0043BF FE               [12] 6836 	mov	r6,a
      0043C0 C0 06            [24] 6837 	push	ar6
      0043C2 C0 05            [24] 6838 	push	ar5
      0043C4 12 43 C9         [24] 6839 	lcall	00300$
      0043C7 80 0B            [24] 6840 	sjmp	00301$
      0043C9                       6841 00300$:
      0043C9 C0 05            [24] 6842 	push	ar5
      0043CB C0 06            [24] 6843 	push	ar6
      0043CD 90 4D BE         [24] 6844 	mov	dptr,#___str_1
      0043D0 75 F0 80         [24] 6845 	mov	b,#0x80
      0043D3 22               [24] 6846 	ret
      0043D4                       6847 00301$:
      0043D4 D0 05            [24] 6848 	pop	ar5
      0043D6 D0 06            [24] 6849 	pop	ar6
                                   6850 ;	vt100.c:760: term->state = _st_idle;
      0043D8 A8 08            [24] 6851 	mov	r0,_bp
      0043DA 08               [12] 6852 	inc	r0
      0043DB 74 16            [12] 6853 	mov	a,#0x16
      0043DD 26               [12] 6854 	add	a,@r0
      0043DE FD               [12] 6855 	mov	r5,a
      0043DF E4               [12] 6856 	clr	a
      0043E0 08               [12] 6857 	inc	r0
      0043E1 36               [12] 6858 	addc	a,@r0
      0043E2 FE               [12] 6859 	mov	r6,a
      0043E3 08               [12] 6860 	inc	r0
      0043E4 86 07            [24] 6861 	mov	ar7,@r0
      0043E6 8D 82            [24] 6862 	mov	dpl,r5
      0043E8 8E 83            [24] 6863 	mov	dph,r6
      0043EA 8F F0            [24] 6864 	mov	b,r7
      0043EC 74 85            [12] 6865 	mov	a,#__st_idle
      0043EE 12 4C 58         [24] 6866 	lcall	__gptrput
      0043F1 A3               [24] 6867 	inc	dptr
      0043F2 74 44            [12] 6868 	mov	a,#(__st_idle >> 8)
      0043F4 12 4C 58         [24] 6869 	lcall	__gptrput
                                   6870 ;	vt100.c:761: break;    
      0043F7 02 44 7F         [24] 6871 	ljmp	00143$
                                   6872 ;	vt100.c:762: case 'c': // Reset terminal to initial state 
      0043FA                       6873 00121$:
                                   6874 ;	vt100.c:763: _vt100_reset();
      0043FA 12 21 D6         [24] 6875 	lcall	__vt100_reset
                                   6876 ;	vt100.c:764: term->state = _st_idle;
      0043FD A8 08            [24] 6877 	mov	r0,_bp
      0043FF 08               [12] 6878 	inc	r0
      004400 74 16            [12] 6879 	mov	a,#0x16
      004402 26               [12] 6880 	add	a,@r0
      004403 FD               [12] 6881 	mov	r5,a
      004404 E4               [12] 6882 	clr	a
      004405 08               [12] 6883 	inc	r0
      004406 36               [12] 6884 	addc	a,@r0
      004407 FE               [12] 6885 	mov	r6,a
      004408 08               [12] 6886 	inc	r0
      004409 86 07            [24] 6887 	mov	ar7,@r0
      00440B 8D 82            [24] 6888 	mov	dpl,r5
      00440D 8E 83            [24] 6889 	mov	dph,r6
      00440F 8F F0            [24] 6890 	mov	b,r7
      004411 74 85            [12] 6891 	mov	a,#__st_idle
      004413 12 4C 58         [24] 6892 	lcall	__gptrput
      004416 A3               [24] 6893 	inc	dptr
      004417 74 44            [12] 6894 	mov	a,#(__st_idle >> 8)
      004419 12 4C 58         [24] 6895 	lcall	__gptrput
                                   6896 ;	vt100.c:765: break;  
                                   6897 ;	vt100.c:769: case '<': // Exit vt52 mode
      00441C 80 61            [24] 6898 	sjmp	00143$
      00441E                       6899 00125$:
                                   6900 ;	vt100.c:771: term->state = _st_idle;
      00441E A8 08            [24] 6901 	mov	r0,_bp
      004420 08               [12] 6902 	inc	r0
      004421 74 16            [12] 6903 	mov	a,#0x16
      004423 26               [12] 6904 	add	a,@r0
      004424 FD               [12] 6905 	mov	r5,a
      004425 E4               [12] 6906 	clr	a
      004426 08               [12] 6907 	inc	r0
      004427 36               [12] 6908 	addc	a,@r0
      004428 FE               [12] 6909 	mov	r6,a
      004429 08               [12] 6910 	inc	r0
      00442A 86 07            [24] 6911 	mov	ar7,@r0
      00442C 8D 82            [24] 6912 	mov	dpl,r5
      00442E 8E 83            [24] 6913 	mov	dph,r6
      004430 8F F0            [24] 6914 	mov	b,r7
      004432 74 85            [12] 6915 	mov	a,#__st_idle
      004434 12 4C 58         [24] 6916 	lcall	__gptrput
      004437 A3               [24] 6917 	inc	dptr
      004438 74 44            [12] 6918 	mov	a,#(__st_idle >> 8)
      00443A 12 4C 58         [24] 6919 	lcall	__gptrput
                                   6920 ;	vt100.c:772: break; 
                                   6921 ;	vt100.c:777: default: { // unknown sequence - return to normal mode
      00443D 80 40            [24] 6922 	sjmp	00143$
      00443F                       6923 00127$:
                                   6924 ;	vt100.c:778: term->state = _st_idle;
      00443F A8 08            [24] 6925 	mov	r0,_bp
      004441 08               [12] 6926 	inc	r0
      004442 74 16            [12] 6927 	mov	a,#0x16
      004444 26               [12] 6928 	add	a,@r0
      004445 FD               [12] 6929 	mov	r5,a
      004446 E4               [12] 6930 	clr	a
      004447 08               [12] 6931 	inc	r0
      004448 36               [12] 6932 	addc	a,@r0
      004449 FE               [12] 6933 	mov	r6,a
      00444A 08               [12] 6934 	inc	r0
      00444B 86 07            [24] 6935 	mov	ar7,@r0
      00444D 8D 82            [24] 6936 	mov	dpl,r5
      00444F 8E 83            [24] 6937 	mov	dph,r6
      004451 8F F0            [24] 6938 	mov	b,r7
      004453 74 85            [12] 6939 	mov	a,#__st_idle
      004455 12 4C 58         [24] 6940 	lcall	__gptrput
      004458 A3               [24] 6941 	inc	dptr
      004459 74 44            [12] 6942 	mov	a,#(__st_idle >> 8)
      00445B 12 4C 58         [24] 6943 	lcall	__gptrput
                                   6944 ;	vt100.c:783: break;
                                   6945 ;	vt100.c:785: default: {
      00445E 80 1F            [24] 6946 	sjmp	00143$
      004460                       6947 00129$:
                                   6948 ;	vt100.c:787: term->state = _st_idle; 
      004460 A8 08            [24] 6949 	mov	r0,_bp
      004462 08               [12] 6950 	inc	r0
      004463 74 16            [12] 6951 	mov	a,#0x16
      004465 26               [12] 6952 	add	a,@r0
      004466 FD               [12] 6953 	mov	r5,a
      004467 E4               [12] 6954 	clr	a
      004468 08               [12] 6955 	inc	r0
      004469 36               [12] 6956 	addc	a,@r0
      00446A FE               [12] 6957 	mov	r6,a
      00446B 08               [12] 6958 	inc	r0
      00446C 86 07            [24] 6959 	mov	ar7,@r0
      00446E 8D 82            [24] 6960 	mov	dpl,r5
      004470 8E 83            [24] 6961 	mov	dph,r6
      004472 8F F0            [24] 6962 	mov	b,r7
      004474 74 85            [12] 6963 	mov	a,#__st_idle
      004476 12 4C 58         [24] 6964 	lcall	__gptrput
      004479 A3               [24] 6965 	inc	dptr
      00447A 74 44            [12] 6966 	mov	a,#(__st_idle >> 8)
      00447C 12 4C 58         [24] 6967 	lcall	__gptrput
                                   6968 ;	vt100.c:789: }
      00447F                       6969 00143$:
                                   6970 ;	vt100.c:790: }
      00447F 85 08 81         [24] 6971 	mov	sp,_bp
      004482 D0 08            [24] 6972 	pop	_bp
      004484 22               [24] 6973 	ret
                                   6974 ;------------------------------------------------------------
                                   6975 ;Allocation info for local variables in function '_st_idle'
                                   6976 ;------------------------------------------------------------
                                   6977 ;ev                        Allocated to stack - _bp -3
                                   6978 ;arg                       Allocated to stack - _bp -4
                                   6979 ;term                      Allocated to stack - _bp +1
                                   6980 ;tab_stop                  Allocated to registers 
                                   6981 ;to_put                    Allocated to registers 
                                   6982 ;------------------------------------------------------------
                                   6983 ;	vt100.c:793: STATE(_st_idle, term, ev, arg) {
                                   6984 ;	-----------------------------------------
                                   6985 ;	 function _st_idle
                                   6986 ;	-----------------------------------------
      004485                       6987 __st_idle:
      004485 C0 08            [24] 6988 	push	_bp
      004487 85 81 08         [24] 6989 	mov	_bp,sp
      00448A C0 82            [24] 6990 	push	dpl
      00448C C0 83            [24] 6991 	push	dph
      00448E C0 F0            [24] 6992 	push	b
                                   6993 ;	vt100.c:796: switch(ev){
      004490 E5 08            [12] 6994 	mov	a,_bp
      004492 24 FD            [12] 6995 	add	a,#0xfd
      004494 F8               [12] 6996 	mov	r0,a
      004495 B6 01 02         [24] 6997 	cjne	@r0,#0x01,00164$
      004498 80 03            [24] 6998 	sjmp	00165$
      00449A                       6999 00164$:
      00449A 02 46 77         [24] 7000 	ljmp	00117$
      00449D                       7001 00165$:
                                   7002 ;	vt100.c:798: switch(arg){
      00449D E5 08            [12] 7003 	mov	a,_bp
      00449F 24 FC            [12] 7004 	add	a,#0xfc
      0044A1 F8               [12] 7005 	mov	r0,a
      0044A2 B6 05 02         [24] 7006 	cjne	@r0,#0x05,00166$
      0044A5 80 4F            [24] 7007 	sjmp	00102$
      0044A7                       7008 00166$:
      0044A7 E5 08            [12] 7009 	mov	a,_bp
      0044A9 24 FC            [12] 7010 	add	a,#0xfc
      0044AB F8               [12] 7011 	mov	r0,a
      0044AC B6 07 03         [24] 7012 	cjne	@r0,#0x07,00167$
      0044AF 02 46 77         [24] 7013 	ljmp	00117$
      0044B2                       7014 00167$:
      0044B2 E5 08            [12] 7015 	mov	a,_bp
      0044B4 24 FC            [12] 7016 	add	a,#0xfc
      0044B6 F8               [12] 7017 	mov	r0,a
      0044B7 B6 08 03         [24] 7018 	cjne	@r0,#0x08,00168$
      0044BA 02 45 83         [24] 7019 	ljmp	00105$
      0044BD                       7020 00168$:
      0044BD E5 08            [12] 7021 	mov	a,_bp
      0044BF 24 FC            [12] 7022 	add	a,#0xfc
      0044C1 F8               [12] 7023 	mov	r0,a
      0044C2 B6 09 03         [24] 7024 	cjne	@r0,#0x09,00169$
      0044C5 02 45 D9         [24] 7025 	ljmp	00107$
      0044C8                       7026 00169$:
      0044C8 E5 08            [12] 7027 	mov	a,_bp
      0044CA 24 FC            [12] 7028 	add	a,#0xfc
      0044CC F8               [12] 7029 	mov	r0,a
      0044CD B6 0A 02         [24] 7030 	cjne	@r0,#0x0a,00170$
      0044D0 80 5C            [24] 7031 	sjmp	00103$
      0044D2                       7032 00170$:
      0044D2 E5 08            [12] 7033 	mov	a,_bp
      0044D4 24 FC            [12] 7034 	add	a,#0xfc
      0044D6 F8               [12] 7035 	mov	r0,a
      0044D7 B6 0D 03         [24] 7036 	cjne	@r0,#0x0d,00171$
      0044DA 02 45 68         [24] 7037 	ljmp	00104$
      0044DD                       7038 00171$:
      0044DD E5 08            [12] 7039 	mov	a,_bp
      0044DF 24 FC            [12] 7040 	add	a,#0xfc
      0044E1 F8               [12] 7041 	mov	r0,a
      0044E2 B6 1B 03         [24] 7042 	cjne	@r0,#0x1b,00172$
      0044E5 02 46 3E         [24] 7043 	ljmp	00112$
      0044E8                       7044 00172$:
      0044E8 E5 08            [12] 7045 	mov	a,_bp
      0044EA 24 FC            [12] 7046 	add	a,#0xfc
      0044EC F8               [12] 7047 	mov	r0,a
      0044ED B6 7F 03         [24] 7048 	cjne	@r0,#0x7f,00173$
      0044F0 02 45 A4         [24] 7049 	ljmp	00106$
      0044F3                       7050 00173$:
      0044F3 02 46 5F         [24] 7051 	ljmp	00113$
                                   7052 ;	vt100.c:800: case 5: // AnswerBack for vt100's  
      0044F6                       7053 00102$:
                                   7054 ;	vt100.c:801: term->send_response("X"); // should send SCCS_ID?
      0044F6 A8 08            [24] 7055 	mov	r0,_bp
      0044F8 08               [12] 7056 	inc	r0
      0044F9 74 18            [12] 7057 	mov	a,#0x18
      0044FB 26               [12] 7058 	add	a,@r0
      0044FC FA               [12] 7059 	mov	r2,a
      0044FD E4               [12] 7060 	clr	a
      0044FE 08               [12] 7061 	inc	r0
      0044FF 36               [12] 7062 	addc	a,@r0
      004500 FB               [12] 7063 	mov	r3,a
      004501 08               [12] 7064 	inc	r0
      004502 86 04            [24] 7065 	mov	ar4,@r0
      004504 8A 82            [24] 7066 	mov	dpl,r2
      004506 8B 83            [24] 7067 	mov	dph,r3
      004508 8C F0            [24] 7068 	mov	b,r4
      00450A 12 4C 95         [24] 7069 	lcall	__gptrget
      00450D FA               [12] 7070 	mov	r2,a
      00450E A3               [24] 7071 	inc	dptr
      00450F 12 4C 95         [24] 7072 	lcall	__gptrget
      004512 FB               [12] 7073 	mov	r3,a
      004513 C0 03            [24] 7074 	push	ar3
      004515 C0 02            [24] 7075 	push	ar2
      004517 12 45 1C         [24] 7076 	lcall	00174$
      00451A 80 0B            [24] 7077 	sjmp	00175$
      00451C                       7078 00174$:
      00451C C0 02            [24] 7079 	push	ar2
      00451E C0 03            [24] 7080 	push	ar3
      004520 90 4D C6         [24] 7081 	mov	dptr,#___str_2
      004523 75 F0 80         [24] 7082 	mov	b,#0x80
      004526 22               [24] 7083 	ret
      004527                       7084 00175$:
      004527 D0 02            [24] 7085 	pop	ar2
      004529 D0 03            [24] 7086 	pop	ar3
                                   7087 ;	vt100.c:802: break;  
      00452B 02 46 77         [24] 7088 	ljmp	00117$
                                   7089 ;	vt100.c:803: case '\n': { // new line
      00452E                       7090 00103$:
                                   7091 ;	vt100.c:804: _vt100_move(term, 0, 1);
      00452E 74 01            [12] 7092 	mov	a,#0x01
      004530 C0 E0            [24] 7093 	push	acc
      004532 E4               [12] 7094 	clr	a
      004533 C0 E0            [24] 7095 	push	acc
      004535 C0 E0            [24] 7096 	push	acc
      004537 C0 E0            [24] 7097 	push	acc
      004539 A8 08            [24] 7098 	mov	r0,_bp
      00453B 08               [12] 7099 	inc	r0
      00453C 86 82            [24] 7100 	mov	dpl,@r0
      00453E 08               [12] 7101 	inc	r0
      00453F 86 83            [24] 7102 	mov	dph,@r0
      004541 08               [12] 7103 	inc	r0
      004542 86 F0            [24] 7104 	mov	b,@r0
      004544 12 26 07         [24] 7105 	lcall	__vt100_move
      004547 E5 81            [12] 7106 	mov	a,sp
      004549 24 FC            [12] 7107 	add	a,#0xfc
      00454B F5 81            [12] 7108 	mov	sp,a
                                   7109 ;	vt100.c:805: term->cursor_x = 0; 
      00454D A8 08            [24] 7110 	mov	r0,_bp
      00454F 08               [12] 7111 	inc	r0
      004550 74 01            [12] 7112 	mov	a,#0x01
      004552 26               [12] 7113 	add	a,@r0
      004553 FA               [12] 7114 	mov	r2,a
      004554 E4               [12] 7115 	clr	a
      004555 08               [12] 7116 	inc	r0
      004556 36               [12] 7117 	addc	a,@r0
      004557 FB               [12] 7118 	mov	r3,a
      004558 08               [12] 7119 	inc	r0
      004559 86 04            [24] 7120 	mov	ar4,@r0
      00455B 8A 82            [24] 7121 	mov	dpl,r2
      00455D 8B 83            [24] 7122 	mov	dph,r3
      00455F 8C F0            [24] 7123 	mov	b,r4
      004561 E4               [12] 7124 	clr	a
      004562 12 4C 58         [24] 7125 	lcall	__gptrput
                                   7126 ;	vt100.c:808: break;
      004565 02 46 77         [24] 7127 	ljmp	00117$
                                   7128 ;	vt100.c:810: case '\r': { // carrage return (0x0d)
      004568                       7129 00104$:
                                   7130 ;	vt100.c:811: term->cursor_x = 0; 
      004568 A8 08            [24] 7131 	mov	r0,_bp
      00456A 08               [12] 7132 	inc	r0
      00456B 74 01            [12] 7133 	mov	a,#0x01
      00456D 26               [12] 7134 	add	a,@r0
      00456E FA               [12] 7135 	mov	r2,a
      00456F E4               [12] 7136 	clr	a
      004570 08               [12] 7137 	inc	r0
      004571 36               [12] 7138 	addc	a,@r0
      004572 FB               [12] 7139 	mov	r3,a
      004573 08               [12] 7140 	inc	r0
      004574 86 04            [24] 7141 	mov	ar4,@r0
      004576 8A 82            [24] 7142 	mov	dpl,r2
      004578 8B 83            [24] 7143 	mov	dph,r3
      00457A 8C F0            [24] 7144 	mov	b,r4
      00457C E4               [12] 7145 	clr	a
      00457D 12 4C 58         [24] 7146 	lcall	__gptrput
                                   7147 ;	vt100.c:814: break;
      004580 02 46 77         [24] 7148 	ljmp	00117$
                                   7149 ;	vt100.c:816: case '\b': { // backspace 0x08
      004583                       7150 00105$:
                                   7151 ;	vt100.c:817: _vt100_move(term, -1, 0); 
      004583 E4               [12] 7152 	clr	a
      004584 C0 E0            [24] 7153 	push	acc
      004586 C0 E0            [24] 7154 	push	acc
      004588 14               [12] 7155 	dec	a
      004589 C0 E0            [24] 7156 	push	acc
      00458B C0 E0            [24] 7157 	push	acc
      00458D A8 08            [24] 7158 	mov	r0,_bp
      00458F 08               [12] 7159 	inc	r0
      004590 86 82            [24] 7160 	mov	dpl,@r0
      004592 08               [12] 7161 	inc	r0
      004593 86 83            [24] 7162 	mov	dph,@r0
      004595 08               [12] 7163 	inc	r0
      004596 86 F0            [24] 7164 	mov	b,@r0
      004598 12 26 07         [24] 7165 	lcall	__vt100_move
      00459B E5 81            [12] 7166 	mov	a,sp
      00459D 24 FC            [12] 7167 	add	a,#0xfc
      00459F F5 81            [12] 7168 	mov	sp,a
                                   7169 ;	vt100.c:821: break;
      0045A1 02 46 77         [24] 7170 	ljmp	00117$
                                   7171 ;	vt100.c:823: case KEY_DEL: { // del - delete character under cursor
      0045A4                       7172 00106$:
                                   7173 ;	vt100.c:827: _vt100_putc(term, ' ');
      0045A4 74 20            [12] 7174 	mov	a,#0x20
      0045A6 C0 E0            [24] 7175 	push	acc
      0045A8 A8 08            [24] 7176 	mov	r0,_bp
      0045AA 08               [12] 7177 	inc	r0
      0045AB 86 82            [24] 7178 	mov	dpl,@r0
      0045AD 08               [12] 7179 	inc	r0
      0045AE 86 83            [24] 7180 	mov	dph,@r0
      0045B0 08               [12] 7181 	inc	r0
      0045B1 86 F0            [24] 7182 	mov	b,@r0
      0045B3 12 28 AC         [24] 7183 	lcall	__vt100_putc
      0045B6 15 81            [12] 7184 	dec	sp
                                   7185 ;	vt100.c:828: _vt100_move(term, -1, 0);
      0045B8 E4               [12] 7186 	clr	a
      0045B9 C0 E0            [24] 7187 	push	acc
      0045BB C0 E0            [24] 7188 	push	acc
      0045BD 14               [12] 7189 	dec	a
      0045BE C0 E0            [24] 7190 	push	acc
      0045C0 C0 E0            [24] 7191 	push	acc
      0045C2 A8 08            [24] 7192 	mov	r0,_bp
      0045C4 08               [12] 7193 	inc	r0
      0045C5 86 82            [24] 7194 	mov	dpl,@r0
      0045C7 08               [12] 7195 	inc	r0
      0045C8 86 83            [24] 7196 	mov	dph,@r0
      0045CA 08               [12] 7197 	inc	r0
      0045CB 86 F0            [24] 7198 	mov	b,@r0
      0045CD 12 26 07         [24] 7199 	lcall	__vt100_move
      0045D0 E5 81            [12] 7200 	mov	a,sp
      0045D2 24 FC            [12] 7201 	add	a,#0xfc
      0045D4 F5 81            [12] 7202 	mov	sp,a
                                   7203 ;	vt100.c:830: break;
      0045D6 02 46 77         [24] 7204 	ljmp	00117$
                                   7205 ;	vt100.c:832: case '\t': { // tab
      0045D9                       7206 00107$:
                                   7207 ;	vt100.c:835: int to_put = tab_stop - (term->cursor_x % tab_stop); 
      0045D9 A8 08            [24] 7208 	mov	r0,_bp
      0045DB 08               [12] 7209 	inc	r0
      0045DC 74 01            [12] 7210 	mov	a,#0x01
      0045DE 26               [12] 7211 	add	a,@r0
      0045DF FA               [12] 7212 	mov	r2,a
      0045E0 E4               [12] 7213 	clr	a
      0045E1 08               [12] 7214 	inc	r0
      0045E2 36               [12] 7215 	addc	a,@r0
      0045E3 FB               [12] 7216 	mov	r3,a
      0045E4 08               [12] 7217 	inc	r0
      0045E5 86 04            [24] 7218 	mov	ar4,@r0
      0045E7 8A 82            [24] 7219 	mov	dpl,r2
      0045E9 8B 83            [24] 7220 	mov	dph,r3
      0045EB 8C F0            [24] 7221 	mov	b,r4
      0045ED 12 4C 95         [24] 7222 	lcall	__gptrget
      0045F0 FA               [12] 7223 	mov	r2,a
      0045F1 33               [12] 7224 	rlc	a
      0045F2 95 E0            [12] 7225 	subb	a,acc
      0045F4 FC               [12] 7226 	mov	r4,a
      0045F5 74 04            [12] 7227 	mov	a,#0x04
      0045F7 C0 E0            [24] 7228 	push	acc
      0045F9 E4               [12] 7229 	clr	a
      0045FA C0 E0            [24] 7230 	push	acc
      0045FC 8A 82            [24] 7231 	mov	dpl,r2
      0045FE 8C 83            [24] 7232 	mov	dph,r4
      004600 12 4C B1         [24] 7233 	lcall	__modsint
      004603 AB 82            [24] 7234 	mov	r3,dpl
      004605 AC 83            [24] 7235 	mov	r4,dph
      004607 15 81            [12] 7236 	dec	sp
      004609 15 81            [12] 7237 	dec	sp
      00460B 74 04            [12] 7238 	mov	a,#0x04
      00460D C3               [12] 7239 	clr	c
      00460E 9B               [12] 7240 	subb	a,r3
      00460F FB               [12] 7241 	mov	r3,a
      004610 E4               [12] 7242 	clr	a
      004611 9C               [12] 7243 	subb	a,r4
      004612 FC               [12] 7244 	mov	r4,a
                                   7245 ;	vt100.c:836: while(to_put--) _vt100_putc(term, ' ');
      004613                       7246 00108$:
      004613 8B 02            [24] 7247 	mov	ar2,r3
      004615 8C 07            [24] 7248 	mov	ar7,r4
      004617 1B               [12] 7249 	dec	r3
      004618 BB FF 01         [24] 7250 	cjne	r3,#0xff,00176$
      00461B 1C               [12] 7251 	dec	r4
      00461C                       7252 00176$:
      00461C EA               [12] 7253 	mov	a,r2
      00461D 4F               [12] 7254 	orl	a,r7
      00461E 60 57            [24] 7255 	jz	00117$
      004620 C0 04            [24] 7256 	push	ar4
      004622 C0 03            [24] 7257 	push	ar3
      004624 74 20            [12] 7258 	mov	a,#0x20
      004626 C0 E0            [24] 7259 	push	acc
      004628 A8 08            [24] 7260 	mov	r0,_bp
      00462A 08               [12] 7261 	inc	r0
      00462B 86 82            [24] 7262 	mov	dpl,@r0
      00462D 08               [12] 7263 	inc	r0
      00462E 86 83            [24] 7264 	mov	dph,@r0
      004630 08               [12] 7265 	inc	r0
      004631 86 F0            [24] 7266 	mov	b,@r0
      004633 12 28 AC         [24] 7267 	lcall	__vt100_putc
      004636 15 81            [12] 7268 	dec	sp
      004638 D0 03            [24] 7269 	pop	ar3
      00463A D0 04            [24] 7270 	pop	ar4
                                   7271 ;	vt100.c:844: case KEY_ESC: {// escape
      00463C 80 D5            [24] 7272 	sjmp	00108$
      00463E                       7273 00112$:
                                   7274 ;	vt100.c:845: term->state = _st_escape;
      00463E A8 08            [24] 7275 	mov	r0,_bp
      004640 08               [12] 7276 	inc	r0
      004641 74 16            [12] 7277 	mov	a,#0x16
      004643 26               [12] 7278 	add	a,@r0
      004644 FD               [12] 7279 	mov	r5,a
      004645 E4               [12] 7280 	clr	a
      004646 08               [12] 7281 	inc	r0
      004647 36               [12] 7282 	addc	a,@r0
      004648 FE               [12] 7283 	mov	r6,a
      004649 08               [12] 7284 	inc	r0
      00464A 86 07            [24] 7285 	mov	ar7,@r0
      00464C 8D 82            [24] 7286 	mov	dpl,r5
      00464E 8E 83            [24] 7287 	mov	dph,r6
      004650 8F F0            [24] 7288 	mov	b,r7
      004652 74 1B            [12] 7289 	mov	a,#__st_escape
      004654 12 4C 58         [24] 7290 	lcall	__gptrput
      004657 A3               [24] 7291 	inc	dptr
      004658 74 3E            [12] 7292 	mov	a,#(__st_escape >> 8)
      00465A 12 4C 58         [24] 7293 	lcall	__gptrput
                                   7294 ;	vt100.c:846: break;
                                   7295 ;	vt100.c:848: default: {
      00465D 80 18            [24] 7296 	sjmp	00117$
      00465F                       7297 00113$:
                                   7298 ;	vt100.c:849: _vt100_putc(term, arg);
      00465F E5 08            [12] 7299 	mov	a,_bp
      004661 24 FC            [12] 7300 	add	a,#0xfc
      004663 F8               [12] 7301 	mov	r0,a
      004664 E6               [12] 7302 	mov	a,@r0
      004665 C0 E0            [24] 7303 	push	acc
      004667 A8 08            [24] 7304 	mov	r0,_bp
      004669 08               [12] 7305 	inc	r0
      00466A 86 82            [24] 7306 	mov	dpl,@r0
      00466C 08               [12] 7307 	inc	r0
      00466D 86 83            [24] 7308 	mov	dph,@r0
      00466F 08               [12] 7309 	inc	r0
      004670 86 F0            [24] 7310 	mov	b,@r0
      004672 12 28 AC         [24] 7311 	lcall	__vt100_putc
      004675 15 81            [12] 7312 	dec	sp
                                   7313 ;	vt100.c:856: }
      004677                       7314 00117$:
                                   7315 ;	vt100.c:857: }
      004677 85 08 81         [24] 7316 	mov	sp,_bp
      00467A D0 08            [24] 7317 	pop	_bp
      00467C 22               [24] 7318 	ret
                                   7319 ;------------------------------------------------------------
                                   7320 ;Allocation info for local variables in function 'vt100_init'
                                   7321 ;------------------------------------------------------------
                                   7322 ;send_response             Allocated to registers r6 r7 
                                   7323 ;------------------------------------------------------------
                                   7324 ;	vt100.c:860: void vt100_init(void (*send_response)(char *str)){
                                   7325 ;	-----------------------------------------
                                   7326 ;	 function vt100_init
                                   7327 ;	-----------------------------------------
      00467D                       7328 _vt100_init:
      00467D AE 82            [24] 7329 	mov	r6,dpl
      00467F AF 83            [24] 7330 	mov	r7,dph
                                   7331 ;	vt100.c:861: term.send_response = send_response; 
      004681 8E 3D            [24] 7332 	mov	((_term + 0x0018) + 0),r6
      004683 8F 3E            [24] 7333 	mov	((_term + 0x0018) + 1),r7
                                   7334 ;	vt100.c:862: _vt100_reset(); 
                                   7335 ;	vt100.c:863: }
      004685 02 21 D6         [24] 7336 	ljmp	__vt100_reset
                                   7337 ;------------------------------------------------------------
                                   7338 ;Allocation info for local variables in function 'vt100_putc'
                                   7339 ;------------------------------------------------------------
                                   7340 ;c                         Allocated to registers r7 
                                   7341 ;------------------------------------------------------------
                                   7342 ;	vt100.c:866: void vt100_putc(uint8_t c){
                                   7343 ;	-----------------------------------------
                                   7344 ;	 function vt100_putc
                                   7345 ;	-----------------------------------------
      004688                       7346 _vt100_putc:
                                   7347 ;	vt100.c:900: putchar(c);
      004688 7E 00            [12] 7348 	mov	r6,#0x00
      00468A 8E 83            [24] 7349 	mov	dph,r6
                                   7350 ;	vt100.c:902: }
      00468C 02 21 A5         [24] 7351 	ljmp	_putchar
                                   7352 ;------------------------------------------------------------
                                   7353 ;Allocation info for local variables in function 'vt100_puts'
                                   7354 ;------------------------------------------------------------
                                   7355 ;str                       Allocated to registers 
                                   7356 ;------------------------------------------------------------
                                   7357 ;	vt100.c:904: void vt100_puts(const char *str){
                                   7358 ;	-----------------------------------------
                                   7359 ;	 function vt100_puts
                                   7360 ;	-----------------------------------------
      00468F                       7361 _vt100_puts:
      00468F AD 82            [24] 7362 	mov	r5,dpl
      004691 AE 83            [24] 7363 	mov	r6,dph
      004693 AF F0            [24] 7364 	mov	r7,b
                                   7365 ;	vt100.c:905: while(*str){
      004695                       7366 00101$:
      004695 8D 82            [24] 7367 	mov	dpl,r5
      004697 8E 83            [24] 7368 	mov	dph,r6
      004699 8F F0            [24] 7369 	mov	b,r7
      00469B 12 4C 95         [24] 7370 	lcall	__gptrget
      00469E FC               [12] 7371 	mov	r4,a
      00469F 60 18            [24] 7372 	jz	00104$
                                   7373 ;	vt100.c:906: vt100_putc(*str++);
      0046A1 0D               [12] 7374 	inc	r5
      0046A2 BD 00 01         [24] 7375 	cjne	r5,#0x00,00116$
      0046A5 0E               [12] 7376 	inc	r6
      0046A6                       7377 00116$:
      0046A6 8C 82            [24] 7378 	mov	dpl,r4
      0046A8 C0 07            [24] 7379 	push	ar7
      0046AA C0 06            [24] 7380 	push	ar6
      0046AC C0 05            [24] 7381 	push	ar5
      0046AE 12 46 88         [24] 7382 	lcall	_vt100_putc
      0046B1 D0 05            [24] 7383 	pop	ar5
      0046B3 D0 06            [24] 7384 	pop	ar6
      0046B5 D0 07            [24] 7385 	pop	ar7
      0046B7 80 DC            [24] 7386 	sjmp	00101$
      0046B9                       7387 00104$:
                                   7388 ;	vt100.c:908: }
      0046B9 22               [24] 7389 	ret
                                   7390 ;------------------------------------------------------------
                                   7391 ;Allocation info for local variables in function 'spf'
                                   7392 ;------------------------------------------------------------
                                   7393 ;s                         Allocated to stack - _bp -5
                                   7394 ;args                      Allocated to stack - _bp +2
                                   7395 ;fmt                       Allocated to registers r7 
                                   7396 ;c                         Allocated to registers r5 
                                   7397 ;d                         Allocated to registers r4 
                                   7398 ;b                         Allocated to registers r7 
                                   7399 ;sloc0                     Allocated to stack - _bp +1
                                   7400 ;------------------------------------------------------------
                                   7401 ;	vt100.c:912: void spf(uint8_t *s, ...) {
                                   7402 ;	-----------------------------------------
                                   7403 ;	 function spf
                                   7404 ;	-----------------------------------------
      0046BA                       7405 _spf:
      0046BA C0 08            [24] 7406 	push	_bp
      0046BC 85 81 08         [24] 7407 	mov	_bp,sp
      0046BF 05 81            [12] 7408 	inc	sp
      0046C1 05 81            [12] 7409 	inc	sp
                                   7410 ;	vt100.c:914: uint8_t fmt = 0, c, d, b = 0;
                                   7411 ;	vt100.c:916: va_start(args, s);
      0046C3 E4               [12] 7412 	clr	a
      0046C4 FF               [12] 7413 	mov	r7,a
      0046C5 FE               [12] 7414 	mov	r6,a
      0046C6 E5 08            [12] 7415 	mov	a,_bp
      0046C8 24 FB            [12] 7416 	add	a,#0xfb
      0046CA FD               [12] 7417 	mov	r5,a
      0046CB A8 08            [24] 7418 	mov	r0,_bp
      0046CD 08               [12] 7419 	inc	r0
      0046CE 08               [12] 7420 	inc	r0
      0046CF A6 05            [24] 7421 	mov	@r0,ar5
      0046D1 E5 08            [12] 7422 	mov	a,_bp
      0046D3 24 FB            [12] 7423 	add	a,#0xfb
      0046D5 F8               [12] 7424 	mov	r0,a
      0046D6 86 02            [24] 7425 	mov	ar2,@r0
      0046D8 08               [12] 7426 	inc	r0
      0046D9 86 03            [24] 7427 	mov	ar3,@r0
      0046DB 08               [12] 7428 	inc	r0
      0046DC 86 04            [24] 7429 	mov	ar4,@r0
      0046DE 7D 00            [12] 7430 	mov	r5,#0x00
      0046E0                       7431 00111$:
                                   7432 ;	vt100.c:918: for(; *s; ) {
      0046E0 8A 82            [24] 7433 	mov	dpl,r2
      0046E2 8B 83            [24] 7434 	mov	dph,r3
      0046E4 8C F0            [24] 7435 	mov	b,r4
      0046E6 A8 08            [24] 7436 	mov	r0,_bp
      0046E8 08               [12] 7437 	inc	r0
      0046E9 12 4C 95         [24] 7438 	lcall	__gptrget
      0046EC F6               [12] 7439 	mov	@r0,a
      0046ED A8 08            [24] 7440 	mov	r0,_bp
      0046EF 08               [12] 7441 	inc	r0
      0046F0 E6               [12] 7442 	mov	a,@r0
      0046F1 70 03            [24] 7443 	jnz	00145$
      0046F3 02 47 CB         [24] 7444 	ljmp	00120$
      0046F6                       7445 00145$:
                                   7446 ;	vt100.c:920: switch (fmt) {
      0046F6 BF 00 02         [24] 7447 	cjne	r7,#0x00,00146$
      0046F9 80 0D            [24] 7448 	sjmp	00101$
      0046FB                       7449 00146$:
      0046FB BF 25 02         [24] 7450 	cjne	r7,#0x25,00147$
      0046FE 80 2F            [24] 7451 	sjmp	00105$
      004700                       7452 00147$:
      004700 BF 64 02         [24] 7453 	cjne	r7,#0x64,00148$
      004703 80 51            [24] 7454 	sjmp	00106$
      004705                       7455 00148$:
      004705 02 47 B6         [24] 7456 	ljmp	00107$
                                   7457 ;	vt100.c:921: case 0:
      004708                       7458 00101$:
                                   7459 ;	vt100.c:922: if (*s == '%') fmt = *s;
      004708 A8 08            [24] 7460 	mov	r0,_bp
      00470A 08               [12] 7461 	inc	r0
      00470B B6 25 0E         [24] 7462 	cjne	@r0,#0x25,00103$
      00470E C0 05            [24] 7463 	push	ar5
      004710 A8 08            [24] 7464 	mov	r0,_bp
      004712 08               [12] 7465 	inc	r0
      004713 86 05            [24] 7466 	mov	ar5,@r0
      004715 8D 07            [24] 7467 	mov	ar7,r5
      004717 D0 05            [24] 7468 	pop	ar5
      004719 02 47 B6         [24] 7469 	ljmp	00107$
      00471C                       7470 00103$:
                                   7471 ;	vt100.c:923: else buf[b++] = *s;
      00471C C0 05            [24] 7472 	push	ar5
      00471E 8E 05            [24] 7473 	mov	ar5,r6
      004720 0E               [12] 7474 	inc	r6
      004721 ED               [12] 7475 	mov	a,r5
      004722 24 41            [12] 7476 	add	a,#_buf
      004724 F8               [12] 7477 	mov	r0,a
      004725 A9 08            [24] 7478 	mov	r1,_bp
      004727 09               [12] 7479 	inc	r1
      004728 E7               [12] 7480 	mov	a,@r1
      004729 F6               [12] 7481 	mov	@r0,a
                                   7482 ;	vt100.c:924: break;
      00472A D0 05            [24] 7483 	pop	ar5
      00472C 02 47 B6         [24] 7484 	ljmp	00107$
                                   7485 ;	vt100.c:925: case '%':
      00472F                       7486 00105$:
                                   7487 ;	vt100.c:926: fmt = *s;
      00472F C0 02            [24] 7488 	push	ar2
      004731 C0 03            [24] 7489 	push	ar3
      004733 C0 04            [24] 7490 	push	ar4
      004735 A8 08            [24] 7491 	mov	r0,_bp
      004737 08               [12] 7492 	inc	r0
      004738 86 04            [24] 7493 	mov	ar4,@r0
      00473A 8C 07            [24] 7494 	mov	ar7,r4
                                   7495 ;	vt100.c:927: c = (uint8_t)va_arg(args, uint16_t);
      00473C A8 08            [24] 7496 	mov	r0,_bp
      00473E 08               [12] 7497 	inc	r0
      00473F 08               [12] 7498 	inc	r0
      004740 E6               [12] 7499 	mov	a,@r0
      004741 24 FE            [12] 7500 	add	a,#0xfe
      004743 FC               [12] 7501 	mov	r4,a
      004744 A8 08            [24] 7502 	mov	r0,_bp
      004746 08               [12] 7503 	inc	r0
      004747 08               [12] 7504 	inc	r0
      004748 A6 04            [24] 7505 	mov	@r0,ar4
      00474A 8C 01            [24] 7506 	mov	ar1,r4
      00474C 87 05            [24] 7507 	mov	ar5,@r1
                                   7508 ;	vt100.c:929: break;
      00474E D0 04            [24] 7509 	pop	ar4
      004750 D0 03            [24] 7510 	pop	ar3
      004752 D0 02            [24] 7511 	pop	ar2
                                   7512 ;	vt100.c:930: case 'd':
      004754 80 60            [24] 7513 	sjmp	00107$
      004756                       7514 00106$:
                                   7515 ;	vt100.c:932: buf[b++] = (d = c / 10) + '0';
      004756 C0 02            [24] 7516 	push	ar2
      004758 C0 03            [24] 7517 	push	ar3
      00475A C0 04            [24] 7518 	push	ar4
      00475C EE               [12] 7519 	mov	a,r6
      00475D 04               [12] 7520 	inc	a
      00475E FF               [12] 7521 	mov	r7,a
      00475F EE               [12] 7522 	mov	a,r6
      004760 24 41            [12] 7523 	add	a,#_buf
      004762 F9               [12] 7524 	mov	r1,a
      004763 8D 03            [24] 7525 	mov	ar3,r5
      004765 7C 00            [12] 7526 	mov	r4,#0x00
      004767 C0 07            [24] 7527 	push	ar7
      004769 C0 05            [24] 7528 	push	ar5
      00476B C0 02            [24] 7529 	push	ar2
      00476D C0 01            [24] 7530 	push	ar1
      00476F 74 0A            [12] 7531 	mov	a,#0x0a
      004771 C0 E0            [24] 7532 	push	acc
      004773 E4               [12] 7533 	clr	a
      004774 C0 E0            [24] 7534 	push	acc
      004776 8B 82            [24] 7535 	mov	dpl,r3
      004778 8C 83            [24] 7536 	mov	dph,r4
      00477A 12 4D 33         [24] 7537 	lcall	__divsint
      00477D AB 82            [24] 7538 	mov	r3,dpl
      00477F 15 81            [12] 7539 	dec	sp
      004781 15 81            [12] 7540 	dec	sp
      004783 D0 01            [24] 7541 	pop	ar1
      004785 D0 02            [24] 7542 	pop	ar2
      004787 D0 05            [24] 7543 	pop	ar5
      004789 D0 07            [24] 7544 	pop	ar7
      00478B 8B 04            [24] 7545 	mov	ar4,r3
      00478D 74 30            [12] 7546 	mov	a,#0x30
      00478F 2B               [12] 7547 	add	a,r3
      004790 F7               [12] 7548 	mov	@r1,a
                                   7549 ;	vt100.c:933: c -= d * 10;
      004791 EC               [12] 7550 	mov	a,r4
      004792 75 F0 0A         [24] 7551 	mov	b,#0x0a
      004795 A4               [48] 7552 	mul	ab
      004796 FC               [12] 7553 	mov	r4,a
      004797 8D 03            [24] 7554 	mov	ar3,r5
      004799 EB               [12] 7555 	mov	a,r3
      00479A C3               [12] 7556 	clr	c
      00479B 9C               [12] 7557 	subb	a,r4
      00479C FD               [12] 7558 	mov	r5,a
                                   7559 ;	vt100.c:934: buf[b++] = c + '0';	
      00479D EF               [12] 7560 	mov	a,r7
      00479E FC               [12] 7561 	mov	r4,a
      00479F 04               [12] 7562 	inc	a
      0047A0 FE               [12] 7563 	mov	r6,a
      0047A1 EC               [12] 7564 	mov	a,r4
      0047A2 24 41            [12] 7565 	add	a,#_buf
      0047A4 F9               [12] 7566 	mov	r1,a
      0047A5 8D 04            [24] 7567 	mov	ar4,r5
      0047A7 74 30            [12] 7568 	mov	a,#0x30
      0047A9 2C               [12] 7569 	add	a,r4
      0047AA F7               [12] 7570 	mov	@r1,a
                                   7571 ;	vt100.c:935: fmt = 0;
      0047AB 7F 00            [12] 7572 	mov	r7,#0x00
                                   7573 ;	vt100.c:936: continue;
      0047AD D0 04            [24] 7574 	pop	ar4
      0047AF D0 03            [24] 7575 	pop	ar3
      0047B1 D0 02            [24] 7576 	pop	ar2
      0047B3 02 46 E0         [24] 7577 	ljmp	00111$
                                   7578 ;	vt100.c:937: }
      0047B6                       7579 00107$:
                                   7580 ;	vt100.c:938: s++;
      0047B6 0A               [12] 7581 	inc	r2
      0047B7 BA 00 01         [24] 7582 	cjne	r2,#0x00,00151$
      0047BA 0B               [12] 7583 	inc	r3
      0047BB                       7584 00151$:
      0047BB E5 08            [12] 7585 	mov	a,_bp
      0047BD 24 FB            [12] 7586 	add	a,#0xfb
      0047BF F8               [12] 7587 	mov	r0,a
      0047C0 A6 02            [24] 7588 	mov	@r0,ar2
      0047C2 08               [12] 7589 	inc	r0
      0047C3 A6 03            [24] 7590 	mov	@r0,ar3
      0047C5 08               [12] 7591 	inc	r0
      0047C6 A6 04            [24] 7592 	mov	@r0,ar4
      0047C8 02 46 E0         [24] 7593 	ljmp	00111$
      0047CB                       7594 00120$:
      0047CB E5 08            [12] 7595 	mov	a,_bp
      0047CD 24 FB            [12] 7596 	add	a,#0xfb
      0047CF F8               [12] 7597 	mov	r0,a
      0047D0 A6 02            [24] 7598 	mov	@r0,ar2
      0047D2 08               [12] 7599 	inc	r0
      0047D3 A6 03            [24] 7600 	mov	@r0,ar3
      0047D5 08               [12] 7601 	inc	r0
      0047D6 A6 04            [24] 7602 	mov	@r0,ar4
                                   7603 ;	vt100.c:940: buf[b] = 0;
      0047D8 EE               [12] 7604 	mov	a,r6
      0047D9 24 41            [12] 7605 	add	a,#_buf
      0047DB F8               [12] 7606 	mov	r0,a
      0047DC 76 00            [12] 7607 	mov	@r0,#0x00
                                   7608 ;	vt100.c:942: va_end(args);
                                   7609 ;	vt100.c:943: }
      0047DE 85 08 81         [24] 7610 	mov	sp,_bp
      0047E1 D0 08            [24] 7611 	pop	_bp
      0047E3 22               [24] 7612 	ret
                                   7613 ;------------------------------------------------------------
                                   7614 ;Allocation info for local variables in function 'main'
                                   7615 ;------------------------------------------------------------
                                   7616 ;c                         Allocated to registers r7 
                                   7617 ;c                         Allocated to registers r6 r7 
                                   7618 ;c                         Allocated to registers r6 r7 
                                   7619 ;text                      Allocated to stack - _bp +1
                                   7620 ;c                         Allocated to stack - _bp +10
                                   7621 ;c                         Allocated to registers r6 r7 
                                   7622 ;c                         Allocated to registers r6 r7 
                                   7623 ;c                         Allocated to registers r6 r7 
                                   7624 ;c                         Allocated to registers r6 r7 
                                   7625 ;c                         Allocated to registers r6 r7 
                                   7626 ;c                         Allocated to registers r6 r7 
                                   7627 ;------------------------------------------------------------
                                   7628 ;	vt100.c:945: void main(void) {
                                   7629 ;	-----------------------------------------
                                   7630 ;	 function main
                                   7631 ;	-----------------------------------------
      0047E4                       7632 _main:
      0047E4 C0 08            [24] 7633 	push	_bp
      0047E6 E5 81            [12] 7634 	mov	a,sp
      0047E8 F5 08            [12] 7635 	mov	_bp,a
      0047EA 24 0B            [12] 7636 	add	a,#0x0b
      0047EC F5 81            [12] 7637 	mov	sp,a
                                   7638 ;	vt100.c:949: vga_init();
      0047EE 12 20 62         [24] 7639 	lcall	_vga_init
                                   7640 ;	vt100.c:951: vt100_init(NULL);
      0047F1 90 00 00         [24] 7641 	mov	dptr,#0x0000
      0047F4 12 46 7D         [24] 7642 	lcall	_vt100_init
                                   7643 ;	vt100.c:975: vt100_puts("\033[c\033[2J\033[m\033[r\033[?6l\033[1;1H");
      0047F7 90 4E 19         [24] 7644 	mov	dptr,#___str_6
      0047FA 75 F0 80         [24] 7645 	mov	b,#0x80
      0047FD 12 46 8F         [24] 7646 	lcall	_vt100_puts
                                   7647 ;	vt100.c:979: for(c = 0; c < VT100_WIDTH; c++){
      004800 7F 00            [12] 7648 	mov	r7,#0x00
      004802                       7649 00118$:
                                   7650 ;	vt100.c:980: vt100_putc('*'); 
      004802 75 82 2A         [24] 7651 	mov	dpl,#0x2a
      004805 C0 07            [24] 7652 	push	ar7
      004807 12 46 88         [24] 7653 	lcall	_vt100_putc
      00480A D0 07            [24] 7654 	pop	ar7
                                   7655 ;	vt100.c:979: for(c = 0; c < VT100_WIDTH; c++){
      00480C 0F               [12] 7656 	inc	r7
      00480D BF 50 00         [24] 7657 	cjne	r7,#0x50,00314$
      004810                       7658 00314$:
      004810 40 F0            [24] 7659 	jc	00118$
                                   7660 ;	vt100.c:984: for(c = 0; c < VT100_HEIGHT; c++){
      004812 7F 00            [12] 7661 	mov	r7,#0x00
      004814                       7662 00120$:
                                   7663 ;	vt100.c:985: spf("\033[%d;1H*\033[%d;%dH*", c + 1, c + 1, VT100_WIDTH);
      004814 8F 05            [24] 7664 	mov	ar5,r7
      004816 7E 00            [12] 7665 	mov	r6,#0x00
      004818 0D               [12] 7666 	inc	r5
      004819 BD 00 01         [24] 7667 	cjne	r5,#0x00,00316$
      00481C 0E               [12] 7668 	inc	r6
      00481D                       7669 00316$:
      00481D C0 07            [24] 7670 	push	ar7
      00481F 74 50            [12] 7671 	mov	a,#0x50
      004821 C0 E0            [24] 7672 	push	acc
      004823 E4               [12] 7673 	clr	a
      004824 C0 E0            [24] 7674 	push	acc
      004826 C0 05            [24] 7675 	push	ar5
      004828 C0 06            [24] 7676 	push	ar6
      00482A C0 05            [24] 7677 	push	ar5
      00482C C0 06            [24] 7678 	push	ar6
      00482E 74 32            [12] 7679 	mov	a,#___str_7
      004830 C0 E0            [24] 7680 	push	acc
      004832 74 4E            [12] 7681 	mov	a,#(___str_7 >> 8)
      004834 C0 E0            [24] 7682 	push	acc
      004836 74 80            [12] 7683 	mov	a,#0x80
      004838 C0 E0            [24] 7684 	push	acc
      00483A 12 46 BA         [24] 7685 	lcall	_spf
      00483D E5 81            [12] 7686 	mov	a,sp
      00483F 24 F7            [12] 7687 	add	a,#0xf7
      004841 F5 81            [12] 7688 	mov	sp,a
                                   7689 ;	vt100.c:986: vt100_puts(buf);
      004843 90 00 41         [24] 7690 	mov	dptr,#_buf
      004846 75 F0 40         [24] 7691 	mov	b,#0x40
      004849 12 46 8F         [24] 7692 	lcall	_vt100_puts
      00484C D0 07            [24] 7693 	pop	ar7
                                   7694 ;	vt100.c:984: for(c = 0; c < VT100_HEIGHT; c++){
      00484E 0F               [12] 7695 	inc	r7
      00484F BF 18 00         [24] 7696 	cjne	r7,#0x18,00317$
      004852                       7697 00317$:
      004852 40 C0            [24] 7698 	jc	00120$
                                   7699 ;	vt100.c:990: spf("\033[%d;1H", VT100_HEIGHT);
      004854 74 18            [12] 7700 	mov	a,#0x18
      004856 C0 E0            [24] 7701 	push	acc
      004858 E4               [12] 7702 	clr	a
      004859 C0 E0            [24] 7703 	push	acc
      00485B 74 44            [12] 7704 	mov	a,#___str_8
      00485D C0 E0            [24] 7705 	push	acc
      00485F 74 4E            [12] 7706 	mov	a,#(___str_8 >> 8)
      004861 C0 E0            [24] 7707 	push	acc
      004863 74 80            [12] 7708 	mov	a,#0x80
      004865 C0 E0            [24] 7709 	push	acc
      004867 12 46 BA         [24] 7710 	lcall	_spf
      00486A E5 81            [12] 7711 	mov	a,sp
      00486C 24 FB            [12] 7712 	add	a,#0xfb
      00486E F5 81            [12] 7713 	mov	sp,a
                                   7714 ;	vt100.c:991: vt100_puts(buf); 
      004870 90 00 41         [24] 7715 	mov	dptr,#_buf
      004873 75 F0 40         [24] 7716 	mov	b,#0x40
      004876 12 46 8F         [24] 7717 	lcall	_vt100_puts
                                   7718 ;	vt100.c:992: for(c = 0; c < VT100_WIDTH; c++){
      004879 7F 00            [12] 7719 	mov	r7,#0x00
      00487B                       7720 00122$:
                                   7721 ;	vt100.c:993: vt100_putc('*');
      00487B 75 82 2A         [24] 7722 	mov	dpl,#0x2a
      00487E C0 07            [24] 7723 	push	ar7
      004880 12 46 88         [24] 7724 	lcall	_vt100_putc
      004883 D0 07            [24] 7725 	pop	ar7
                                   7726 ;	vt100.c:992: for(c = 0; c < VT100_WIDTH; c++){
      004885 0F               [12] 7727 	inc	r7
      004886 BF 50 00         [24] 7728 	cjne	r7,#0x50,00319$
      004889                       7729 00319$:
      004889 40 F0            [24] 7730 	jc	00122$
                                   7731 ;	vt100.c:996: vt100_puts("\033[2;2H");
      00488B 90 4E 4C         [24] 7732 	mov	dptr,#___str_9
      00488E 75 F0 80         [24] 7733 	mov	b,#0x80
      004891 12 46 8F         [24] 7734 	lcall	_vt100_puts
                                   7735 ;	vt100.c:998: for(c = 0; c < VT100_WIDTH - 2; c++){
      004894 7F 00            [12] 7736 	mov	r7,#0x00
      004896                       7737 00124$:
                                   7738 ;	vt100.c:999: vt100_putc('+'); 
      004896 75 82 2B         [24] 7739 	mov	dpl,#0x2b
      004899 C0 07            [24] 7740 	push	ar7
      00489B 12 46 88         [24] 7741 	lcall	_vt100_putc
      00489E D0 07            [24] 7742 	pop	ar7
                                   7743 ;	vt100.c:998: for(c = 0; c < VT100_WIDTH - 2; c++){
      0048A0 0F               [12] 7744 	inc	r7
      0048A1 BF 4E 00         [24] 7745 	cjne	r7,#0x4e,00321$
      0048A4                       7746 00321$:
      0048A4 40 F0            [24] 7747 	jc	00124$
                                   7748 ;	vt100.c:1002: for(c = 1; c < VT100_HEIGHT - 1; c++){
      0048A6 7F 01            [12] 7749 	mov	r7,#0x01
      0048A8                       7750 00126$:
                                   7751 ;	vt100.c:1003: spf("\033[%d;2H+\033[%d;%dH+", c + 1, c + 1, VT100_WIDTH - 1);
      0048A8 8F 05            [24] 7752 	mov	ar5,r7
      0048AA 7E 00            [12] 7753 	mov	r6,#0x00
      0048AC 0D               [12] 7754 	inc	r5
      0048AD BD 00 01         [24] 7755 	cjne	r5,#0x00,00323$
      0048B0 0E               [12] 7756 	inc	r6
      0048B1                       7757 00323$:
      0048B1 C0 07            [24] 7758 	push	ar7
      0048B3 74 4F            [12] 7759 	mov	a,#0x4f
      0048B5 C0 E0            [24] 7760 	push	acc
      0048B7 E4               [12] 7761 	clr	a
      0048B8 C0 E0            [24] 7762 	push	acc
      0048BA C0 05            [24] 7763 	push	ar5
      0048BC C0 06            [24] 7764 	push	ar6
      0048BE C0 05            [24] 7765 	push	ar5
      0048C0 C0 06            [24] 7766 	push	ar6
      0048C2 74 53            [12] 7767 	mov	a,#___str_10
      0048C4 C0 E0            [24] 7768 	push	acc
      0048C6 74 4E            [12] 7769 	mov	a,#(___str_10 >> 8)
      0048C8 C0 E0            [24] 7770 	push	acc
      0048CA 74 80            [12] 7771 	mov	a,#0x80
      0048CC C0 E0            [24] 7772 	push	acc
      0048CE 12 46 BA         [24] 7773 	lcall	_spf
      0048D1 E5 81            [12] 7774 	mov	a,sp
      0048D3 24 F7            [12] 7775 	add	a,#0xf7
      0048D5 F5 81            [12] 7776 	mov	sp,a
                                   7777 ;	vt100.c:1004: vt100_puts(buf);
      0048D7 90 00 41         [24] 7778 	mov	dptr,#_buf
      0048DA 75 F0 40         [24] 7779 	mov	b,#0x40
      0048DD 12 46 8F         [24] 7780 	lcall	_vt100_puts
      0048E0 D0 07            [24] 7781 	pop	ar7
                                   7782 ;	vt100.c:1002: for(c = 1; c < VT100_HEIGHT - 1; c++){
      0048E2 0F               [12] 7783 	inc	r7
      0048E3 BF 17 00         [24] 7784 	cjne	r7,#0x17,00324$
      0048E6                       7785 00324$:
      0048E6 40 C0            [24] 7786 	jc	00126$
                                   7787 ;	vt100.c:1007: spf("\033[%d;2H", VT100_HEIGHT - 1);
      0048E8 74 17            [12] 7788 	mov	a,#0x17
      0048EA C0 E0            [24] 7789 	push	acc
      0048EC E4               [12] 7790 	clr	a
      0048ED C0 E0            [24] 7791 	push	acc
      0048EF 74 65            [12] 7792 	mov	a,#___str_11
      0048F1 C0 E0            [24] 7793 	push	acc
      0048F3 74 4E            [12] 7794 	mov	a,#(___str_11 >> 8)
      0048F5 C0 E0            [24] 7795 	push	acc
      0048F7 74 80            [12] 7796 	mov	a,#0x80
      0048F9 C0 E0            [24] 7797 	push	acc
      0048FB 12 46 BA         [24] 7798 	lcall	_spf
      0048FE E5 81            [12] 7799 	mov	a,sp
      004900 24 FB            [12] 7800 	add	a,#0xfb
      004902 F5 81            [12] 7801 	mov	sp,a
                                   7802 ;	vt100.c:1008: vt100_puts(buf); 
      004904 90 00 41         [24] 7803 	mov	dptr,#_buf
      004907 75 F0 40         [24] 7804 	mov	b,#0x40
      00490A 12 46 8F         [24] 7805 	lcall	_vt100_puts
                                   7806 ;	vt100.c:1009: for(c = 0; c < VT100_WIDTH - 2; c++){
      00490D 7F 00            [12] 7807 	mov	r7,#0x00
      00490F                       7808 00128$:
                                   7809 ;	vt100.c:1010: vt100_putc('+');
      00490F 75 82 2B         [24] 7810 	mov	dpl,#0x2b
      004912 C0 07            [24] 7811 	push	ar7
      004914 12 46 88         [24] 7812 	lcall	_vt100_putc
      004917 D0 07            [24] 7813 	pop	ar7
                                   7814 ;	vt100.c:1009: for(c = 0; c < VT100_WIDTH - 2; c++){
      004919 0F               [12] 7815 	inc	r7
      00491A BF 4E 00         [24] 7816 	cjne	r7,#0x4e,00326$
      00491D                       7817 00326$:
      00491D 40 F0            [24] 7818 	jc	00128$
                                   7819 ;	vt100.c:1021: vt100_puts("\033[10;6H");
      00491F 90 4E 6D         [24] 7820 	mov	dptr,#___str_12
      004922 75 F0 80         [24] 7821 	mov	b,#0x80
      004925 12 46 8F         [24] 7822 	lcall	_vt100_puts
                                   7823 ;	vt100.c:1022: for(int c = 0; c < 30; c++){
      004928 7E 00            [12] 7824 	mov	r6,#0x00
      00492A 7F 00            [12] 7825 	mov	r7,#0x00
      00492C                       7826 00131$:
      00492C C3               [12] 7827 	clr	c
      00492D EE               [12] 7828 	mov	a,r6
      00492E 94 1E            [12] 7829 	subb	a,#0x1e
      004930 EF               [12] 7830 	mov	a,r7
      004931 64 80            [12] 7831 	xrl	a,#0x80
      004933 94 80            [12] 7832 	subb	a,#0x80
      004935 50 15            [24] 7833 	jnc	00107$
                                   7834 ;	vt100.c:1023: vt100_putc('E');
      004937 75 82 45         [24] 7835 	mov	dpl,#0x45
      00493A C0 07            [24] 7836 	push	ar7
      00493C C0 06            [24] 7837 	push	ar6
      00493E 12 46 88         [24] 7838 	lcall	_vt100_putc
      004941 D0 06            [24] 7839 	pop	ar6
      004943 D0 07            [24] 7840 	pop	ar7
                                   7841 ;	vt100.c:1022: for(int c = 0; c < 30; c++){
      004945 0E               [12] 7842 	inc	r6
      004946 BE 00 E3         [24] 7843 	cjne	r6,#0x00,00131$
      004949 0F               [12] 7844 	inc	r7
      00494A 80 E0            [24] 7845 	sjmp	00131$
      00494C                       7846 00107$:
                                   7847 ;	vt100.c:1026: vt100_puts("\033[11;6H");
      00494C 90 4E 75         [24] 7848 	mov	dptr,#___str_13
      00494F 75 F0 80         [24] 7849 	mov	b,#0x80
      004952 12 46 8F         [24] 7850 	lcall	_vt100_puts
                                   7851 ;	vt100.c:1028: vt100_puts("\0337\033[35;10H\0338");
      004955 90 4E 7D         [24] 7852 	mov	dptr,#___str_14
      004958 75 F0 80         [24] 7853 	mov	b,#0x80
      00495B 12 46 8F         [24] 7854 	lcall	_vt100_puts
                                   7855 ;	vt100.c:1029: vt100_puts("E\033[11;35HE");
      00495E 90 4E 8A         [24] 7856 	mov	dptr,#___str_15
      004961 75 F0 80         [24] 7857 	mov	b,#0x80
      004964 12 46 8F         [24] 7858 	lcall	_vt100_puts
                                   7859 ;	vt100.c:1031: vt100_puts("\033[12;6HE\033[28CE");
      004967 90 4E 95         [24] 7860 	mov	dptr,#___str_16
      00496A 75 F0 80         [24] 7861 	mov	b,#0x80
      00496D 12 46 8F         [24] 7862 	lcall	_vt100_puts
                                   7863 ;	vt100.c:1033: vt100_puts("\033[30D\033[BE\033[28CE");
      004970 90 4E A4         [24] 7864 	mov	dptr,#___str_17
      004973 75 F0 80         [24] 7865 	mov	b,#0x80
      004976 12 46 8F         [24] 7866 	lcall	_vt100_puts
                                   7867 ;	vt100.c:1034: vt100_puts("\033[15;6H\033[AE\033[28CE");
      004979 90 4E B4         [24] 7868 	mov	dptr,#___str_18
      00497C 75 F0 80         [24] 7869 	mov	b,#0x80
      00497F 12 46 8F         [24] 7870 	lcall	_vt100_puts
                                   7871 ;	vt100.c:1035: vt100_puts("\033[15;6HE\033[15;35HE"); 
      004982 90 4E C6         [24] 7872 	mov	dptr,#___str_19
      004985 75 F0 80         [24] 7873 	mov	b,#0x80
      004988 12 46 8F         [24] 7874 	lcall	_vt100_puts
                                   7875 ;	vt100.c:1037: vt100_puts("\033[16;6H");
      00498B 90 4E D8         [24] 7876 	mov	dptr,#___str_20
      00498E 75 F0 80         [24] 7877 	mov	b,#0x80
      004991 12 46 8F         [24] 7878 	lcall	_vt100_puts
                                   7879 ;	vt100.c:1038: for(int c = 0; c < 30; c++){
      004994 7E 00            [12] 7880 	mov	r6,#0x00
      004996 7F 00            [12] 7881 	mov	r7,#0x00
      004998                       7882 00134$:
      004998 C3               [12] 7883 	clr	c
      004999 EE               [12] 7884 	mov	a,r6
      00499A 94 1E            [12] 7885 	subb	a,#0x1e
      00499C EF               [12] 7886 	mov	a,r7
      00499D 64 80            [12] 7887 	xrl	a,#0x80
      00499F 94 80            [12] 7888 	subb	a,#0x80
      0049A1 50 15            [24] 7889 	jnc	00108$
                                   7890 ;	vt100.c:1039: vt100_putc('E');
      0049A3 75 82 45         [24] 7891 	mov	dpl,#0x45
      0049A6 C0 07            [24] 7892 	push	ar7
      0049A8 C0 06            [24] 7893 	push	ar6
      0049AA 12 46 88         [24] 7894 	lcall	_vt100_putc
      0049AD D0 06            [24] 7895 	pop	ar6
      0049AF D0 07            [24] 7896 	pop	ar7
                                   7897 ;	vt100.c:1038: for(int c = 0; c < 30; c++){
      0049B1 0E               [12] 7898 	inc	r6
      0049B2 BE 00 E3         [24] 7899 	cjne	r6,#0x00,00134$
      0049B5 0F               [12] 7900 	inc	r7
      0049B6 80 E0            [24] 7901 	sjmp	00134$
      0049B8                       7902 00108$:
                                   7903 ;	vt100.c:1042: const char *text[] = {"This must be an unbroken a", "rea of text with 1 free bo", "rder around the text.     "};
      0049B8 A9 08            [24] 7904 	mov	r1,_bp
      0049BA 09               [12] 7905 	inc	r1
      0049BB 77 C8            [12] 7906 	mov	@r1,#___str_3
      0049BD 09               [12] 7907 	inc	r1
      0049BE 77 4D            [12] 7908 	mov	@r1,#(___str_3 >> 8)
      0049C0 09               [12] 7909 	inc	r1
      0049C1 77 80            [12] 7910 	mov	@r1,#0x80
      0049C3 19               [12] 7911 	dec	r1
      0049C4 19               [12] 7912 	dec	r1
      0049C5 74 03            [12] 7913 	mov	a,#0x03
      0049C7 29               [12] 7914 	add	a,r1
      0049C8 F8               [12] 7915 	mov	r0,a
      0049C9 76 E3            [12] 7916 	mov	@r0,#___str_4
      0049CB 08               [12] 7917 	inc	r0
      0049CC 76 4D            [12] 7918 	mov	@r0,#(___str_4 >> 8)
      0049CE 08               [12] 7919 	inc	r0
      0049CF 76 80            [12] 7920 	mov	@r0,#0x80
      0049D1 74 06            [12] 7921 	mov	a,#0x06
      0049D3 29               [12] 7922 	add	a,r1
      0049D4 F8               [12] 7923 	mov	r0,a
      0049D5 76 FE            [12] 7924 	mov	@r0,#___str_5
      0049D7 08               [12] 7925 	inc	r0
      0049D8 76 4D            [12] 7926 	mov	@r0,#(___str_5 >> 8)
      0049DA 08               [12] 7927 	inc	r0
      0049DB 76 80            [12] 7928 	mov	@r0,#0x80
                                   7929 ;	vt100.c:1043: for(int c = 0; c < 3; c++){
      0049DD E5 08            [12] 7930 	mov	a,_bp
      0049DF 24 0A            [12] 7931 	add	a,#0x0a
      0049E1 F8               [12] 7932 	mov	r0,a
      0049E2 E4               [12] 7933 	clr	a
      0049E3 F6               [12] 7934 	mov	@r0,a
      0049E4 08               [12] 7935 	inc	r0
      0049E5 F6               [12] 7936 	mov	@r0,a
      0049E6 FC               [12] 7937 	mov	r4,a
      0049E7 FD               [12] 7938 	mov	r5,a
      0049E8                       7939 00137$:
      0049E8 E5 08            [12] 7940 	mov	a,_bp
      0049EA 24 0A            [12] 7941 	add	a,#0x0a
      0049EC F8               [12] 7942 	mov	r0,a
      0049ED C3               [12] 7943 	clr	c
      0049EE E6               [12] 7944 	mov	a,@r0
      0049EF 94 03            [12] 7945 	subb	a,#0x03
      0049F1 08               [12] 7946 	inc	r0
      0049F2 E6               [12] 7947 	mov	a,@r0
      0049F3 64 80            [12] 7948 	xrl	a,#0x80
      0049F5 94 80            [12] 7949 	subb	a,#0x80
      0049F7 50 76            [24] 7950 	jnc	00109$
                                   7951 ;	vt100.c:1044: spf("\033[%d;8H", c + 12);
      0049F9 E5 08            [12] 7952 	mov	a,_bp
      0049FB 24 0A            [12] 7953 	add	a,#0x0a
      0049FD F8               [12] 7954 	mov	r0,a
      0049FE 74 0C            [12] 7955 	mov	a,#0x0c
      004A00 26               [12] 7956 	add	a,@r0
      004A01 FA               [12] 7957 	mov	r2,a
      004A02 E4               [12] 7958 	clr	a
      004A03 08               [12] 7959 	inc	r0
      004A04 36               [12] 7960 	addc	a,@r0
      004A05 FB               [12] 7961 	mov	r3,a
      004A06 C0 05            [24] 7962 	push	ar5
      004A08 C0 04            [24] 7963 	push	ar4
      004A0A C0 01            [24] 7964 	push	ar1
      004A0C C0 02            [24] 7965 	push	ar2
      004A0E C0 03            [24] 7966 	push	ar3
      004A10 74 E0            [12] 7967 	mov	a,#___str_21
      004A12 C0 E0            [24] 7968 	push	acc
      004A14 74 4E            [12] 7969 	mov	a,#(___str_21 >> 8)
      004A16 C0 E0            [24] 7970 	push	acc
      004A18 74 80            [12] 7971 	mov	a,#0x80
      004A1A C0 E0            [24] 7972 	push	acc
      004A1C 12 46 BA         [24] 7973 	lcall	_spf
      004A1F E5 81            [12] 7974 	mov	a,sp
      004A21 24 FB            [12] 7975 	add	a,#0xfb
      004A23 F5 81            [12] 7976 	mov	sp,a
                                   7977 ;	vt100.c:1045: vt100_puts(buf);
      004A25 90 00 41         [24] 7978 	mov	dptr,#_buf
      004A28 75 F0 40         [24] 7979 	mov	b,#0x40
      004A2B 12 46 8F         [24] 7980 	lcall	_vt100_puts
      004A2E D0 01            [24] 7981 	pop	ar1
      004A30 D0 04            [24] 7982 	pop	ar4
      004A32 D0 05            [24] 7983 	pop	ar5
                                   7984 ;	vt100.c:1046: vt100_puts(text[c]);
      004A34 EC               [12] 7985 	mov	a,r4
      004A35 29               [12] 7986 	add	a,r1
      004A36 F8               [12] 7987 	mov	r0,a
      004A37 C0 01            [24] 7988 	push	ar1
      004A39 86 02            [24] 7989 	mov	ar2,@r0
      004A3B 08               [12] 7990 	inc	r0
      004A3C 86 03            [24] 7991 	mov	ar3,@r0
      004A3E 08               [12] 7992 	inc	r0
      004A3F 86 07            [24] 7993 	mov	ar7,@r0
      004A41 18               [12] 7994 	dec	r0
      004A42 18               [12] 7995 	dec	r0
      004A43 8A 82            [24] 7996 	mov	dpl,r2
      004A45 8B 83            [24] 7997 	mov	dph,r3
      004A47 8F F0            [24] 7998 	mov	b,r7
      004A49 C0 05            [24] 7999 	push	ar5
      004A4B C0 04            [24] 8000 	push	ar4
      004A4D C0 01            [24] 8001 	push	ar1
      004A4F 12 46 8F         [24] 8002 	lcall	_vt100_puts
      004A52 D0 01            [24] 8003 	pop	ar1
      004A54 D0 04            [24] 8004 	pop	ar4
      004A56 D0 05            [24] 8005 	pop	ar5
                                   8006 ;	vt100.c:1043: for(int c = 0; c < 3; c++){
      004A58 74 03            [12] 8007 	mov	a,#0x03
      004A5A 2C               [12] 8008 	add	a,r4
      004A5B FC               [12] 8009 	mov	r4,a
      004A5C E4               [12] 8010 	clr	a
      004A5D 3D               [12] 8011 	addc	a,r5
      004A5E FD               [12] 8012 	mov	r5,a
      004A5F E5 08            [12] 8013 	mov	a,_bp
      004A61 24 0A            [12] 8014 	add	a,#0x0a
      004A63 F8               [12] 8015 	mov	r0,a
      004A64 06               [12] 8016 	inc	@r0
      004A65 B6 00 02         [24] 8017 	cjne	@r0,#0x00,00333$
      004A68 08               [12] 8018 	inc	r0
      004A69 06               [12] 8019 	inc	@r0
      004A6A                       8020 00333$:
      004A6A D0 01            [24] 8021 	pop	ar1
      004A6C 02 49 E8         [24] 8022 	ljmp	00137$
      004A6F                       8023 00109$:
                                   8024 ;	vt100.c:1051: vt100_puts("\033[10;40H"); 
      004A6F 90 4E E8         [24] 8025 	mov	dptr,#___str_22
      004A72 75 F0 80         [24] 8026 	mov	b,#0x80
      004A75 12 46 8F         [24] 8027 	lcall	_vt100_puts
                                   8028 ;	vt100.c:1052: for(int c = 0; c < 10; c++){
      004A78 7E 00            [12] 8029 	mov	r6,#0x00
      004A7A 7F 00            [12] 8030 	mov	r7,#0x00
      004A7C                       8031 00140$:
      004A7C C3               [12] 8032 	clr	c
      004A7D EE               [12] 8033 	mov	a,r6
      004A7E 94 0A            [12] 8034 	subb	a,#0x0a
      004A80 EF               [12] 8035 	mov	a,r7
      004A81 64 80            [12] 8036 	xrl	a,#0x80
      004A83 94 80            [12] 8037 	subb	a,#0x80
      004A85 50 18            [24] 8038 	jnc	00110$
                                   8039 ;	vt100.c:1054: vt100_puts("E\033[1CF\033[3D\033[B");
      004A87 90 4E F1         [24] 8040 	mov	dptr,#___str_23
      004A8A 75 F0 80         [24] 8041 	mov	b,#0x80
      004A8D C0 07            [24] 8042 	push	ar7
      004A8F C0 06            [24] 8043 	push	ar6
      004A91 12 46 8F         [24] 8044 	lcall	_vt100_puts
      004A94 D0 06            [24] 8045 	pop	ar6
      004A96 D0 07            [24] 8046 	pop	ar7
                                   8047 ;	vt100.c:1052: for(int c = 0; c < 10; c++){
      004A98 0E               [12] 8048 	inc	r6
      004A99 BE 00 E0         [24] 8049 	cjne	r6,#0x00,00140$
      004A9C 0F               [12] 8050 	inc	r7
      004A9D 80 DD            [24] 8051 	sjmp	00140$
      004A9F                       8052 00110$:
                                   8053 ;	vt100.c:1064: vt100_puts("\033[24;1H");
      004A9F 90 4E FF         [24] 8054 	mov	dptr,#___str_24
      004AA2 75 F0 80         [24] 8055 	mov	b,#0x80
      004AA5 12 46 8F         [24] 8056 	lcall	_vt100_puts
                                   8057 ;	vt100.c:1065: for(int c = 0; c < 7; c++){
      004AA8 7E 00            [12] 8058 	mov	r6,#0x00
      004AAA 7F 00            [12] 8059 	mov	r7,#0x00
      004AAC                       8060 00143$:
      004AAC C3               [12] 8061 	clr	c
      004AAD EE               [12] 8062 	mov	a,r6
      004AAE 94 07            [12] 8063 	subb	a,#0x07
      004AB0 EF               [12] 8064 	mov	a,r7
      004AB1 64 80            [12] 8065 	xrl	a,#0x80
      004AB3 94 80            [12] 8066 	subb	a,#0x80
      004AB5 50 18            [24] 8067 	jnc	00111$
                                   8068 ;	vt100.c:1066: vt100_puts("\033D");
      004AB7 90 4F 07         [24] 8069 	mov	dptr,#___str_25
      004ABA 75 F0 80         [24] 8070 	mov	b,#0x80
      004ABD C0 07            [24] 8071 	push	ar7
      004ABF C0 06            [24] 8072 	push	ar6
      004AC1 12 46 8F         [24] 8073 	lcall	_vt100_puts
      004AC4 D0 06            [24] 8074 	pop	ar6
      004AC6 D0 07            [24] 8075 	pop	ar7
                                   8076 ;	vt100.c:1065: for(int c = 0; c < 7; c++){
      004AC8 0E               [12] 8077 	inc	r6
      004AC9 BE 00 E0         [24] 8078 	cjne	r6,#0x00,00143$
      004ACC 0F               [12] 8079 	inc	r7
      004ACD 80 DD            [24] 8080 	sjmp	00143$
      004ACF                       8081 00111$:
                                   8082 ;	vt100.c:1069: getchar();
      004ACF 12 21 C8         [24] 8083 	lcall	_getchar
                                   8084 ;	vt100.c:1070: getchar();
      004AD2 12 21 C8         [24] 8085 	lcall	_getchar
                                   8086 ;	vt100.c:1075: vt100_puts("\033[1;1H");
      004AD5 90 4F 0A         [24] 8087 	mov	dptr,#___str_26
      004AD8 75 F0 80         [24] 8088 	mov	b,#0x80
      004ADB 12 46 8F         [24] 8089 	lcall	_vt100_puts
                                   8090 ;	vt100.c:1076: for(int c = 0; c < 7; c++){
      004ADE 7E 00            [12] 8091 	mov	r6,#0x00
      004AE0 7F 00            [12] 8092 	mov	r7,#0x00
      004AE2                       8093 00146$:
      004AE2 C3               [12] 8094 	clr	c
      004AE3 EE               [12] 8095 	mov	a,r6
      004AE4 94 07            [12] 8096 	subb	a,#0x07
      004AE6 EF               [12] 8097 	mov	a,r7
      004AE7 64 80            [12] 8098 	xrl	a,#0x80
      004AE9 94 80            [12] 8099 	subb	a,#0x80
      004AEB 50 18            [24] 8100 	jnc	00112$
                                   8101 ;	vt100.c:1077: vt100_puts("\033M");
      004AED 90 4F 11         [24] 8102 	mov	dptr,#___str_27
      004AF0 75 F0 80         [24] 8103 	mov	b,#0x80
      004AF3 C0 07            [24] 8104 	push	ar7
      004AF5 C0 06            [24] 8105 	push	ar6
      004AF7 12 46 8F         [24] 8106 	lcall	_vt100_puts
      004AFA D0 06            [24] 8107 	pop	ar6
      004AFC D0 07            [24] 8108 	pop	ar7
                                   8109 ;	vt100.c:1076: for(int c = 0; c < 7; c++){
      004AFE 0E               [12] 8110 	inc	r6
      004AFF BE 00 E0         [24] 8111 	cjne	r6,#0x00,00146$
      004B02 0F               [12] 8112 	inc	r7
      004B03 80 DD            [24] 8113 	sjmp	00146$
      004B05                       8114 00112$:
                                   8115 ;	vt100.c:1080: getchar();
      004B05 12 21 C8         [24] 8116 	lcall	_getchar
                                   8117 ;	vt100.c:1082: vt100_puts("\033[24;1H");
      004B08 90 4E FF         [24] 8118 	mov	dptr,#___str_24
      004B0B 75 F0 80         [24] 8119 	mov	b,#0x80
      004B0E 12 46 8F         [24] 8120 	lcall	_vt100_puts
                                   8121 ;	vt100.c:1083: for(int c = 0; c < 7; c++){
      004B11 7E 00            [12] 8122 	mov	r6,#0x00
      004B13 7F 00            [12] 8123 	mov	r7,#0x00
      004B15                       8124 00149$:
      004B15 C3               [12] 8125 	clr	c
      004B16 EE               [12] 8126 	mov	a,r6
      004B17 94 07            [12] 8127 	subb	a,#0x07
      004B19 EF               [12] 8128 	mov	a,r7
      004B1A 64 80            [12] 8129 	xrl	a,#0x80
      004B1C 94 80            [12] 8130 	subb	a,#0x80
      004B1E 50 18            [24] 8131 	jnc	00113$
                                   8132 ;	vt100.c:1084: vt100_puts("\033D");
      004B20 90 4F 07         [24] 8133 	mov	dptr,#___str_25
      004B23 75 F0 80         [24] 8134 	mov	b,#0x80
      004B26 C0 07            [24] 8135 	push	ar7
      004B28 C0 06            [24] 8136 	push	ar6
      004B2A 12 46 8F         [24] 8137 	lcall	_vt100_puts
      004B2D D0 06            [24] 8138 	pop	ar6
      004B2F D0 07            [24] 8139 	pop	ar7
                                   8140 ;	vt100.c:1083: for(int c = 0; c < 7; c++){
      004B31 0E               [12] 8141 	inc	r6
      004B32 BE 00 E0         [24] 8142 	cjne	r6,#0x00,00149$
      004B35 0F               [12] 8143 	inc	r7
      004B36 80 DD            [24] 8144 	sjmp	00149$
      004B38                       8145 00113$:
                                   8146 ;	vt100.c:1089: for(c = 1; c < VT100_WIDTH - 1; c++){
      004B38 7F 01            [12] 8147 	mov	r7,#0x01
      004B3A                       8148 00151$:
                                   8149 ;	vt100.c:1092: spf("\033[1;%dH*\033[B\033[D+\033[A", c + 1); 
      004B3A 8F 05            [24] 8150 	mov	ar5,r7
      004B3C 7E 00            [12] 8151 	mov	r6,#0x00
      004B3E 0D               [12] 8152 	inc	r5
      004B3F BD 00 01         [24] 8153 	cjne	r5,#0x00,00342$
      004B42 0E               [12] 8154 	inc	r6
      004B43                       8155 00342$:
      004B43 C0 07            [24] 8156 	push	ar7
      004B45 C0 05            [24] 8157 	push	ar5
      004B47 C0 06            [24] 8158 	push	ar6
      004B49 74 14            [12] 8159 	mov	a,#___str_28
      004B4B C0 E0            [24] 8160 	push	acc
      004B4D 74 4F            [12] 8161 	mov	a,#(___str_28 >> 8)
      004B4F C0 E0            [24] 8162 	push	acc
      004B51 74 80            [12] 8163 	mov	a,#0x80
      004B53 C0 E0            [24] 8164 	push	acc
      004B55 12 46 BA         [24] 8165 	lcall	_spf
      004B58 E5 81            [12] 8166 	mov	a,sp
      004B5A 24 FB            [12] 8167 	add	a,#0xfb
      004B5C F5 81            [12] 8168 	mov	sp,a
                                   8169 ;	vt100.c:1093: vt100_puts(buf);
      004B5E 90 00 41         [24] 8170 	mov	dptr,#_buf
      004B61 75 F0 40         [24] 8171 	mov	b,#0x40
      004B64 12 46 8F         [24] 8172 	lcall	_vt100_puts
      004B67 D0 07            [24] 8173 	pop	ar7
                                   8174 ;	vt100.c:1089: for(c = 1; c < VT100_WIDTH - 1; c++){
      004B69 0F               [12] 8175 	inc	r7
      004B6A BF 4F 00         [24] 8176 	cjne	r7,#0x4f,00343$
      004B6D                       8177 00343$:
      004B6D 40 CB            [24] 8178 	jc	00151$
                                   8179 ;	vt100.c:1096: for(c = 2; c < VT100_WIDTH - 2; c++){
      004B6F 7F 02            [12] 8180 	mov	r7,#0x02
      004B71                       8181 00153$:
                                   8182 ;	vt100.c:1098: spf("\033[32;%dH \033[B\033[D \033[A", c + 1); 
      004B71 8F 05            [24] 8183 	mov	ar5,r7
      004B73 7E 00            [12] 8184 	mov	r6,#0x00
      004B75 0D               [12] 8185 	inc	r5
      004B76 BD 00 01         [24] 8186 	cjne	r5,#0x00,00345$
      004B79 0E               [12] 8187 	inc	r6
      004B7A                       8188 00345$:
      004B7A C0 07            [24] 8189 	push	ar7
      004B7C C0 05            [24] 8190 	push	ar5
      004B7E C0 06            [24] 8191 	push	ar6
      004B80 74 27            [12] 8192 	mov	a,#___str_29
      004B82 C0 E0            [24] 8193 	push	acc
      004B84 74 4F            [12] 8194 	mov	a,#(___str_29 >> 8)
      004B86 C0 E0            [24] 8195 	push	acc
      004B88 74 80            [12] 8196 	mov	a,#0x80
      004B8A C0 E0            [24] 8197 	push	acc
      004B8C 12 46 BA         [24] 8198 	lcall	_spf
      004B8F E5 81            [12] 8199 	mov	a,sp
      004B91 24 FB            [12] 8200 	add	a,#0xfb
      004B93 F5 81            [12] 8201 	mov	sp,a
                                   8202 ;	vt100.c:1099: vt100_puts(buf);
      004B95 90 00 41         [24] 8203 	mov	dptr,#_buf
      004B98 75 F0 40         [24] 8204 	mov	b,#0x40
      004B9B 12 46 8F         [24] 8205 	lcall	_vt100_puts
      004B9E D0 07            [24] 8206 	pop	ar7
                                   8207 ;	vt100.c:1096: for(c = 2; c < VT100_WIDTH - 2; c++){
      004BA0 0F               [12] 8208 	inc	r7
      004BA1 BF 4E 00         [24] 8209 	cjne	r7,#0x4e,00346$
      004BA4                       8210 00346$:
      004BA4 40 CB            [24] 8211 	jc	00153$
                                   8212 ;	vt100.c:1103: for(int c = 1; c < VT100_HEIGHT; c++){
      004BA6 7E 01            [12] 8213 	mov	r6,#0x01
      004BA8 7F 00            [12] 8214 	mov	r7,#0x00
      004BAA                       8215 00156$:
      004BAA C3               [12] 8216 	clr	c
      004BAB EE               [12] 8217 	mov	a,r6
      004BAC 94 18            [12] 8218 	subb	a,#0x18
      004BAE EF               [12] 8219 	mov	a,r7
      004BAF 64 80            [12] 8220 	xrl	a,#0x80
      004BB1 94 80            [12] 8221 	subb	a,#0x80
      004BB3 50 42            [24] 8222 	jnc	00116$
                                   8223 ;	vt100.c:1104: spf("\033[%d;1H*+\033[%d;%dH+*", c + 1, c + 1, VT100_WIDTH - 1);
      004BB5 74 01            [12] 8224 	mov	a,#0x01
      004BB7 2E               [12] 8225 	add	a,r6
      004BB8 FC               [12] 8226 	mov	r4,a
      004BB9 E4               [12] 8227 	clr	a
      004BBA 3F               [12] 8228 	addc	a,r7
      004BBB FD               [12] 8229 	mov	r5,a
      004BBC C0 05            [24] 8230 	push	ar5
      004BBE C0 04            [24] 8231 	push	ar4
      004BC0 74 4F            [12] 8232 	mov	a,#0x4f
      004BC2 C0 E0            [24] 8233 	push	acc
      004BC4 E4               [12] 8234 	clr	a
      004BC5 C0 E0            [24] 8235 	push	acc
      004BC7 C0 04            [24] 8236 	push	ar4
      004BC9 C0 05            [24] 8237 	push	ar5
      004BCB C0 04            [24] 8238 	push	ar4
      004BCD C0 05            [24] 8239 	push	ar5
      004BCF 74 3B            [12] 8240 	mov	a,#___str_30
      004BD1 C0 E0            [24] 8241 	push	acc
      004BD3 74 4F            [12] 8242 	mov	a,#(___str_30 >> 8)
      004BD5 C0 E0            [24] 8243 	push	acc
      004BD7 74 80            [12] 8244 	mov	a,#0x80
      004BD9 C0 E0            [24] 8245 	push	acc
      004BDB 12 46 BA         [24] 8246 	lcall	_spf
      004BDE E5 81            [12] 8247 	mov	a,sp
      004BE0 24 F7            [12] 8248 	add	a,#0xf7
      004BE2 F5 81            [12] 8249 	mov	sp,a
                                   8250 ;	vt100.c:1105: vt100_puts(buf);
      004BE4 90 00 41         [24] 8251 	mov	dptr,#_buf
      004BE7 75 F0 40         [24] 8252 	mov	b,#0x40
      004BEA 12 46 8F         [24] 8253 	lcall	_vt100_puts
      004BED D0 04            [24] 8254 	pop	ar4
      004BEF D0 05            [24] 8255 	pop	ar5
                                   8256 ;	vt100.c:1103: for(int c = 1; c < VT100_HEIGHT; c++){
      004BF1 8C 06            [24] 8257 	mov	ar6,r4
      004BF3 8D 07            [24] 8258 	mov	ar7,r5
      004BF5 80 B3            [24] 8259 	sjmp	00156$
      004BF7                       8260 00116$:
                                   8261 ;	vt100.c:1109: for(int c = 1; c < VT100_WIDTH - 1; c++){
      004BF7 7E 01            [12] 8262 	mov	r6,#0x01
      004BF9 7F 00            [12] 8263 	mov	r7,#0x00
      004BFB                       8264 00159$:
      004BFB C3               [12] 8265 	clr	c
      004BFC EE               [12] 8266 	mov	a,r6
      004BFD 94 4F            [12] 8267 	subb	a,#0x4f
      004BFF EF               [12] 8268 	mov	a,r7
      004C00 64 80            [12] 8269 	xrl	a,#0x80
      004C02 94 80            [12] 8270 	subb	a,#0x80
      004C04 50 37            [24] 8271 	jnc	00117$
                                   8272 ;	vt100.c:1110: spf("\033[23;%dH+\033[B\033[D*\033[A", c + 1); 
      004C06 74 01            [12] 8273 	mov	a,#0x01
      004C08 2E               [12] 8274 	add	a,r6
      004C09 FC               [12] 8275 	mov	r4,a
      004C0A E4               [12] 8276 	clr	a
      004C0B 3F               [12] 8277 	addc	a,r7
      004C0C FD               [12] 8278 	mov	r5,a
      004C0D C0 05            [24] 8279 	push	ar5
      004C0F C0 04            [24] 8280 	push	ar4
      004C11 C0 04            [24] 8281 	push	ar4
      004C13 C0 05            [24] 8282 	push	ar5
      004C15 74 4F            [12] 8283 	mov	a,#___str_31
      004C17 C0 E0            [24] 8284 	push	acc
      004C19 74 4F            [12] 8285 	mov	a,#(___str_31 >> 8)
      004C1B C0 E0            [24] 8286 	push	acc
      004C1D 74 80            [12] 8287 	mov	a,#0x80
      004C1F C0 E0            [24] 8288 	push	acc
      004C21 12 46 BA         [24] 8289 	lcall	_spf
      004C24 E5 81            [12] 8290 	mov	a,sp
      004C26 24 FB            [12] 8291 	add	a,#0xfb
      004C28 F5 81            [12] 8292 	mov	sp,a
                                   8293 ;	vt100.c:1111: vt100_puts(buf);
      004C2A 90 00 41         [24] 8294 	mov	dptr,#_buf
      004C2D 75 F0 40         [24] 8295 	mov	b,#0x40
      004C30 12 46 8F         [24] 8296 	lcall	_vt100_puts
      004C33 D0 04            [24] 8297 	pop	ar4
      004C35 D0 05            [24] 8298 	pop	ar5
                                   8299 ;	vt100.c:1109: for(int c = 1; c < VT100_WIDTH - 1; c++){
      004C37 8C 06            [24] 8300 	mov	ar6,r4
      004C39 8D 07            [24] 8301 	mov	ar7,r5
      004C3B 80 BE            [24] 8302 	sjmp	00159$
      004C3D                       8303 00117$:
                                   8304 ;	vt100.c:1114: vt100_puts("\033[13;6HShould see two columns of E F"); 
      004C3D 90 4F 63         [24] 8305 	mov	dptr,#___str_32
      004C40 75 F0 80         [24] 8306 	mov	b,#0x80
      004C43 12 46 8F         [24] 8307 	lcall	_vt100_puts
                                   8308 ;	vt100.c:1115: vt100_puts("\033[14;6HText box must start at line 3"); 
      004C46 90 4F 88         [24] 8309 	mov	dptr,#___str_33
      004C49 75 F0 80         [24] 8310 	mov	b,#0x80
      004C4C 12 46 8F         [24] 8311 	lcall	_vt100_puts
                                   8312 ;	vt100.c:1118: getchar();
      004C4F 12 21 C8         [24] 8313 	lcall	_getchar
                                   8314 ;	vt100.c:1141: }
      004C52 85 08 81         [24] 8315 	mov	sp,_bp
      004C55 D0 08            [24] 8316 	pop	_bp
      004C57 22               [24] 8317 	ret
                                   8318 	.area CSEG    (CODE)
                                   8319 	.area CONST   (CODE)
      004DA5                       8320 __vt100_putc_hex_131072_135:
      004DA5 30 31 32 33 34 35 36  8321 	.ascii "0123456789abcdef"
             37 38 39 61 62 63 64
             65 66
      004DB5 00                    8322 	.db 0x00
      004DB6                       8323 __st_esc_sq_bracket_colors_458753_206:
      004DB6 00                    8324 	.db #0x00	; 0
      004DB7 01                    8325 	.db #0x01	; 1
      004DB8 02                    8326 	.db #0x02	; 2
      004DB9 04                    8327 	.db #0x04	; 4
      004DBA 03                    8328 	.db #0x03	; 3
      004DBB 05                    8329 	.db #0x05	; 5
      004DBC 06                    8330 	.db #0x06	; 6
      004DBD 07                    8331 	.db #0x07	; 7
                                   8332 	.area CONST   (CODE)
      004DBE                       8333 ___str_1:
      004DBE 1B                    8334 	.db 0x1b
      004DBF 5B 3F 31 3B 30 63     8335 	.ascii "[?1;0c"
      004DC5 00                    8336 	.db 0x00
                                   8337 	.area CSEG    (CODE)
                                   8338 	.area CONST   (CODE)
      004DC6                       8339 ___str_2:
      004DC6 58                    8340 	.ascii "X"
      004DC7 00                    8341 	.db 0x00
                                   8342 	.area CSEG    (CODE)
                                   8343 	.area CONST   (CODE)
      004DC8                       8344 ___str_3:
      004DC8 54 68 69 73 20 6D 75  8345 	.ascii "This must be an unbroken a"
             73 74 20 62 65 20 61
             6E 20 75 6E 62 72 6F
             6B 65 6E 20 61
      004DE2 00                    8346 	.db 0x00
                                   8347 	.area CSEG    (CODE)
                                   8348 	.area CONST   (CODE)
      004DE3                       8349 ___str_4:
      004DE3 72 65 61 20 6F 66 20  8350 	.ascii "rea of text with 1 free bo"
             74 65 78 74 20 77 69
             74 68 20 31 20 66 72
             65 65 20 62 6F
      004DFD 00                    8351 	.db 0x00
                                   8352 	.area CSEG    (CODE)
                                   8353 	.area CONST   (CODE)
      004DFE                       8354 ___str_5:
      004DFE 72 64 65 72 20 61 72  8355 	.ascii "rder around the text.     "
             6F 75 6E 64 20 74 68
             65 20 74 65 78 74 2E
             20 20 20 20 20
      004E18 00                    8356 	.db 0x00
                                   8357 	.area CSEG    (CODE)
                                   8358 	.area CONST   (CODE)
      004E19                       8359 ___str_6:
      004E19 1B                    8360 	.db 0x1b
      004E1A 5B 63                 8361 	.ascii "[c"
      004E1C 1B                    8362 	.db 0x1b
      004E1D 5B 32 4A              8363 	.ascii "[2J"
      004E20 1B                    8364 	.db 0x1b
      004E21 5B 6D                 8365 	.ascii "[m"
      004E23 1B                    8366 	.db 0x1b
      004E24 5B 72                 8367 	.ascii "[r"
      004E26 1B                    8368 	.db 0x1b
      004E27 5B 3F 36 6C           8369 	.ascii "[?6l"
      004E2B 1B                    8370 	.db 0x1b
      004E2C 5B 31 3B 31 48        8371 	.ascii "[1;1H"
      004E31 00                    8372 	.db 0x00
                                   8373 	.area CSEG    (CODE)
                                   8374 	.area CONST   (CODE)
      004E32                       8375 ___str_7:
      004E32 1B                    8376 	.db 0x1b
      004E33 5B 25 64 3B 31 48 2A  8377 	.ascii "[%d;1H*"
      004E3A 1B                    8378 	.db 0x1b
      004E3B 5B 25 64 3B 25 64 48  8379 	.ascii "[%d;%dH*"
             2A
      004E43 00                    8380 	.db 0x00
                                   8381 	.area CSEG    (CODE)
                                   8382 	.area CONST   (CODE)
      004E44                       8383 ___str_8:
      004E44 1B                    8384 	.db 0x1b
      004E45 5B 25 64 3B 31 48     8385 	.ascii "[%d;1H"
      004E4B 00                    8386 	.db 0x00
                                   8387 	.area CSEG    (CODE)
                                   8388 	.area CONST   (CODE)
      004E4C                       8389 ___str_9:
      004E4C 1B                    8390 	.db 0x1b
      004E4D 5B 32 3B 32 48        8391 	.ascii "[2;2H"
      004E52 00                    8392 	.db 0x00
                                   8393 	.area CSEG    (CODE)
                                   8394 	.area CONST   (CODE)
      004E53                       8395 ___str_10:
      004E53 1B                    8396 	.db 0x1b
      004E54 5B 25 64 3B 32 48 2B  8397 	.ascii "[%d;2H+"
      004E5B 1B                    8398 	.db 0x1b
      004E5C 5B 25 64 3B 25 64 48  8399 	.ascii "[%d;%dH+"
             2B
      004E64 00                    8400 	.db 0x00
                                   8401 	.area CSEG    (CODE)
                                   8402 	.area CONST   (CODE)
      004E65                       8403 ___str_11:
      004E65 1B                    8404 	.db 0x1b
      004E66 5B 25 64 3B 32 48     8405 	.ascii "[%d;2H"
      004E6C 00                    8406 	.db 0x00
                                   8407 	.area CSEG    (CODE)
                                   8408 	.area CONST   (CODE)
      004E6D                       8409 ___str_12:
      004E6D 1B                    8410 	.db 0x1b
      004E6E 5B 31 30 3B 36 48     8411 	.ascii "[10;6H"
      004E74 00                    8412 	.db 0x00
                                   8413 	.area CSEG    (CODE)
                                   8414 	.area CONST   (CODE)
      004E75                       8415 ___str_13:
      004E75 1B                    8416 	.db 0x1b
      004E76 5B 31 31 3B 36 48     8417 	.ascii "[11;6H"
      004E7C 00                    8418 	.db 0x00
                                   8419 	.area CSEG    (CODE)
                                   8420 	.area CONST   (CODE)
      004E7D                       8421 ___str_14:
      004E7D 1B                    8422 	.db 0x1b
      004E7E 37                    8423 	.ascii "7"
      004E7F 1B                    8424 	.db 0x1b
      004E80 5B 33 35 3B 31 30 48  8425 	.ascii "[35;10H"
      004E87 1B                    8426 	.db 0x1b
      004E88 38                    8427 	.ascii "8"
      004E89 00                    8428 	.db 0x00
                                   8429 	.area CSEG    (CODE)
                                   8430 	.area CONST   (CODE)
      004E8A                       8431 ___str_15:
      004E8A 45                    8432 	.ascii "E"
      004E8B 1B                    8433 	.db 0x1b
      004E8C 5B 31 31 3B 33 35 48  8434 	.ascii "[11;35HE"
             45
      004E94 00                    8435 	.db 0x00
                                   8436 	.area CSEG    (CODE)
                                   8437 	.area CONST   (CODE)
      004E95                       8438 ___str_16:
      004E95 1B                    8439 	.db 0x1b
      004E96 5B 31 32 3B 36 48 45  8440 	.ascii "[12;6HE"
      004E9D 1B                    8441 	.db 0x1b
      004E9E 5B 32 38 43 45        8442 	.ascii "[28CE"
      004EA3 00                    8443 	.db 0x00
                                   8444 	.area CSEG    (CODE)
                                   8445 	.area CONST   (CODE)
      004EA4                       8446 ___str_17:
      004EA4 1B                    8447 	.db 0x1b
      004EA5 5B 33 30 44           8448 	.ascii "[30D"
      004EA9 1B                    8449 	.db 0x1b
      004EAA 5B 42 45              8450 	.ascii "[BE"
      004EAD 1B                    8451 	.db 0x1b
      004EAE 5B 32 38 43 45        8452 	.ascii "[28CE"
      004EB3 00                    8453 	.db 0x00
                                   8454 	.area CSEG    (CODE)
                                   8455 	.area CONST   (CODE)
      004EB4                       8456 ___str_18:
      004EB4 1B                    8457 	.db 0x1b
      004EB5 5B 31 35 3B 36 48     8458 	.ascii "[15;6H"
      004EBB 1B                    8459 	.db 0x1b
      004EBC 5B 41 45              8460 	.ascii "[AE"
      004EBF 1B                    8461 	.db 0x1b
      004EC0 5B 32 38 43 45        8462 	.ascii "[28CE"
      004EC5 00                    8463 	.db 0x00
                                   8464 	.area CSEG    (CODE)
                                   8465 	.area CONST   (CODE)
      004EC6                       8466 ___str_19:
      004EC6 1B                    8467 	.db 0x1b
      004EC7 5B 31 35 3B 36 48 45  8468 	.ascii "[15;6HE"
      004ECE 1B                    8469 	.db 0x1b
      004ECF 5B 31 35 3B 33 35 48  8470 	.ascii "[15;35HE"
             45
      004ED7 00                    8471 	.db 0x00
                                   8472 	.area CSEG    (CODE)
                                   8473 	.area CONST   (CODE)
      004ED8                       8474 ___str_20:
      004ED8 1B                    8475 	.db 0x1b
      004ED9 5B 31 36 3B 36 48     8476 	.ascii "[16;6H"
      004EDF 00                    8477 	.db 0x00
                                   8478 	.area CSEG    (CODE)
                                   8479 	.area CONST   (CODE)
      004EE0                       8480 ___str_21:
      004EE0 1B                    8481 	.db 0x1b
      004EE1 5B 25 64 3B 38 48     8482 	.ascii "[%d;8H"
      004EE7 00                    8483 	.db 0x00
                                   8484 	.area CSEG    (CODE)
                                   8485 	.area CONST   (CODE)
      004EE8                       8486 ___str_22:
      004EE8 1B                    8487 	.db 0x1b
      004EE9 5B 31 30 3B 34 30 48  8488 	.ascii "[10;40H"
      004EF0 00                    8489 	.db 0x00
                                   8490 	.area CSEG    (CODE)
                                   8491 	.area CONST   (CODE)
      004EF1                       8492 ___str_23:
      004EF1 45                    8493 	.ascii "E"
      004EF2 1B                    8494 	.db 0x1b
      004EF3 5B 31 43 46           8495 	.ascii "[1CF"
      004EF7 1B                    8496 	.db 0x1b
      004EF8 5B 33 44              8497 	.ascii "[3D"
      004EFB 1B                    8498 	.db 0x1b
      004EFC 5B 42                 8499 	.ascii "[B"
      004EFE 00                    8500 	.db 0x00
                                   8501 	.area CSEG    (CODE)
                                   8502 	.area CONST   (CODE)
      004EFF                       8503 ___str_24:
      004EFF 1B                    8504 	.db 0x1b
      004F00 5B 32 34 3B 31 48     8505 	.ascii "[24;1H"
      004F06 00                    8506 	.db 0x00
                                   8507 	.area CSEG    (CODE)
                                   8508 	.area CONST   (CODE)
      004F07                       8509 ___str_25:
      004F07 1B                    8510 	.db 0x1b
      004F08 44                    8511 	.ascii "D"
      004F09 00                    8512 	.db 0x00
                                   8513 	.area CSEG    (CODE)
                                   8514 	.area CONST   (CODE)
      004F0A                       8515 ___str_26:
      004F0A 1B                    8516 	.db 0x1b
      004F0B 5B 31 3B 31 48        8517 	.ascii "[1;1H"
      004F10 00                    8518 	.db 0x00
                                   8519 	.area CSEG    (CODE)
                                   8520 	.area CONST   (CODE)
      004F11                       8521 ___str_27:
      004F11 1B                    8522 	.db 0x1b
      004F12 4D                    8523 	.ascii "M"
      004F13 00                    8524 	.db 0x00
                                   8525 	.area CSEG    (CODE)
                                   8526 	.area CONST   (CODE)
      004F14                       8527 ___str_28:
      004F14 1B                    8528 	.db 0x1b
      004F15 5B 31 3B 25 64 48 2A  8529 	.ascii "[1;%dH*"
      004F1C 1B                    8530 	.db 0x1b
      004F1D 5B 42                 8531 	.ascii "[B"
      004F1F 1B                    8532 	.db 0x1b
      004F20 5B 44 2B              8533 	.ascii "[D+"
      004F23 1B                    8534 	.db 0x1b
      004F24 5B 41                 8535 	.ascii "[A"
      004F26 00                    8536 	.db 0x00
                                   8537 	.area CSEG    (CODE)
                                   8538 	.area CONST   (CODE)
      004F27                       8539 ___str_29:
      004F27 1B                    8540 	.db 0x1b
      004F28 5B 33 32 3B 25 64 48  8541 	.ascii "[32;%dH "
             20
      004F30 1B                    8542 	.db 0x1b
      004F31 5B 42                 8543 	.ascii "[B"
      004F33 1B                    8544 	.db 0x1b
      004F34 5B 44 20              8545 	.ascii "[D "
      004F37 1B                    8546 	.db 0x1b
      004F38 5B 41                 8547 	.ascii "[A"
      004F3A 00                    8548 	.db 0x00
                                   8549 	.area CSEG    (CODE)
                                   8550 	.area CONST   (CODE)
      004F3B                       8551 ___str_30:
      004F3B 1B                    8552 	.db 0x1b
      004F3C 5B 25 64 3B 31 48 2A  8553 	.ascii "[%d;1H*+"
             2B
      004F44 1B                    8554 	.db 0x1b
      004F45 5B 25 64 3B 25 64 48  8555 	.ascii "[%d;%dH+*"
             2B 2A
      004F4E 00                    8556 	.db 0x00
                                   8557 	.area CSEG    (CODE)
                                   8558 	.area CONST   (CODE)
      004F4F                       8559 ___str_31:
      004F4F 1B                    8560 	.db 0x1b
      004F50 5B 32 33 3B 25 64 48  8561 	.ascii "[23;%dH+"
             2B
      004F58 1B                    8562 	.db 0x1b
      004F59 5B 42                 8563 	.ascii "[B"
      004F5B 1B                    8564 	.db 0x1b
      004F5C 5B 44 2A              8565 	.ascii "[D*"
      004F5F 1B                    8566 	.db 0x1b
      004F60 5B 41                 8567 	.ascii "[A"
      004F62 00                    8568 	.db 0x00
                                   8569 	.area CSEG    (CODE)
                                   8570 	.area CONST   (CODE)
      004F63                       8571 ___str_32:
      004F63 1B                    8572 	.db 0x1b
      004F64 5B 31 33 3B 36 48 53  8573 	.ascii "[13;6HShould see two columns of E F"
             68 6F 75 6C 64 20 73
             65 65 20 74 77 6F 20
             63 6F 6C 75 6D 6E 73
             20 6F 66 20 45 20 46
      004F87 00                    8574 	.db 0x00
                                   8575 	.area CSEG    (CODE)
                                   8576 	.area CONST   (CODE)
      004F88                       8577 ___str_33:
      004F88 1B                    8578 	.db 0x1b
      004F89 5B 31 34 3B 36 48 54  8579 	.ascii "[14;6HText box must start at line 3"
             65 78 74 20 62 6F 78
             20 6D 75 73 74 20 73
             74 61 72 74 20 61 74
             20 6C 69 6E 65 20 33
      004FAC 00                    8580 	.db 0x00
                                   8581 	.area CSEG    (CODE)
                                   8582 	.area XINIT   (CODE)
                                   8583 	.area CABS    (ABS,CODE)
