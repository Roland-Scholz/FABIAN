              	; --------------------------------------
              	; zasm: assemble "prelim.asm"
              	; date: 2022-03-15 12:22:03
              	; --------------------------------------


              	#!/usr/local/bin/zasm -o original/
              		.title	'Preliminary Z80 tests'
              	
              	; prelim.z80 - Preliminary Z80 tests
              	; Copyright (C) 1994  Frank D. Cringle
              	;
              	; This program is free software; you can redistribute it and/or
              	; modify it under the terms of the GNU General Public License
              	; as published by the Free Software Foundation; either version 2
              	; of the License, or (at your option) any later version.
              	;
              	; This program is distributed in the hope that it will be useful,
              	; but WITHOUT ANY WARRANTY; without even the implied warranty of
              	; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              	; GNU General Public License for more details.
              	;
              	; You should have received a copy of the GNU General Public License
              	; along with this program; if not, write to the Free Software
              	; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
              	
              	
              	; These tests have two goals.  To start with, we assume the worst and
              	; successively test the instructions needed to continue testing.
              	; Then we try to test all instructions which cannot be handled by
              	; zexlax - the crc-based instruction exerciser.
              	
              	; Initially errors are 'reported' by jumping to 0.  This should reboot
              	; cp/m, so if the program terminates without any output one of the
              	; early tests failed.  Later errors are reported by outputting an
              	; address via the bdos conout routine.  The address can be located in
              	; a listing of this program.
              	
              	; If the program runs to completion it displays a suitable message.
              	
              		aseg
0100:         		org	100h
              	
0100: 3E01    	start:	ld	a,1		; test simple compares and z/nz jumps
0102: FE02    		cp	2
0104: CA0000  		jp	z,0
0107: FE01    		cp	1
0109: C20000  		jp	nz,0
010C: C31101  		jp	lab0
010F: 76      		halt			; emergency exit
0110: FF      		db	0ffh
              		
0111: CD1701  	lab0:	call	lab2		; does a simple call work?
0114: C30000  	lab1:	jp	0		; fail
              		
0117: E1      	lab2:	pop	hl		; check return address
0118: 7C      		ld	a,h
0119: FE01    		cp	hi(lab1)
011B: CA2101  		jp	z,lab3
011E: C30000  		jp	0
0121: 7D      	lab3:	ld	a,l
0122: FE14    		cp	lo(lab1)
0124: CA2A01  		jp	z,lab4
0127: C30000  		jp	0
              	
              	; test presence and uniqueness of all machine registers
              	; (except ir)
012A: 31A504  	lab4:	ld	sp,regs1
012D: F1      		pop	af
012E: C1      		pop	bc
012F: D1      		pop	de
0130: E1      		pop	hl
0131: 08      		ex	af,af'
0132: D9      		exx
0133: F1      		pop	af
0134: C1      		pop	bc
0135: D1      		pop	de
0136: E1      		pop	hl
0137: DDE1    		pop	ix
0139: FDE1    		pop	iy
013B: 31CD04  		ld	sp,regs2+20
013E: FDE5    		push	iy
0140: DDE5    		push	ix
0142: E5      		push	hl
0143: D5      		push	de
0144: C5      		push	bc
0145: F5      		push	af
0146: 08      		ex	af,af'
0147: D9      		exx
0148: E5      		push	hl
0149: D5      		push	de
014A: C5      		push	bc
014B: F5      		push	af
              	
              	v:	set	0
              		rept	20
              		ld	a,(regs2+v/2)
              	v:	set	v+2
              		cp	v
              		jp	nz,0
              		endm
014C: 3AB904  		ld	a,(regs2+v/2)
              	v:	set	v+2
014F: FE02    		cp	v
0151: C20000  		jp	nz,0
0154: 3ABA04  		ld	a,(regs2+v/2)
              	v:	set	v+2
0157: FE04    		cp	v
0159: C20000  		jp	nz,0
015C: 3ABB04  		ld	a,(regs2+v/2)
              	v:	set	v+2
015F: FE06    		cp	v
0161: C20000  		jp	nz,0
0164: 3ABC04  		ld	a,(regs2+v/2)
              	v:	set	v+2
0167: FE08    		cp	v
0169: C20000  		jp	nz,0
016C: 3ABD04  		ld	a,(regs2+v/2)
              	v:	set	v+2
016F: FE0A    		cp	v
0171: C20000  		jp	nz,0
0174: 3ABE04  		ld	a,(regs2+v/2)
              	v:	set	v+2
0177: FE0C    		cp	v
0179: C20000  		jp	nz,0
017C: 3ABF04  		ld	a,(regs2+v/2)
              	v:	set	v+2
017F: FE0E    		cp	v
0181: C20000  		jp	nz,0
0184: 3AC004  		ld	a,(regs2+v/2)
              	v:	set	v+2
0187: FE10    		cp	v
0189: C20000  		jp	nz,0
018C: 3AC104  		ld	a,(regs2+v/2)
              	v:	set	v+2
018F: FE12    		cp	v
0191: C20000  		jp	nz,0
0194: 3AC204  		ld	a,(regs2+v/2)
              	v:	set	v+2
0197: FE14    		cp	v
0199: C20000  		jp	nz,0
019C: 3AC304  		ld	a,(regs2+v/2)
              	v:	set	v+2
019F: FE16    		cp	v
01A1: C20000  		jp	nz,0
01A4: 3AC404  		ld	a,(regs2+v/2)
              	v:	set	v+2
01A7: FE18    		cp	v
01A9: C20000  		jp	nz,0
01AC: 3AC504  		ld	a,(regs2+v/2)
              	v:	set	v+2
01AF: FE1A    		cp	v
01B1: C20000  		jp	nz,0
01B4: 3AC604  		ld	a,(regs2+v/2)
              	v:	set	v+2
01B7: FE1C    		cp	v
01B9: C20000  		jp	nz,0
01BC: 3AC704  		ld	a,(regs2+v/2)
              	v:	set	v+2
01BF: FE1E    		cp	v
01C1: C20000  		jp	nz,0
01C4: 3AC804  		ld	a,(regs2+v/2)
              	v:	set	v+2
01C7: FE20    		cp	v
01C9: C20000  		jp	nz,0
01CC: 3AC904  		ld	a,(regs2+v/2)
              	v:	set	v+2
01CF: FE22    		cp	v
01D1: C20000  		jp	nz,0
01D4: 3ACA04  		ld	a,(regs2+v/2)
              	v:	set	v+2
01D7: FE24    		cp	v
01D9: C20000  		jp	nz,0
01DC: 3ACB04  		ld	a,(regs2+v/2)
              	v:	set	v+2
01DF: FE26    		cp	v
01E1: C20000  		jp	nz,0
01E4: 3ACC04  		ld	a,(regs2+v/2)
              	v:	set	v+2
01E7: FE28    		cp	v
01E9: C20000  		jp	nz,0
              	
              	; test access to memory via (hl)
01EC: 21CD04  		ld	hl,hlval
01EF: 7E      		ld	a,(hl)
01F0: FEA5    		cp	0a5h
01F2: C20000  		jp	nz,0
01F5: 21CE04  		ld	hl,hlval+1
01F8: 7E      		ld	a,(hl)
01F9: FE3C    		cp	03ch
01FB: C20000  		jp	nz,0
              	
              	; test unconditional return
01FE: 310006  		ld	sp,stack
0201: 210902  		ld	hl,reta
0204: E5      		push	hl
0205: C9      		ret
0206: C30000  		jp	0
              	
              	; test instructions needed for hex output
0209: 3EFF    	reta:	ld	a,255
020B: E60F    		and	a,15
020D: FE0F    		cp	15
020F: C20000  		jp	nz,0
0212: 3E5A    		ld	a,05ah
0214: E60F    		and	15
0216: FE0A    		cp	00ah
0218: C20000  		jp	nz,0
021B: 0F      		rrca
021C: FE05    		cp	005h
021E: C20000  		jp	nz,0
0221: 0F      		rrca
0222: FE82    		cp	082h
0224: C20000  		jp	nz,0
0227: 0F      		rrca
0228: FE41    		cp	041h
022A: C20000  		jp	nz,0
022D: 0F      		rrca
022E: FEA0    		cp	0a0h
0230: C20000  		jp	nz,0
0233: 213412  		ld	hl,01234h
0236: E5      		push	hl
0237: C1      		pop	bc
0238: 78      		ld	a,b
0239: FE12    		cp	012h
023B: C20000  		jp	nz,0
023E: 79      		ld	a,c
023F: FE34    		cp	034h
0241: C20000  		jp	nz,0
              		
              	; from now on we can report errors by displaying an address
              	
              	; test conditional call, ret, jp, jr
              	tcond:	macro	flag,pcond,ncond,rel
              		ld	hl,&flag
              		push	hl
              		pop	af
              		call	&pcond,lab1&pcond
              		jp	error
              	lab1&pcond:	pop	hl
              		ld	hl,0d7h xor &flag
              		push	hl
              		pop	af
              		call	&ncond,lab2&pcond
              		jp	error
              	lab2&pcond:	pop	hl
              		ld	hl,lab3&pcond
              		push	hl
              		ld	hl,&flag
              		push	hl
              		pop	af
              		ret	&pcond
              		call	error
              	lab3&pcond:	ld	hl,lab4&pcond
              		push	hl
              		ld	hl,0d7h xor &flag
              		push	hl
              		pop	af
              		ret	&ncond
              		call	error
              	lab4&pcond:	ld	hl,&flag
              		push	hl
              		pop	af
              		jp	&pcond,lab5&pcond
              		call	error
              	lab5&pcond:	ld	hl,0d7h xor &flag
              		push	hl
              		pop	af
              		jp	&ncond,lab6&pcond
              		call	error
              	lab6&pcond:	
              	      if	&rel
              		ld	hl,&flag
              		push	hl
              		pop	af
              		jr	&pcond,lab7&pcond
              		call	error
              	lab7&pcond:	ld	hl,0d7h xor &flag
              		push	hl
              		pop	af
              		jr	&ncond,lab8&pcond
              		call	error
              	lab8&pcond:
              	      endif
              		endm
              	
              		tcond	1,c,nc,1
0244: 210100  		ld	hl,1
0247: E5      		push	hl
0248: F1      		pop	af
0249: DC4F02  		call	c,lab1c
024C: C36A04  		jp	error
024F: E1      	lab1c:	pop	hl
0250: 21D600  		ld	hl,0d7h xor 1
0253: E5      		push	hl
0254: F1      		pop	af
0255: D45B02  		call	nc,lab2c
0258: C36A04  		jp	error
025B: E1      	lab2c:	pop	hl
025C: 216902  		ld	hl,lab3c
025F: E5      		push	hl
0260: 210100  		ld	hl,1
0263: E5      		push	hl
0264: F1      		pop	af
0265: D8      		ret	c
0266: CD6A04  		call	error
0269: 217602  	lab3c:	ld	hl,lab4c
026C: E5      		push	hl
026D: 21D600  		ld	hl,0d7h xor 1
0270: E5      		push	hl
0271: F1      		pop	af
0272: D0      		ret	nc
0273: CD6A04  		call	error
0276: 210100  	lab4c:	ld	hl,1
0279: E5      		push	hl
027A: F1      		pop	af
027B: DA8102  		jp	c,lab5c
027E: CD6A04  		call	error
0281: 21D600  	lab5c:	ld	hl,0d7h xor 1
0284: E5      		push	hl
0285: F1      		pop	af
0286: D28C02  		jp	nc,lab6c
0289: CD6A04  		call	error
028C:         	lab6c:	
              	      if	1
028C: 210100  		ld	hl,1
028F: E5      		push	hl
0290: F1      		pop	af
0291: 3803    		jr	c,lab7c
0293: CD6A04  		call	error
0296: 21D600  	lab7c:	ld	hl,0d7h xor 1
0299: E5      		push	hl
029A: F1      		pop	af
029B: 3003    		jr	nc,lab8c
029D: CD6A04  		call	error
02A0:         	lab8c:
              	      endif
              		tcond	4,pe,po,0
02A0: 210400  		ld	hl,4
02A3: E5      		push	hl
02A4: F1      		pop	af
02A5: ECAB02  		call	pe,lab1pe
02A8: C36A04  		jp	error
02AB: E1      	lab1pe:	pop	hl
02AC: 21D300  		ld	hl,0d7h xor 4
02AF: E5      		push	hl
02B0: F1      		pop	af
02B1: E4B702  		call	po,lab2pe
02B4: C36A04  		jp	error
02B7: E1      	lab2pe:	pop	hl
02B8: 21C502  		ld	hl,lab3pe
02BB: E5      		push	hl
02BC: 210400  		ld	hl,4
02BF: E5      		push	hl
02C0: F1      		pop	af
02C1: E8      		ret	pe
02C2: CD6A04  		call	error
02C5: 21D202  	lab3pe:	ld	hl,lab4pe
02C8: E5      		push	hl
02C9: 21D300  		ld	hl,0d7h xor 4
02CC: E5      		push	hl
02CD: F1      		pop	af
02CE: E0      		ret	po
02CF: CD6A04  		call	error
02D2: 210400  	lab4pe:	ld	hl,4
02D5: E5      		push	hl
02D6: F1      		pop	af
02D7: EADD02  		jp	pe,lab5pe
02DA: CD6A04  		call	error
02DD: 21D300  	lab5pe:	ld	hl,0d7h xor 4
02E0: E5      		push	hl
02E1: F1      		pop	af
02E2: E2E802  		jp	po,lab6pe
02E5: CD6A04  		call	error
02E8:         	lab6pe:	
              	      if	0
              		ld	hl,4
              		push	hl
              		pop	af
              		jr	pe,lab7pe
              		call	error
              	lab7pe:	ld	hl,0d7h xor 4
              		push	hl
              		pop	af
              		jr	po,lab8pe
              		call	error
              	lab8pe:
              	      endif
              		tcond	040h,z,nz,1
02E8: 214000  		ld	hl,040h
02EB: E5      		push	hl
02EC: F1      		pop	af
02ED: CCF302  		call	z,lab1z
02F0: C36A04  		jp	error
02F3: E1      	lab1z:	pop	hl
02F4: 219700  		ld	hl,0d7h xor 040h
02F7: E5      		push	hl
02F8: F1      		pop	af
02F9: C4FF02  		call	nz,lab2z
02FC: C36A04  		jp	error
02FF: E1      	lab2z:	pop	hl
0300: 210D03  		ld	hl,lab3z
0303: E5      		push	hl
0304: 214000  		ld	hl,040h
0307: E5      		push	hl
0308: F1      		pop	af
0309: C8      		ret	z
030A: CD6A04  		call	error
030D: 211A03  	lab3z:	ld	hl,lab4z
0310: E5      		push	hl
0311: 219700  		ld	hl,0d7h xor 040h
0314: E5      		push	hl
0315: F1      		pop	af
0316: C0      		ret	nz
0317: CD6A04  		call	error
031A: 214000  	lab4z:	ld	hl,040h
031D: E5      		push	hl
031E: F1      		pop	af
031F: CA2503  		jp	z,lab5z
0322: CD6A04  		call	error
0325: 219700  	lab5z:	ld	hl,0d7h xor 040h
0328: E5      		push	hl
0329: F1      		pop	af
032A: C23003  		jp	nz,lab6z
032D: CD6A04  		call	error
0330:         	lab6z:	
              	      if	1
0330: 214000  		ld	hl,040h
0333: E5      		push	hl
0334: F1      		pop	af
0335: 2803    		jr	z,lab7z
0337: CD6A04  		call	error
033A: 219700  	lab7z:	ld	hl,0d7h xor 040h
033D: E5      		push	hl
033E: F1      		pop	af
033F: 2003    		jr	nz,lab8z
0341: CD6A04  		call	error
0344:         	lab8z:
              	      endif
              		tcond	080h,m,p,0
0344: 218000  		ld	hl,080h
0347: E5      		push	hl
0348: F1      		pop	af
0349: FC4F03  		call	m,lab1m
034C: C36A04  		jp	error
034F: E1      	lab1m:	pop	hl
0350: 215700  		ld	hl,0d7h xor 080h
0353: E5      		push	hl
0354: F1      		pop	af
0355: F45B03  		call	p,lab2m
0358: C36A04  		jp	error
035B: E1      	lab2m:	pop	hl
035C: 216903  		ld	hl,lab3m
035F: E5      		push	hl
0360: 218000  		ld	hl,080h
0363: E5      		push	hl
0364: F1      		pop	af
0365: F8      		ret	m
0366: CD6A04  		call	error
0369: 217603  	lab3m:	ld	hl,lab4m
036C: E5      		push	hl
036D: 215700  		ld	hl,0d7h xor 080h
0370: E5      		push	hl
0371: F1      		pop	af
0372: F0      		ret	p
0373: CD6A04  		call	error
0376: 218000  	lab4m:	ld	hl,080h
0379: E5      		push	hl
037A: F1      		pop	af
037B: FA8103  		jp	m,lab5m
037E: CD6A04  		call	error
0381: 215700  	lab5m:	ld	hl,0d7h xor 080h
0384: E5      		push	hl
0385: F1      		pop	af
0386: F28C03  		jp	p,lab6m
0389: CD6A04  		call	error
038C:         	lab6m:	
              	      if	0
              		ld	hl,080h
              		push	hl
              		pop	af
              		jr	m,lab7m
              		call	error
              	lab7m:	ld	hl,0d7h xor 080h
              		push	hl
              		pop	af
              		jr	p,lab8m
              		call	error
              	lab8m:
              	      endif
              	
              	; test indirect jumps
038C: 219303  		ld	hl,lab5
038F: E9      		jp	(hl)
0390: CD6A04  		call	error
0393: 219E03  	lab5:	ld	hl,lab6
0396: E5      		push	hl
0397: DDE1    		pop	ix
0399: DDE9    		jp	(ix)
039B: CD6A04  		call	error
039E: 21A903  	lab6:	ld	hl,lab7
03A1: E5      		push	hl
03A2: FDE1    		pop	iy
03A4: FDE9    		jp	(iy)
03A6: CD6A04  		call	error
              	
              	; djnz (and (partially) inc a, inc hl)
03A9: 3EA5    	lab7:	ld	a,0a5h
03AB: 0604    		ld	b,4
03AD: 0F      	lab8:	rrca
03AE: 10FD    		djnz	lab8
03B0: FE5A    		cp	05ah
03B2: C46A04  		call	nz,error
03B5: 0610    		ld	b,16
03B7: 3C      	lab9:	inc	a
03B8: 10FD    		djnz	lab9
03BA: FE6A    		cp	06ah
03BC: C46A04  		call	nz,error
03BF: 0600    		ld	b,0
03C1: 210000  		ld	hl,0
03C4: 23      	lab10:	inc	hl
03C5: 10FD    		djnz	lab10
03C7: 7C      		ld	a,h
03C8: FE01    		cp	1
03CA: C46A04  		call	nz,error
03CD: 7D      		ld	a,l
03CE: FE00    		cp	0
03D0: C46A04  		call	nz,error
              		
              	; relative addressing
              	reladr:	macro	r
              		ld	&r,hlval
              		ld	a,(&r)
              		cp	0a5h
              		call	nz,error
              		ld	a,(&r+1)
              		cp	03ch
              		call	nz,error
              		inc	&r
              		ld	a,(&r-1)
              		cp	0a5h
              		call	nz,error
              		ld	&r,hlval-126
              		ld	a,(&r+127)
              		cp	03ch
              		call	nz,error
              		ld	&r,hlval+128
              		ld	a,(&r-128)
              		cp	0a5h
              		call	nz,error
              		endm
              	
              		reladr	ix
03D3: DD21CD04		ld	ix,hlval
03D7: DD7E00  		ld	a,(ix)
03DA: FEA5    		cp	0a5h
03DC: C46A04  		call	nz,error
03DF: DD7E01  		ld	a,(ix+1)
03E2: FE3C    		cp	03ch
03E4: C46A04  		call	nz,error
03E7: DD23    		inc	ix
03E9: DD7EFF  		ld	a,(ix-1)
03EC: FEA5    		cp	0a5h
03EE: C46A04  		call	nz,error
03F1: DD214F04		ld	ix,hlval-126
03F5: DD7E7F  		ld	a,(ix+127)
03F8: FE3C    		cp	03ch
03FA: C46A04  		call	nz,error
03FD: DD214D05		ld	ix,hlval+128
0401: DD7E80  		ld	a,(ix-128)
0404: FEA5    		cp	0a5h
0406: C46A04  		call	nz,error
              		reladr	iy
0409: FD21CD04		ld	iy,hlval
040D: FD7E00  		ld	a,(iy)
0410: FEA5    		cp	0a5h
0412: C46A04  		call	nz,error
0415: FD7E01  		ld	a,(iy+1)
0418: FE3C    		cp	03ch
041A: C46A04  		call	nz,error
041D: FD23    		inc	iy
041F: FD7EFF  		ld	a,(iy-1)
0422: FEA5    		cp	0a5h
0424: C46A04  		call	nz,error
0427: FD214F04		ld	iy,hlval-126
042B: FD7E7F  		ld	a,(iy+127)
042E: FE3C    		cp	03ch
0430: C46A04  		call	nz,error
0433: FD214D05		ld	iy,hlval+128
0437: FD7E80  		ld	a,(iy-128)
043A: FEA5    		cp	0a5h
043C: C46A04  		call	nz,error
              		
043F: 114F04  	allok:	ld	de,okmsg
0442: 1A      	allok1:	ld	a, (de)
0443: FE24    		cp	'$'
0445: 2806    		jr	Z, end
0447: CDA204  		call	conout
044A: 13      		inc	de
044B: 18F5    		jr	allok1
              		
044D: 18FE    	end:	jr	end
              	;	ld	c,9
              	;	call	5
              	;	jp	0
              	
044F: 5072656C	okmsg:	db	'Preliminary tests complete$'
0453: 696D696E	
0457: 61727920	
045B: 74657374	
045F: 7320636F	
0463: 6D706C65	
0467: 746524  	
              	
              		
              	; display address at top of stack and exit
046A: C1      	error:	pop	bc
046B: 2605    		ld	h,hi(hextab)
046D: 78      		ld	a,b
046E: 0F      		rrca
046F: 0F      		rrca
0470: 0F      		rrca
0471: 0F      		rrca
0472: E60F    		and	15
0474: 6F      		ld	l,a
0475: 7E      		ld	a,(hl)
0476: CDA204  		call	conout
0479: 78      		ld	a,b
047A: E60F    		and	15
047C: 6F      		ld	l,a
047D: 7E      		ld	a,(hl)
047E: CDA204  		call	conout
0481: 79      		ld	a,c
0482: 0F      		rrca
0483: 0F      		rrca
0484: 0F      		rrca
0485: 0F      		rrca
0486: E60F    		and	15
0488: 6F      		ld	l,a
0489: 7E      		ld	a,(hl)
048A: CDA204  		call	conout
048D: 79      		ld	a,c
048E: E60F    		and	15
0490: 6F      		ld	l,a
0491: 7E      		ld	a,(hl)
0492: CDA204  		call	conout
0495: 3E0D    		ld	a,13
0497: CDA204  		call	conout
049A: 3E0A    		ld	a,10
049C: CDA204  		call	conout
049F: C30000  		jp	0
              	
04A2: D301    	conout:	out (1), a
              	;	push	af
              	;	push	bc
              	;	push	de
              	;	push	hl
              	;	ld	c,2
              	;	ld	e,a
              	;	call	5
              	;	pop	hl
              	;	pop	de
              	;	pop	bc
              	;	pop	af
04A4: C9      		ret
              		
              	v:	set	0
04A5:         	regs1:	rept	20
              	v:	set	v+2
              		db	v
              		endm
              	v:	set	v+2
04A5: 02      		db	v
              	v:	set	v+2
04A6: 04      		db	v
              	v:	set	v+2
04A7: 06      		db	v
              	v:	set	v+2
04A8: 08      		db	v
              	v:	set	v+2
04A9: 0A      		db	v
              	v:	set	v+2
04AA: 0C      		db	v
              	v:	set	v+2
04AB: 0E      		db	v
              	v:	set	v+2
04AC: 10      		db	v
              	v:	set	v+2
04AD: 12      		db	v
              	v:	set	v+2
04AE: 14      		db	v
              	v:	set	v+2
04AF: 16      		db	v
              	v:	set	v+2
04B0: 18      		db	v
              	v:	set	v+2
04B1: 1A      		db	v
              	v:	set	v+2
04B2: 1C      		db	v
              	v:	set	v+2
04B3: 1E      		db	v
              	v:	set	v+2
04B4: 20      		db	v
              	v:	set	v+2
04B5: 22      		db	v
              	v:	set	v+2
04B6: 24      		db	v
              	v:	set	v+2
04B7: 26      		db	v
              	v:	set	v+2
04B8: 28      		db	v
              	
04B9: 00000000	regs2:	ds	20,0
04BD: 00...   	
              	
04CD: A53C    	hlval:	db	0a5h,03ch
              	
              	; skip to next page boundary
04CF: FFFFFFFF		org	(($+255)/256)*256
04D3: FF...   	
0500: 30313233	hextab:	db	'0123456789abcdef'
0504: 34353637	
0508: 38396162	
050C: 63646566	
0510: FFFFFFFF		ds	240
0514: FF...   	
0600:         	stack:	equ	$
              	
              		end


; +++ segments +++

#CODE          = $0100 =   256,  size = $0500 =  1280

; +++ global symbols +++

_end    = $0600 =  1536          prelim.asm:36 (unused)
_size   = $0500 =  1280          prelim.asm:36 (unused)
_z80_   = $0001 =     1          prelim.asm:1 (unused)
allok   = $043F =  1087          prelim.asm:270 (unused)
allok1  = $0442 =  1090          prelim.asm:271
conout  = $04A2 =  1186          prelim.asm:323
end     = $044D =  1101          prelim.asm:278
error   = $046A =  1130          prelim.asm:287
hextab  = $0500 =  1280          prelim.asm:349
hlval   = $04CD =  1229          prelim.asm:345
lab0    = $0111 =   273          prelim.asm:47
lab1    = $0114 =   276          prelim.asm:48
lab10   = $03C4 =   964          prelim.asm:235
lab1c   = $024F =   591          prelim.asm:201
lab1m   = $034F =   847          prelim.asm:204
lab1pe  = $02AB =   683          prelim.asm:202
lab1z   = $02F3 =   755          prelim.asm:203
lab2    = $0117 =   279          prelim.asm:50
lab2c   = $025B =   603          prelim.asm:201
lab2m   = $035B =   859          prelim.asm:204
lab2pe  = $02B7 =   695          prelim.asm:202
lab2z   = $02FF =   767          prelim.asm:203
lab3    = $0121 =   289          prelim.asm:55
lab3c   = $0269 =   617          prelim.asm:201
lab3m   = $0369 =   873          prelim.asm:204
lab3pe  = $02C5 =   709          prelim.asm:202
lab3z   = $030D =   781          prelim.asm:203
lab4    = $012A =   298          prelim.asm:62
lab4c   = $0276 =   630          prelim.asm:201
lab4m   = $0376 =   886          prelim.asm:204
lab4pe  = $02D2 =   722          prelim.asm:202
lab4z   = $031A =   794          prelim.asm:203
lab5    = $0393 =   915          prelim.asm:210
lab5c   = $0281 =   641          prelim.asm:201
lab5m   = $0381 =   897          prelim.asm:204
lab5pe  = $02DD =   733          prelim.asm:202
lab5z   = $0325 =   805          prelim.asm:203
lab6    = $039E =   926          prelim.asm:215
lab6c   = $028C =   652          prelim.asm:201
lab6m   = $038C =   908          prelim.asm:204
lab6pe  = $02E8 =   744          prelim.asm:202
lab6z   = $0330 =   816          prelim.asm:203
lab7    = $03A9 =   937          prelim.asm:222
lab7c   = $0296 =   662          prelim.asm:201
lab7z   = $033A =   826          prelim.asm:203
lab8    = $03AD =   941          prelim.asm:224
lab8c   = $02A0 =   672          prelim.asm:201
lab8z   = $0344 =   836          prelim.asm:203
lab9    = $03B7 =   951          prelim.asm:229
okmsg   = $044F =  1103          prelim.asm:283
regs1   = $04A5 =  1189          prelim.asm:338
regs2   = $04B9 =  1209          prelim.asm:343
reta    = $0209 =   521          prelim.asm:115
stack   = $0600 =  1536          prelim.asm:351
start   = $0100 =   256          prelim.asm:38 (unused)
v       = $0028 =    40          prelim.asm:89


total time: 0.0039 sec.
no errors
